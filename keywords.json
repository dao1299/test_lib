[ {
  "name" : "switchToWindowByIndex",
  "description" : "Chuyển sự điều khiển của WebDriver sang một tab hoặc cửa sổ khác dựa trên chỉ số (index) của nó (bắt đầu từ 0).",
  "category" : "Web/Window&Frame",
  "example" : "// Mở liên kết trong tab mới và chuyển sang tab đó\nwebKeyword.rightClickAndSelect(productLinkObject, \"Mở trong tab mới\");\nwebKeyword.switchToWindowByIndex(1); // Chuyển sang tab thứ hai\n\n// Quay lại tab chính sau khi hoàn thành\nwebKeyword.click(submitButtonObject);\nwebKeyword.switchToWindowByIndex(0);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Có đủ số lượng cửa sổ/tab đang mở để chuyển đến chỉ số được chỉ định" ],
  "exceptions" : [ "IndexOutOfBoundsException: Nếu chỉ số nằm ngoài phạm vi của số lượng cửa sổ/tab đang mở", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "NAVIGATION",
  "stability" : "STABLE",
  "tags" : [ "web", "window", "tab", "navigation", "switch", "index", "browser", "context", "handle" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "switchToWindowByIndex",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "int",
    "name" : "index",
    "description" : "Chỉ số của cửa sổ/tab cần chuyển đến (0 là cửa sổ đầu tiên)."
  } ]
}, {
  "name" : "assertElementDisabled",
  "description" : "Khẳng định rằng một phần tử đang ở trạng thái không thể tương tác (disabled). Nếu phần tử đang enabled, kịch bản sẽ DỪNG LẠI.",
  "category" : "Web/Assert",
  "example" : "// Kiểm tra nút gửi form bị vô hiệu hóa khi chưa điền thông tin bắt buộc\nwebKeyword.navigateToUrl(\"https://example.com/registration\");\nwebKeyword.waitForPageLoaded(10);\nwebKeyword.assertElementDisabled(submitButtonBeforeFillForm);\n\n// Kiểm tra nút thanh toán bị vô hiệu hóa khi chưa chọn phương thức thanh toán\nwebKeyword.click(checkoutButtonObject);\nwebKeyword.waitForPageLoaded(15);\nwebKeyword.assertElementDisabled(paymentButtonObject);\n\n// Kiểm tra nút xác nhận bị vô hiệu hóa khi chưa đồng ý điều khoản\nwebKeyword.sendKeys(usernameInputObject, \"testuser\");\nwebKeyword.sendKeys(passwordInputObject, \"password123\");\nwebKeyword.assertElementDisabled(confirmButtonObject);\n\n// Kiểm tra trường nhập liệu bị vô hiệu hóa trong chế độ xem\nwebKeyword.click(viewModeButtonObject);\nwebKeyword.assertElementDisabled(nameFieldInViewMode);\n\n// Kiểm tra nút chỉnh sửa bị vô hiệu hóa cho người dùng không có quyền\nwebKeyword.sendKeys(usernameInputObject, \"readonlyuser\");\nwebKeyword.sendKeys(passwordInputObject, \"password123\");\nwebKeyword.click(loginButtonObject);\nwebKeyword.waitForPageLoaded(10);\nwebKeyword.assertElementDisabled(editButtonObject);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần kiểm tra phải tồn tại trong DOM" ],
  "exceptions" : [ "AssertionError: Nếu phần tử đang ở trạng thái enabled", "NoSuchElementException: Nếu không tìm thấy phần tử", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "assert", "verify", "hard", "enabled", "disabled", "state", "interactive", "button", "input" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "assertElementDisabled",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra."
  } ]
}, {
  "name" : "switchToWindowByTitle",
  "description" : "Duyệt qua tất cả các cửa sổ hoặc tab đang mở và chuyển sự điều khiển của WebDriver sang cửa sổ/tab có tiêu đề khớp chính xác với chuỗi được cung cấp.",
  "category" : "Web/Window&Frame",
  "example" : "// Chuyển sang tab chi tiết sản phẩm\nwebKeyword.click(viewDetailsLinkObject); // Mở tab mới\nwebKeyword.switchToWindowByTitle(\"Chi tiết sản phẩm ABC\");\nwebKeyword.waitForElementVisible(productSpecificationsObject);\n\n// Chuyển sang tab thanh toán\nwebKeyword.click(checkoutButtonObject); // Mở tab thanh toán\nwebKeyword.switchToWindowByTitle(\"Thanh toán đơn hàng\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Có ít nhất một cửa sổ/tab đang mở với tiêu đề cần chuyển đến" ],
  "exceptions" : [ "NoSuchWindowException: Nếu không tìm thấy cửa sổ nào có tiêu đề được chỉ định", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "NAVIGATION",
  "stability" : "STABLE",
  "tags" : [ "web", "window", "tab", "navigation", "switch", "title", "browser", "context", "handle" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "switchToWindowByTitle",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "windowTitle",
    "description" : "Tiêu đề chính xác của cửa sổ hoặc tab cần chuyển đến."
  } ]
}, {
  "name" : "deleteAllCookies",
  "description" : "Xóa tất cả các cookie của phiên làm việc hiện tại trên trình duyệt.",
  "category" : "Web/Storage",
  "example" : "// Đăng xuất và xóa cookies\nwebKeyword.click(logoutButtonObject);\nwebKeyword.deleteAllCookies();\nwebKeyword.navigate(\"https://example.com/login\");\n\n// Thiết lập lại trạng thái trình duyệt\nwebKeyword.deleteAllCookies();\nwebKeyword.clearLocalStorage();\nwebKeyword.navigate(\"https://example.com\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động" ],
  "exceptions" : [ "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "WRITE",
  "stability" : "STABLE",
  "tags" : [ "web", "cookie", "session", "clear", "reset", "cleanup", "browser", "authentication", "delete" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "deleteAllCookies",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "verifyElementVisibleHard",
  "description" : "Kiểm tra một phần tử có đang hiển thị trên giao diện hay không. Nếu kiểm tra thất bại (phần tử không hiển thị như mong đợi), kịch bản sẽ DỪNG LẠI ngay lập tức.",
  "category" : "Web/Assert",
  "example" : "// Kiểm tra thông báo lỗi hiển thị sau khi gửi form không hợp lệ\nwebKeyword.click(submitButtonObject); // Gửi form trống\nwebKeyword.verifyElementVisibleHard(errorMesssageObject, true);\n\n// Kiểm tra nút đăng nhập hiển thị trên trang chủ\nwebKeyword.navigateToUrl(\"https://example.com\");\nwebKeyword.waitForPageLoaded(10);\nwebKeyword.verifyElementVisibleHard(loginButtonObject, true);\n\n// Kiểm tra phần tử không hiển thị sau khi đóng\nwebKeyword.click(closePopupButtonObject);\nwebKeyword.verifyElementVisibleHard(popupObject, false);\n\n// Kiểm tra menu dropdown hiển thị sau khi hover\nwebKeyword.hoverElement(menuObject);\nwebKeyword.verifyElementVisibleHard(dropdownMenuObject, true);\n\n// Kiểm tra biểu tượng loading không còn hiển thị sau khi tải xong\nwebKeyword.click(refreshButtonObject);\nwebKeyword.waitForElementNotVisible(loadingIconObject);\nwebKeyword.verifyElementVisibleHard(loadingIconObject, false);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần kiểm tra phải tồn tại trong DOM" ],
  "exceptions" : [ "AssertionError: Nếu trạng thái hiển thị của phần tử không khớp với kỳ vọng", "NoSuchElementException: Nếu không tìm thấy phần tử", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "assert", "verify", "hard", "visibility", "display", "element", "visible", "hidden", "validation" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyElementVisibleHard",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra."
  }, {
    "type" : "boolean",
    "name" : "isVisible",
    "description" : "Trạng thái hiển thị mong đợi (true cho hiển thị, false cho bị ẩn)."
  } ]
}, {
  "name" : "closeBrowser",
  "description" : "Đóng hoàn toàn phiên trình duyệt hoặc thiết bị hiện tại và giải phóng tài nguyên. Phương thức này nên được gọi ở cuối mỗi test case để tránh rò rỉ tài nguyên.",
  "category" : "Session/Lifecycle",
  "example" : "// Đóng trình duyệt sau khi hoàn thành test case\ndriverKeyword.closeBrowser();",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "Đã khởi tạo trình duyệt hoặc thiết bị trước đó" ],
  "exceptions" : [ "WebDriverException: Nếu có lỗi khi đóng trình duyệt" ],
  "platform" : "ALL",
  "systemImpact" : "MODIFY",
  "stability" : "STABLE",
  "tags" : [ "browser", "session", "cleanup" ],
  "className" : "com.vtnet.netat.core.keywords.DriverKeyword",
  "methodName" : "closeBrowser",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "clickAndSwitchToNewTab",
  "description" : "Click vào một phần tử (thường là link) và tự động chuyển sự điều khiển sang tab/cửa sổ mới vừa được mở ra.",
  "category" : "Web/Window&Frame",
  "example" : "// Click vào liên kết mở trong tab mới\nwebKeyword.clickAndSwitchToNewTab(externalLinkObject);\nwebKeyword.waitForPageLoaded();\n\n// Click vào nút xem chi tiết sản phẩm (mở tab mới)\nwebKeyword.clickAndSwitchToNewTab(viewDetailsButtonObject);\nwebKeyword.verifyElementVisibleHard(productSpecificationsObject, 10);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần click phải tồn tại trong DOM và có khả năng mở tab mới (ví dụ: có thuộc tính target='_blank')" ],
  "exceptions" : [ "NoSuchElementException: Nếu không tìm thấy phần tử", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "TimeoutException: Nếu tab mới không mở trong thời gian chờ", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "NAVIGATION",
  "stability" : "STABLE",
  "tags" : [ "web", "window", "tab", "navigation", "click", "switch", "browser", "link" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "clickAndSwitchToNewTab",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử link cần click."
  } ]
}, {
  "name" : "sendText",
  "description" : "Nhập văn bản vào một ô input có thể chỉnh sửa. Lưu ý: Chỉ hoạt động với các phần tử có thuộc tính 'editable' là true như TextField, EditText, TextArea, v.v. Không thể sử dụng với các phần tử không cho phép nhập liệu như Button, Label.",
  "category" : "Mobile/Interaction",
  "example" : "// Nhập tên đăng nhập vào ô username\nmobileKeyword.sendText(usernameInput, \"admin@example.com\");\n\n// Nhập mật khẩu vào ô password\nmobileKeyword.sendText(passwordInput, \"SecurePassword123\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Phần tử UI cần phải là trường nhập liệu có thể chỉnh sửa" ],
  "exceptions" : [ "ElementNotVisibleException: Nếu phần tử không hiển thị", "NoSuchElementException: Nếu không tìm thấy phần tử", "ElementNotInteractableException: Nếu phần tử không thể tương tác hoặc không phải trường nhập liệu" ],
  "platform" : "MOBILE",
  "systemImpact" : "MODIFY",
  "stability" : "STABLE",
  "tags" : [ "mobile", "interaction", "input", "text-entry" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "sendText",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng đầu vào có thể chỉnh sửa (như TextField, EditText)."
  }, {
    "type" : "String",
    "name" : "text",
    "description" : "Văn bản cần nhập vào phần tử."
  } ]
}, {
  "name" : "uncheck",
  "description" : "Kiểm tra và đảm bảo một checkbox đang ở trạng thái không được chọn. Nếu phần tử đang được chọn, keyword sẽ thực hiện click để bỏ chọn nó.",
  "category" : "Web/Interaction",
  "example" : "// Bỏ chọn checkbox đăng ký nhận bản tin\nwebKeyword.uncheck(newsletterCheckbox);\n\n// Bỏ chọn tùy chọn gửi hàng nhanh\nwebKeyword.uncheck(expressShippingCheckbox);\n\n// Bỏ chọn và kiểm tra trạng thái\nwebKeyword.uncheck(saveCardDetailsCheckbox);\nboolean isSelected = webKeyword.findElement(saveCardDetailsCheckbox).isSelected();\nAssert.assertFalse(isSelected, \"Checkbox 'Lưu thông tin thẻ' không được chọn\");\n\n// Bỏ chọn nhiều checkbox\nwebKeyword.uncheck(emailNotificationCheckbox);\nwebKeyword.uncheck(smsNotificationCheckbox);\nwebKeyword.uncheck(pushNotificationCheckbox);\n\n// Bỏ chọn tất cả các checkbox trong một danh sách\nList<WebElement> optionalFeatures = webKeyword.findElements(optionalFeaturesCheckboxes);\nfor (WebElement feature : optionalFeatures) {\n    if (feature.isSelected()) {\n        feature.click();\n    }\n}",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần bỏ chọn phải tồn tại trong DOM", "Phần tử phải hiển thị và có thể tương tác được", "Phần tử phải là checkbox (input type=\"checkbox\")", "Lưu ý: Phương thức này chỉ hoạt động với checkbox, không dùng cho radio button" ],
  "exceptions" : [ "ElementNotVisibleException: Nếu phần tử không hiển thị trên trang", "ElementNotInteractableException: Nếu phần tử không thể tương tác", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "TimeoutException: Nếu phần tử không xuất hiện trong thời gian chờ", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "WRITE",
  "stability" : "STABLE",
  "tags" : [ "web", "interaction", "checkbox", "uncheck", "deselect", "unselect", "toggle", "form", "input", "boolean" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "uncheck",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử checkbox cần bỏ chọn."
  } ]
}, {
  "name" : "clearText",
  "description" : "Xóa toàn bộ văn bản đang có trong một phần tử có thể nhập liệu như ô input hoặc textarea.",
  "category" : "Web/Interaction",
  "example" : "// Xóa nội dung trong ô tìm kiếm\nwebKeyword.clearText(searchInputObject);\n\n// Xóa nội dung trước khi nhập dữ liệu mới\nwebKeyword.clearText(usernameInputObject);\nwebKeyword.sendKeys(usernameInputObject, \"new_username\");\n\n// Xóa nội dung trong textarea\nwebKeyword.clearText(commentTextareaObject);\n\n// Xóa nội dung trong nhiều trường input\nwebKeyword.clearText(firstNameInputObject);\nwebKeyword.clearText(lastNameInputObject);\nwebKeyword.clearText(emailInputObject);\n\n// Xóa nội dung và kiểm tra rỗng\nwebKeyword.clearText(messageInputObject);\nString value = webKeyword.findElement(messageInputObject).getAttribute(\"value\");\nAssert.assertEquals(\"\", value, \"Trường input phải rỗng sau khi xóa\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần xóa nội dung phải tồn tại trong DOM", "Phần tử phải hiển thị và có thể tương tác được", "Phần tử phải là loại có thể nhập liệu (input, textarea, contenteditable)" ],
  "exceptions" : [ "ElementNotVisibleException: Nếu phần tử không hiển thị trên trang", "ElementNotInteractableException: Nếu phần tử không thể tương tác", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "TimeoutException: Nếu phần tử không xuất hiện trong thời gian chờ", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "WRITE",
  "stability" : "STABLE",
  "tags" : [ "web", "interaction", "clear", "input", "text", "delete", "remove", "erase", "form", "reset" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "clearText",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần xóa nội dung."
  } ]
}, {
  "name" : "getAttribute",
  "description" : "Lấy và trả về giá trị của một thuộc tính (attribute) cụ thể trên một phần tử HTML.",
  "category" : "Web/Getter",
  "example" : "// Lấy URL từ thẻ liên kết\nString linkUrl = webKeyword.getAttribute(linkObject, \"href\");\nwebKeyword.verifyContains(linkUrl, \"https://example.com\");\n\n// Kiểm tra trạng thái của checkbox\nString isChecked = webKeyword.getAttribute(termsCheckboxObject, \"checked\");\nif (isChecked != null && isChecked.equals(\"true\")) {\n    System.out.println(\"Checkbox đã được chọn\");\n}\n\n// Lấy ID của phần tử\nString elementId = webKeyword.getAttribute(formObject, \"id\");\nwebKeyword.verifyEqual(elementId, \"registration-form\");\n\n// Kiểm tra trạng thái disabled của nút\nString isDisabled = webKeyword.getAttribute(submitButtonObject, \"disabled\");\nwebKeyword.verifyNotNull(isDisabled); // Nút đang bị vô hiệu hóa\n\n// Lấy giá trị data attribute\nString productId = webKeyword.getAttribute(productItemObject, \"data-product-id\");\nwebKeyword.verifyEqual(productId, \"12345\");",
  "returnValue" : "String: Giá trị của thuộc tính hoặc null nếu thuộc tính không tồn tại",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần lấy thuộc tính phải tồn tại trong DOM" ],
  "exceptions" : [ "NoSuchElementException: Nếu phần tử không tồn tại", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "TimeoutException: Nếu phần tử không xuất hiện trong thời gian chờ", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "getter", "attribute", "property", "html", "dom", "read", "extract", "information", "element" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "getAttribute",
  "returnType" : "String",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần lấy thuộc tính."
  }, {
    "type" : "String",
    "name" : "attributeName",
    "description" : "Tên của thuộc tính cần lấy giá trị (ví dụ: 'href', 'class', 'value')."
  } ]
}, {
  "name" : "setSliderValue",
  "description" : "Thiết lập giá trị cho một thanh trượt (slider) bằng cách chạm vào vị trí tương ứng. Giá trị từ 0.0 (bên trái) đến 1.0 (bên phải). Phương thức này tự động tính toán tọa độ cần chạm dựa trên kích thước và vị trí của slider. Hữu ích khi cần điều chỉnh các điều khiển như âm lượng, độ sáng, hoặc các giá trị số trong khoảng. Lưu ý: Giá trị phải nằm trong khoảng từ 0.0 đến 1.0, nếu không sẽ gây ra ngoại lệ.",
  "category" : "Mobile/Interaction",
  "example" : "// Thiết lập thanh âm lượng ở mức 75%\nmobileKeyword.setSliderValue(volumeSlider, 0.75);\n\n// Thiết lập độ sáng màn hình ở mức thấp nhất\nmobileKeyword.setSliderValue(brightnessSlider, 0.0);\n\n// Thiết lập giá trị trung bình cho một bộ lọc\nmobileKeyword.setSliderValue(filterIntensitySlider, 0.5);\n\n// Thiết lập mức giá tối đa trong bộ lọc tìm kiếm\nmobileKeyword.setSliderValue(priceRangeSlider, 1.0);\n\n// Điều chỉnh thanh trượt đánh giá sao\nmobileKeyword.setSliderValue(ratingSlider, 0.8); // Đánh giá 4/5 sao\n\n// Thiết lập mức zoom cho camera\nmobileKeyword.setSliderValue(zoomSlider, 0.3);\n\n// Điều chỉnh tốc độ phát video\nmobileKeyword.setSliderValue(playbackSpeedSlider, 0.6);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Phần tử slider cần điều chỉnh phải tồn tại và hiển thị trên màn hình", "Phần tử phải là loại có thể điều chỉnh bằng cách chạm vào vị trí khác nhau", "Slider phải có chiều ngang đủ lớn để có thể chạm chính xác vào các vị trí khác nhau" ],
  "exceptions" : [ "IllegalArgumentException: Nếu giá trị nằm ngoài khoảng từ 0.0 đến 1.0", "NoSuchElementException: Nếu không tìm thấy phần tử slider", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "WebDriverException: Nếu không thể lấy vị trí hoặc kích thước của phần tử", "ElementNotInteractableException: Nếu không thể tương tác với slider" ],
  "platform" : "MOBILE",
  "systemImpact" : "WRITE",
  "stability" : "STABLE",
  "tags" : [ "mobile", "interaction", "slider", "seekbar", "touch", "drag", "value", "adjustment", "range", "control" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "setSliderValue",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử slider cần điều chỉnh."
  }, {
    "type" : "double",
    "name" : "value",
    "description" : "Giá trị cần thiết lập, từ 0.0 (nhỏ nhất/trái) đến 1.0 (lớn nhất/phải)."
  } ]
}, {
  "name" : "executeUpdate",
  "description" : "Thực thi câu lệnh INSERT, UPDATE, DELETE và trả về số bản ghi bị ảnh hưởng. Hỗ trợ truyền tham số vào câu truy vấn để tránh SQL injection.",
  "category" : "DB/Execution",
  "example" : "// Thêm một bản ghi mới vào bảng users\nint rowsAffected = databaseKeyword.executeUpdate(\n    \"mysql_dev\", \n    \"INSERT INTO users (username, email, status) VALUES (?, ?, ?)\", \n    \"john.doe\", \"john.doe@example.com\", \"active\"\n);\n\n// Kiểm tra xem có đúng một bản ghi được thêm vào không\nAssert.assertEquals(rowsAffected, 1);",
  "returnValue" : "int: Số bản ghi bị ảnh hưởng bởi câu lệnh",
  "prerequisites" : [ "Đã khởi tạo kết nối CSDL với profileName tương ứng" ],
  "exceptions" : [ "SQLException: Nếu có lỗi khi thực thi câu lệnh", "IllegalArgumentException: Nếu profileName không tồn tại" ],
  "platform" : "ALL",
  "systemImpact" : "MODIFY",
  "stability" : "STABLE",
  "tags" : [ "database", "update", "insert", "delete" ],
  "className" : "com.vtnet.netat.db.keywords.DatabaseKeyword",
  "methodName" : "executeUpdate",
  "returnType" : "int",
  "parameters" : [ {
    "type" : "String",
    "name" : "profileName",
    "description" : "Tên của profile kết nối CSDL đã được khởi tạo trước đó."
  }, {
    "type" : "String",
    "name" : "query",
    "description" : "Câu lệnh SQL INSERT, UPDATE hoặc DELETE cần thực thi, có thể chứa các placeholder '?' cho tham số."
  }, {
    "type" : "Object[]",
    "name" : "params",
    "description" : "Các tham số cần truyền vào câu truy vấn, theo thứ tự xuất hiện của các placeholder '?'."
  } ]
}, {
  "name" : "verifyTextContainsSoft",
  "description" : "Kiểm tra văn bản của một phần tử có chứa một chuỗi con hay không. Nếu không chứa, kịch bản sẽ ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Web/Assert",
  "example" : "// Kiểm tra kết quả tìm kiếm có chứa thông tin số lượng\nwebKeyword.sendKeys(searchInputObject, \"điện thoại\");\nwebKeyword.click(searchButtonObject);\nwebKeyword.waitForElementVisible(searchResultSummary);\nwebKeyword.verifyTextContainsSoft(searchResultSummary, \"kết quả\");\nwebKeyword.verifyTextContainsSoft(searchResultSummary, \"điện thoại\");\n\n// Kiểm tra nhiều thông tin trên trang sản phẩm\nwebKeyword.verifyTextContainsSoft(productDescriptionObject, \"chống nước\");\nwebKeyword.verifyTextContainsSoft(productDescriptionObject, \"bảo hành\");\nwebKeyword.verifyTextContainsSoft(productDescriptionObject, \"12 tháng\");\nwebKeyword.click(addToCartButtonObject); // Tiếp tục thực hiện hành động\n\n// Kiểm tra thông báo xác nhận có chứa thông tin đơn hàng\nwebKeyword.click(placeOrderButtonObject);\nwebKeyword.waitForElementVisible(confirmationMessageObject);\nwebKeyword.verifyTextContainsSoft(confirmationMessageObject, \"đặt hàng thành công\");\nwebKeyword.verifyTextContainsSoft(confirmationMessageObject, \"mã đơn hàng\");\n\n// Kiểm tra trang hồ sơ người dùng\nwebKeyword.click(profileLinkObject);\nwebKeyword.verifyTextContainsSoft(profileInfoObject, \"Nguyễn\"); // Tên người dùng\nwebKeyword.verifyTextContainsSoft(profileInfoObject, \"@example.com\"); // Email\n\n// Kiểm tra thông báo lỗi\nwebKeyword.click(submitButtonObject); // Gửi form không hợp lệ\nwebKeyword.verifyTextContainsSoft(validationMessageObject, \"không được để trống\");\nwebKeyword.sendKeys(emailInputObject, \"test@example.com\"); // Tiếp tục điền form",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần kiểm tra phải tồn tại trong DOM và có văn bản" ],
  "exceptions" : [ "NoSuchElementException: Nếu không tìm thấy phần tử", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "assert", "verify", "soft", "text", "content", "contains", "substring", "partial", "validation" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyTextContainsSoft",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử chứa văn bản cần kiểm tra."
  }, {
    "type" : "String",
    "name" : "partialText",
    "description" : "Chuỗi văn bản con mong đợi."
  } ]
}, {
  "name" : "scrollToBottom",
  "description" : "Cuộn xuống vị trí thấp nhất (cuối trang) của trang web.",
  "category" : "Web/Interaction",
  "example" : "// Cuộn xuống cuối trang để truy cập chân trang\nwebKeyword.scrollToBottom();\nwebKeyword.verifyElementVisible(footerLinksObject);\nwebKeyword.click(contactUsLinkObject);\n\n// Cuộn xuống cuối trang để tải thêm dữ liệu (infinite scroll)\nwebKeyword.scrollToBottom();\nwebKeyword.waitForElementVisible(loadingIndicatorObject);\nwebKeyword.waitForElementInvisible(loadingIndicatorObject);\nwebKeyword.verifyElementCount(productItemsObject, 20); // Kiểm tra đã tải thêm sản phẩm\n\n// Kiểm tra nút \"Back to top\" xuất hiện khi cuộn xuống cuối trang\nwebKeyword.scrollToBottom();\nwebKeyword.waitForElementVisible(backToTopButtonObject);\nwebKeyword.click(backToTopButtonObject);\nwebKeyword.executeJavaScript(\"return window.pageYOffset\", (yOffset) -> {\n    webKeyword.verifyEqual(yOffset, 0);\n    return null;\n});\n\n// Cuộn xuống cuối trang để kiểm tra tất cả nội dung đã tải\nwebKeyword.scrollToBottom();\nwebKeyword.verifyElementVisible(copyrightTextObject);\n\n// Cuộn xuống cuối trang để đăng ký nhận bản tin\nwebKeyword.scrollToBottom();\nwebKeyword.sendKeys(newsletterEmailInputObject, \"test@example.com\");\nwebKeyword.click(newsletterSubmitButtonObject);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Trình duyệt phải hỗ trợ thực thi JavaScript" ],
  "exceptions" : [ "JavascriptException: Nếu có lỗi khi thực thi JavaScript", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "interaction", "scroll", "bottom", "page", "navigation", "position", "viewport", "javascript", "footer" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "scrollToBottom",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "verifyUrlHard",
  "description" : "So sánh URL của trang hiện tại với một chuỗi mong đợi (phải khớp chính xác). Nếu không khớp, kịch bản sẽ DỪNG LẠI.",
  "category" : "Web/Assert",
  "example" : "// Kiểm tra URL sau khi đăng nhập thành công\nwebKeyword.sendKeys(usernameInputObject, \"testuser\");\nwebKeyword.sendKeys(passwordInputObject, \"password123\");\nwebKeyword.click(loginButtonObject);\nwebKeyword.waitForUrlContains(\"/dashboard\", 10);\nwebKeyword.verifyUrlHard(\"https://example.com/dashboard\");\n\n// Kiểm tra URL sau khi chuyển hướng với tham số truy vấn\nwebKeyword.click(checkoutButtonObject);\nwebKeyword.waitForPageLoaded(15);\nwebKeyword.verifyUrlHard(\"https://example.com/checkout?step=payment&session=abc123\");\n\n// Kiểm tra URL sau khi hoàn thành quy trình\nwebKeyword.click(completeOrderButtonObject);\nwebKeyword.waitForPageLoaded(20);\nwebKeyword.verifyUrlHard(\"https://example.com/order-confirmation\");\n\n// Kiểm tra URL sau khi chọn ngôn ngữ\nwebKeyword.click(languageSelectorObject);\nwebKeyword.click(englishOptionObject);\nwebKeyword.waitForPageLoaded(10);\nwebKeyword.verifyUrlHard(\"https://example.com/en/home\");\n\n// Kiểm tra URL sau khi đăng xuất\nwebKeyword.click(userMenuObject);\nwebKeyword.click(logoutOptionObject);\nwebKeyword.waitForPageLoaded(10);\nwebKeyword.verifyUrlHard(\"https://example.com/login?status=logout\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Trang web đã hoàn thành quá trình tải" ],
  "exceptions" : [ "AssertionError: Nếu URL hiện tại không khớp với URL mong đợi", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "assert", "verify", "hard", "url", "address", "location", "navigation", "browser", "validation" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyUrlHard",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "expectedUrl",
    "description" : "URL đầy đủ mong đợi."
  } ]
}, {
  "name" : "pressKeyCode",
  "description" : "Mô phỏng hành động nhấn các phím vật lý của thiết bị Android như HOME, BACK, VOLUME_UP, v.v. Chỉ hoạt động trên Android, sẽ hiển thị cảnh báo nếu được gọi trên iOS. Tham số keyName phải là một giá trị hợp lệ từ enum AndroidKey. Hữu ích khi cần tương tác với các phím vật lý hoặc phím ảo của thiết bị.",
  "category" : "Mobile/System",
  "example" : "// Nhấn nút Back để quay lại màn hình trước\nmobileKeyword.pressKeyCode(\"BACK\");\n\n// Tăng âm lượng thiết bị\nmobileKeyword.pressKeyCode(\"VOLUME_UP\");\nmobileKeyword.pressKeyCode(\"VOLUME_UP\");\n\n// Nhấn phím Home để quay về màn hình chính\nmobileKeyword.pressKeyCode(\"HOME\");\n\n// Mô phỏng nhấn phím Enter sau khi nhập văn bản\nmobileKeyword.sendText(searchInput, \"điện thoại samsung\");\nmobileKeyword.pressKeyCode(\"ENTER\");\n\n// Các phím số và ký tự đặc biệt\nmobileKeyword.pressKeyCode(\"0\");\nmobileKeyword.pressKeyCode(\"STAR\"); // Phím *\nmobileKeyword.pressKeyCode(\"POUND\"); // Phím #\n\n// Mô phỏng nhấn phím menu\nmobileKeyword.pressKeyCode(\"MENU\");\n\n// Mô phỏng nhấn phím camera\nmobileKeyword.pressKeyCode(\"CAMERA\");\n\n// Mô phỏng nhấn phím nguồn (thận trọng khi sử dụng)\nmobileKeyword.pressKeyCode(\"POWER\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "Thiết bị Android đã được kết nối và cấu hình đúng với Appium", "Đang sử dụng AndroidDriver (phương thức không hoạt động trên iOS)", "Tham số keyName phải là một giá trị hợp lệ từ enum AndroidKey" ],
  "exceptions" : [ "IllegalArgumentException: Nếu tên phím không hợp lệ", "WebDriverException: Nếu không thể thực hiện hành động nhấn phím", "UnsupportedCommandException: Nếu lệnh không được hỗ trợ trên thiết bị hiện tại" ],
  "platform" : "MOBILE",
  "systemImpact" : "WRITE",
  "stability" : "STABLE",
  "tags" : [ "mobile", "android", "key", "button", "physical", "system", "press", "input", "hardware" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "pressKeyCode",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "keyName",
    "description" : "Tên phím trong AndroidKey enum (ví dụ: 'HOME', 'BACK', 'VOLUME_UP')."
  } ]
}, {
  "name" : "getText",
  "description" : "Lấy và trả về văn bản của phần tử. Keyword này sẽ tự động thử nhiều cách: 1. Lấy thuộc tính 'value' (cho ô input, textarea). 2. Lấy văn bản hiển thị thông thường. 3. Lấy 'textContent' hoặc 'innerText' nếu 2 cách trên thất bại.",
  "category" : "Web/Getter",
  "example" : "// Lấy văn bản từ phần tử hiển thị\nString welcomeMessage = webKeyword.getText(welcomeMessageObject);\nwebKeyword.verifyEqual(welcomeMessage, \"Chào mừng bạn đến với trang web của chúng tôi!\");\n\n// Lấy giá trị từ ô input\nwebKeyword.sendKeys(usernameInputObject, \"testuser\");\nString username = webKeyword.getText(usernameInputObject);\nwebKeyword.verifyEqual(username, \"testuser\");\n\n// Lấy văn bản từ phần tử động\nwebKeyword.click(showDetailsButtonObject);\nwebKeyword.waitForElementVisible(detailsTextObject);\nString details = webKeyword.getText(detailsTextObject);\nwebKeyword.verifyContains(details, \"Thông tin chi tiết\");\n\n// Lấy văn bản từ textarea\nwebKeyword.sendKeys(commentTextareaObject, \"Đây là bình luận test\");\nString comment = webKeyword.getText(commentTextareaObject);\nwebKeyword.verifyEqual(comment, \"Đây là bình luận test\");\n\n// Lấy văn bản từ phần tử có định dạng HTML\nString formattedText = webKeyword.getText(formattedTextObject);\nSystem.out.println(\"Văn bản đã lấy: \" + formattedText);",
  "returnValue" : "String: Văn bản của phần tử hoặc chuỗi rỗng nếu không có văn bản",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần lấy văn bản phải tồn tại trong DOM" ],
  "exceptions" : [ "NoSuchElementException: Nếu phần tử không tồn tại", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "TimeoutException: Nếu phần tử không xuất hiện trong thời gian chờ", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "getter", "text", "value", "content", "read", "extract", "information", "input", "display" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "getText",
  "returnType" : "String",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử chứa văn bản cần lấy."
  } ]
}, {
  "name" : "installApp",
  "description" : "Cài đặt ứng dụng từ một đường dẫn file .apk (Android) hoặc .ipa (iOS) vào thiết bị đang kết nối. Lưu ý: Đường dẫn phải trỏ đến một file hợp lệ và có thể truy cập từ máy thực thi test. Trên iOS, file .ipa phải được ký đúng cách để có thể cài đặt. Trên Android, thiết bị phải cho phép cài đặt từ nguồn không xác định.",
  "category" : "Mobile/AppLifecycle",
  "example" : "// Cài đặt ứng dụng Android từ thư mục local\nmobileKeyword.installApp(\"C:/apps/my-app.apk\");\n\n// Cài đặt ứng dụng iOS từ đường dẫn mạng (cần tải về trước)\nmobileKeyword.installApp(\"/tmp/downloaded-app.ipa\");\n\n// Cài đặt phiên bản mới của ứng dụng để kiểm tra tính năng cập nhật\nmobileKeyword.installApp(\"C:/builds/app-v2.0.apk\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Có quyền cài đặt ứng dụng trên thiết bị", "Trên Android: Đã bật 'Cài đặt từ nguồn không xác định'", "Trên iOS: File .ipa đã được ký đúng cách" ],
  "exceptions" : [ "WebDriverException: Nếu không thể cài đặt ứng dụng", "FileNotFoundException: Nếu không tìm thấy file ứng dụng" ],
  "platform" : "MOBILE",
  "systemImpact" : "MODIFY",
  "stability" : "STABLE",
  "tags" : [ "mobile", "app", "installation" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "installApp",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "appPath",
    "description" : "Đường dẫn tuyệt đối đến file ứng dụng (.apk hoặc .ipa)."
  } ]
}, {
  "name" : "dragAndDropByOffset",
  "description" : "Kéo một phần tử theo một khoảng cách (độ lệch x, y) so với vị trí hiện tại của nó. Rất hữu ích cho các thanh trượt (slider).",
  "category" : "Web/Interaction",
  "example" : "// Kéo thanh trượt giá sang phải 100px\nwebKeyword.dragAndDropByOffset(priceSliderHandle, 100, 0);\nwebKeyword.verifyElementAttribute(priceValueObject, \"value\", \"500\");\n\n// Kéo thanh trượt âm lượng xuống 50px\nwebKeyword.dragAndDropByOffset(volumeSliderObject, 0, -50);\nwebKeyword.verifyElementAttribute(volumeValueObject, \"value\", \"25\");\n\n// Kéo phần tử theo đường chéo\nwebKeyword.dragAndDropByOffset(draggableObject, 150, 100);\nPoint newPosition = webKeyword.findElement(draggableObject).getLocation();\nAssert.assertTrue(newPosition.getX() > originalPosition.getX() + 140, \"Phần tử phải được di chuyển theo trục X\");\nAssert.assertTrue(newPosition.getY() > originalPosition.getY() + 90, \"Phần tử phải được di chuyển theo trục Y\");\n\n// Di chuyển phần tử trong canvas\nwebKeyword.dragAndDropByOffset(canvasElementObject, 50, 30);\nwebKeyword.verifyElementAttribute(canvasPositionObject, \"data-x\", \"50\");\nwebKeyword.verifyElementAttribute(canvasPositionObject, \"data-y\", \"30\");\n\n// Điều chỉnh độ sáng trong trình chỉnh sửa ảnh\nwebKeyword.dragAndDropByOffset(brightnessSliderObject, 75, 0);\nwebKeyword.waitForElementAttributeChange(previewImageObject, \"data-brightness\", \"75\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần kéo phải tồn tại trong DOM", "Phần tử phải hiển thị và có thể tương tác được", "Trang web phải hỗ trợ thao tác kéo và thả", "Trình duyệt phải hỗ trợ thao tác kéo và thả (một số trình duyệt di động có thể không hỗ trợ đầy đủ)" ],
  "exceptions" : [ "ElementNotVisibleException: Nếu phần tử không hiển thị trên trang", "ElementNotInteractableException: Nếu phần tử không thể tương tác", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "TimeoutException: Nếu phần tử không xuất hiện trong thời gian chờ", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt", "MoveTargetOutOfBoundsException: Nếu vị trí đích nằm ngoài viewport hiện tại" ],
  "platform" : "WEB",
  "systemImpact" : "WRITE",
  "stability" : "MODERATE",
  "tags" : [ "web", "interaction", "drag", "offset", "slider", "move", "position", "coordinate", "mouse", "action" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "dragAndDropByOffset",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kéo."
  }, {
    "type" : "int",
    "name" : "xOffset",
    "description" : "Độ lệch theo trục ngang (pixel)."
  }, {
    "type" : "int",
    "name" : "yOffset",
    "description" : "Độ lệch theo trục dọc (pixel)."
  } ]
}, {
  "name" : "verifyElementAttributeSoft",
  "description" : "Kiểm tra giá trị của một thuộc tính (attribute) trên phần tử. Nếu giá trị không khớp, kịch bản sẽ ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Web/Assert",
  "example" : "// Kiểm tra thuộc tính alt của hình ảnh\nwebKeyword.verifyElementAttributeSoft(imageObject, \"alt\", \"Mô tả hình ảnh\");\n\n// Kiểm tra nhiều thuộc tính của một phần tử\nwebKeyword.verifyElementAttributeSoft(buttonObject, \"type\", \"submit\");\nwebKeyword.verifyElementAttributeSoft(buttonObject, \"class\", \"btn-primary\");\nwebKeyword.verifyElementAttributeSoft(buttonObject, \"data-action\", \"save\");\nwebKeyword.click(buttonObject); // Tiếp tục thực hiện hành động\n\n// Kiểm tra thuộc tính của nhiều phần tử\nwebKeyword.verifyElementAttributeSoft(usernameInputObject, \"placeholder\", \"Nhập tên đăng nhập\");\nwebKeyword.verifyElementAttributeSoft(passwordInputObject, \"placeholder\", \"Nhập mật khẩu\");\nwebKeyword.verifyElementAttributeSoft(passwordInputObject, \"type\", \"password\");\n\n// Kiểm tra thuộc tính aria-* cho accessibility\nwebKeyword.verifyElementAttributeSoft(modalObject, \"aria-hidden\", \"false\");\nwebKeyword.verifyElementAttributeSoft(closeButtonObject, \"aria-label\", \"Đóng\");\n\n// Kiểm tra thuộc tính style inline\nwebKeyword.verifyElementAttributeSoft(highlightedTextObject, \"style\", \"color: red;\");\n\n// Kiểm tra thuộc tính maxlength của trường nhập liệu\nwebKeyword.verifyElementAttributeSoft(phoneInputObject, \"maxlength\", \"10\");\nwebKeyword.sendKeys(phoneInputObject, \"0123456789\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần kiểm tra phải tồn tại trong DOM", "Thuộc tính cần kiểm tra phải tồn tại trên phần tử" ],
  "exceptions" : [ "NoSuchElementException: Nếu không tìm thấy phần tử", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "assert", "verify", "soft", "attribute", "property", "value", "element", "html", "validation" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyElementAttributeSoft",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra."
  }, {
    "type" : "String",
    "name" : "attributeName",
    "description" : "Tên của thuộc tính (ví dụ: 'href', 'class', 'value')."
  }, {
    "type" : "String",
    "name" : "expectedValue",
    "description" : "Giá trị mong đợi của thuộc tính."
  } ]
}, {
  "name" : "switchToFrame",
  "description" : "Chuyển sự điều khiển của WebDriver vào một phần tử iframe trên trang. Mọi hành động sau đó sẽ được thực hiện trong ngữ cảnh của iframe này.",
  "category" : "Web/Window&Frame",
  "example" : "// Chuyển vào iframe thanh toán\nwebKeyword.waitForElementVisible(paymentIframeObject);\nwebKeyword.switchToFrame(paymentIframeObject);\nwebKeyword.sendKeys(cardNumberObject, \"4111111111111111\");\n\n// Chuyển vào iframe trình soạn thảo\nwebKeyword.switchToFrame(richTextEditorObject);\nwebKeyword.sendKeys(editorBodyObject, \"Nội dung bài viết\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử iframe cần chuyển vào phải tồn tại trong DOM" ],
  "exceptions" : [ "NoSuchElementException: Nếu không tìm thấy phần tử iframe", "StaleElementReferenceException: Nếu phần tử iframe không còn gắn với DOM", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "NAVIGATION",
  "stability" : "STABLE",
  "tags" : [ "web", "iframe", "frame", "navigation", "switch", "context", "embedded", "content" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "switchToFrame",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng giao diện đại diện cho thẻ iframe cần chuyển vào."
  } ]
}, {
  "name" : "executeQuery",
  "description" : "Thực thi câu lệnh SELECT và trả về kết quả dưới dạng danh sách các bản ghi. Mỗi bản ghi là một Map với key là tên cột và value là giá trị của cột đó. Hỗ trợ truyền tham số vào câu truy vấn để tránh SQL injection.",
  "category" : "DB/Execution",
  "example" : "// Thực thi câu lệnh SELECT với tham số\nList<Map<String, Object>> users = databaseKeyword.executeQuery(\n    \"mysql_dev\", \n    \"SELECT id, username, email FROM users WHERE status = ? AND created_date > ?\", \n    \"active\", \"2023-01-01\"\n);\n\n// Truy cập dữ liệu từ kết quả\nString username = users.get(0).get(\"username\").toString();",
  "returnValue" : "List<Map<String, Object>>: Danh sách các bản ghi, mỗi bản ghi là một Map với key là tên cột và value là giá trị",
  "prerequisites" : [ "Đã khởi tạo kết nối CSDL với profileName tương ứng" ],
  "exceptions" : [ "SQLException: Nếu có lỗi khi thực thi câu truy vấn", "IllegalArgumentException: Nếu profileName không tồn tại" ],
  "platform" : "ALL",
  "systemImpact" : "READ_ONLY",
  "stability" : "STABLE",
  "tags" : [ "database", "query", "select" ],
  "className" : "com.vtnet.netat.db.keywords.DatabaseKeyword",
  "methodName" : "executeQuery",
  "returnType" : "List",
  "parameters" : [ {
    "type" : "String",
    "name" : "profileName",
    "description" : "Tên của profile kết nối CSDL đã được khởi tạo trước đó."
  }, {
    "type" : "String",
    "name" : "query",
    "description" : "Câu lệnh SQL SELECT cần thực thi, có thể chứa các placeholder '?' cho tham số."
  }, {
    "type" : "Object[]",
    "name" : "params",
    "description" : "Các tham số cần truyền vào câu truy vấn, theo thứ tự xuất hiện của các placeholder '?'."
  } ]
}, {
  "name" : "pressBack",
  "description" : "Mô phỏng hành động nhấn nút 'Back' vật lý của thiết bị. Hữu ích để điều hướng ngược lại màn hình trước đó, đóng dialog, hoặc hủy thao tác hiện tại. Trên iOS, hành động này tương đương với việc nhấn nút quay lại ở góc trên bên trái của nhiều ứng dụng.",
  "category" : "Mobile/Interaction",
  "example" : "// Quay lại màn hình trước đó\nmobileKeyword.pressBack();\n\n// Đóng dialog bằng cách nhấn nút Back\nmobileKeyword.pressBack();\n\n// Hủy thao tác nhập liệu\nmobileKeyword.sendText(searchInput, \"text\");\nmobileKeyword.pressBack(); // Hủy và quay lại màn hình trước",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium" ],
  "exceptions" : [ "WebDriverException: Nếu không thể thực hiện hành động Back" ],
  "platform" : "MOBILE",
  "systemImpact" : "MODIFY",
  "stability" : "STABLE",
  "tags" : [ "mobile", "navigation", "back-button", "device-key" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "pressBack",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "waitForUrlContains",
  "description" : "Tạm dừng kịch bản cho đến khi URL của trang hiện tại chứa một chuỗi con được chỉ định.",
  "category" : "Web/Wait",
  "example" : "// Chờ chuyển hướng đến trang dashboard\nwebKeyword.click(loginButtonObject);\nwebKeyword.waitForUrlContains(\"/dashboard\", 15);\nwebKeyword.verifyElementVisible(welcomeMessageObject);\n\n// Chờ chuyển hướng sau khi hoàn thành thanh toán\nwebKeyword.click(payNowButtonObject);\nwebKeyword.waitForUrlContains(\"order-confirmation\", 30);\nwebKeyword.verifyElementVisible(orderConfirmationObject);\n\n// Chờ chuyển hướng sau khi chọn danh mục sản phẩm\nwebKeyword.click(electronicsLinkObject);\nwebKeyword.waitForUrlContains(\"category=electronics\", 10);\nwebKeyword.verifyElementVisible(productGridObject);\n\n// Chờ chuyển hướng sau khi tìm kiếm\nwebKeyword.sendKeys(searchInputObject, \"laptop\");\nwebKeyword.click(searchButtonObject);\nwebKeyword.waitForUrlContains(\"search=laptop\", 10);\nwebKeyword.verifyElementVisible(searchResultsObject);\n\n// Chờ chuyển hướng sau khi đăng xuất\nwebKeyword.click(logoutButtonObject);\nwebKeyword.waitForUrlContains(\"/login\", 15);\nwebKeyword.verifyElementVisible(loginFormObject);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "URL của trang sẽ chứa chuỗi con đã chỉ định trong khoảng thời gian chờ" ],
  "exceptions" : [ "TimeoutException: Nếu URL không chứa chuỗi con đã chỉ định trong thời gian chờ", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "wait", "synchronization", "url", "navigation", "redirect", "address", "location", "timeout", "browser" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "waitForUrlContains",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "partialUrl",
    "description" : "Chuỗi con mà URL cần chứa."
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa (tính bằng giây)."
  } ]
}, {
  "name" : "assertElementVisible",
  "description" : "Khẳng định rằng một phần tử đang được hiển thị trên màn hình và người dùng có thể nhìn thấy. Khác với assertElementPresent, phương thức này kiểm tra cả sự tồn tại và tính hiển thị của phần tử. Nếu phần tử không tồn tại hoặc không hiển thị, một AssertionError sẽ được ném ra.",
  "category" : "Mobile/Assertion",
  "example" : "// Kiểm tra rằng thông báo thành công hiển thị sau khi đăng ký\nmobileKeyword.assertElementVisible(successMessage);\n\n// Xác minh rằng biểu tượng giỏ hàng hiển thị sau khi thêm sản phẩm\nmobileKeyword.assertElementVisible(cartIcon);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Đã xác định chính xác phần tử UI cần kiểm tra" ],
  "exceptions" : [ "AssertionError: Nếu phần tử không tồn tại hoặc không hiển thị", "WebDriverException: Nếu có lỗi khi tương tác với trình điều khiển", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM" ],
  "platform" : "MOBILE",
  "systemImpact" : "READ_ONLY",
  "stability" : "STABLE",
  "tags" : [ "mobile", "assertion", "element", "visibility", "verification" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertElementVisible",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra tính hiển thị."
  } ]
}, {
  "name" : "sendKeysToAlert",
  "description" : "Chờ cho đến khi một hộp thoại prompt của trình duyệt xuất hiện và nhập một chuỗi văn bản vào đó.",
  "category" : "Web/Alert",
  "example" : "// Nhập tên người dùng vào hộp thoại prompt\nwebKeyword.click(loginButtonObject);\nwebKeyword.sendKeysToAlert(\"Nguyễn Văn A\");\nwebKeyword.acceptAlert();\n\n// Nhập lý do hủy đơn hàng\nwebKeyword.click(cancelOrderButtonObject);\nwebKeyword.sendKeysToAlert(\"Thay đổi thông tin giao hàng\");\nwebKeyword.acceptAlert();",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Một hộp thoại prompt đang hiển thị hoặc sẽ xuất hiện" ],
  "exceptions" : [ "TimeoutException: Nếu không có hộp thoại alert xuất hiện trong thời gian chờ", "NoAlertPresentException: Nếu không có hộp thoại alert đang hiển thị", "ElementNotInteractableException: Nếu hộp thoại không phải là prompt và không cho phép nhập liệu", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "WRITE",
  "stability" : "STABLE",
  "tags" : [ "web", "alert", "prompt", "dialog", "input", "text", "javascript", "interaction", "sendkeys" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "sendKeysToAlert",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "text",
    "description" : "Chuỗi văn bản cần nhập vào hộp thoại."
  } ]
}, {
  "name" : "verifyTitleHard",
  "description" : "Kiểm tra tiêu đề (title) của trang web hiện tại. Nếu tiêu đề không khớp chính xác, kịch bản sẽ DỪNG LẠI.",
  "category" : "Web/Assert",
  "example" : "// Kiểm tra tiêu đề trang chủ\nwebKeyword.navigateToUrl(\"https://example.com\");\nwebKeyword.waitForPageLoaded(10);\nwebKeyword.verifyTitleHard(\"Trang chủ - Website ABC\");\n\n// Kiểm tra tiêu đề sau khi đăng nhập\nwebKeyword.sendKeys(usernameInputObject, \"testuser\");\nwebKeyword.sendKeys(passwordInputObject, \"password123\");\nwebKeyword.click(loginButtonObject);\nwebKeyword.waitForPageLoaded(15);\nwebKeyword.verifyTitleHard(\"Dashboard - Website ABC\");\n\n// Kiểm tra tiêu đề trang sản phẩm\nwebKeyword.click(productLinkObject);\nwebKeyword.waitForPageLoaded(10);\nwebKeyword.verifyTitleHard(\"Điện thoại XYZ - Chi tiết sản phẩm\");\n\n// Kiểm tra tiêu đề trang kết quả tìm kiếm\nwebKeyword.sendKeys(searchInputObject, \"laptop\");\nwebKeyword.click(searchButtonObject);\nwebKeyword.waitForPageLoaded(15);\nwebKeyword.verifyTitleHard(\"Kết quả tìm kiếm cho: laptop\");\n\n// Kiểm tra tiêu đề trang sau khi chuyển ngôn ngữ\nwebKeyword.click(languageSelectorObject);\nwebKeyword.click(englishOptionObject);\nwebKeyword.waitForPageLoaded(10);\nwebKeyword.verifyTitleHard(\"Home - Website ABC\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Trang web đã hoàn thành quá trình tải" ],
  "exceptions" : [ "AssertionError: Nếu tiêu đề trang không khớp với tiêu đề mong đợi", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "assert", "verify", "hard", "title", "page", "header", "browser", "validation", "metadata" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyTitleHard",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "expectedTitle",
    "description" : "Tiêu đề trang mong đợi."
  } ]
}, {
  "name" : "scrollToText",
  "description" : "Tự động cuộn màn hình (vuốt lên) cho đến khi tìm thấy một phần tử chứa văn bản mong muốn. Phương thức này sẽ thực hiện tối đa 10 lần vuốt lên để tìm kiếm. Cách hoạt động khác nhau giữa Android (sử dụng UiScrollable) và iOS (sử dụng vuốt tuần tự). Trả về WebElement nếu tìm thấy, hoặc ném NoSuchElementException nếu không tìm thấy sau khi đã cuộn hết.",
  "category" : "Mobile/Gesture",
  "example" : "// Cuộn đến khi thấy nút \"Đăng ký\" và chạm vào nó\nWebElement registerButton = mobileKeyword.scrollToText(\"Đăng ký\");\nregisterButton.click();\n\n// Cuộn đến phần \"Điều khoản sử dụng\" trong một trang dài\nmobileKeyword.scrollToText(\"Điều khoản sử dụng\");\n\n// Tìm và tương tác với một mục trong danh sách dài\nWebElement productItem = mobileKeyword.scrollToText(\"iPhone 14 Pro\");\nmobileKeyword.tap(new ObjectUI(\"Sản phẩm\", productItem));",
  "returnValue" : "WebElement: Phần tử chứa văn bản được tìm thấy",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Văn bản cần tìm phải tồn tại trên màn hình (có thể cần cuộn để hiển thị)", "Trên Android: Phần tử cha chứa nội dung cần cuộn phải có thuộc tính scrollable=true" ],
  "exceptions" : [ "NoSuchElementException: Nếu không tìm thấy phần tử chứa văn bản sau khi cuộn hết", "WebDriverException: Nếu có lỗi khi tương tác với trình điều khiển", "IllegalStateException: Nếu không thể xác định nền tảng hoặc không hỗ trợ" ],
  "platform" : "MOBILE",
  "systemImpact" : "MODIFY",
  "stability" : "STABLE",
  "tags" : [ "mobile", "gesture", "scroll", "text", "search", "find", "automation" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "scrollToText",
  "returnType" : "WebElement",
  "parameters" : [ {
    "type" : "String",
    "name" : "textToFind",
    "description" : "Văn bản cần tìm kiếm trên màn hình. Có thể là toàn bộ hoặc một phần của văn bản hiển thị."
  } ]
}, {
  "name" : "switchToParentFrame",
  "description" : "Thoát khỏi ngữ cảnh iframe hiện tại và quay về iframe cha ngay trước nó. Nếu đang ở iframe cấp cao nhất, hành động này sẽ quay về nội dung chính của trang.",
  "category" : "Web/Window&Frame",
  "example" : "// Thoát khỏi iframe con và quay về iframe cha\nwebKeyword.switchToFrame(mainIframeObject);\nwebKeyword.switchToFrame(nestedIframeObject);\nwebKeyword.click(submitButtonObject);\nwebKeyword.switchToParentFrame(); // Quay về iframe cha\nwebKeyword.click(nextButtonObject);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "WebDriver đang ở trong ngữ cảnh của một iframe" ],
  "exceptions" : [ "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "NAVIGATION",
  "stability" : "STABLE",
  "tags" : [ "web", "iframe", "frame", "navigation", "switch", "context", "parent", "nested" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "switchToParentFrame",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "dragAndDrop",
  "description" : "Kéo một phần tử từ vị trí nguồn và thả vào vị trí của phần tử đích. Hữu ích cho các thao tác như sắp xếp lại danh sách, di chuyển các phần tử trong giao diện, hoặc kéo thả vào vùng đích. Phương thức sẽ tự động tính toán tọa độ trung tâm của cả hai phần tử để thực hiện thao tác chính xác.",
  "category" : "Mobile/Gesture",
  "example" : "// Kéo một mục từ danh sách và thả vào thùng rác\nmobileKeyword.dragAndDrop(listItem, trashBin);\n\n// Sắp xếp lại thứ tự các mục trong danh sách bằng cách kéo mục đầu tiên xuống vị trí thứ ba\nmobileKeyword.dragAndDrop(firstItem, thirdItem);\n\n// Kéo một hình ảnh vào album\nmobileKeyword.dragAndDrop(photoObject, albumObject);\n\n// Kéo thả để điều chỉnh thanh trượt\nmobileKeyword.dragAndDrop(sliderHandle, sliderTarget);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Cả phần tử nguồn và đích phải hiển thị trên màn hình", "Ứng dụng phải hỗ trợ thao tác kéo thả cho các phần tử này" ],
  "exceptions" : [ "NoSuchElementException: Nếu không tìm thấy phần tử nguồn hoặc đích", "WebDriverException: Nếu có lỗi khi thực hiện thao tác kéo thả", "ElementNotInteractableException: Nếu không thể tương tác với phần tử nguồn hoặc đích" ],
  "platform" : "MOBILE",
  "systemImpact" : "MODIFY",
  "stability" : "STABLE",
  "tags" : [ "mobile", "gesture", "drag", "drop", "touch", "interaction", "move" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "dragAndDrop",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "source",
    "description" : "Phần tử nguồn cần kéo."
  }, {
    "type" : "ObjectUI",
    "name" : "destination",
    "description" : "Phần tử đích để thả vào."
  } ]
}, {
  "name" : "assertTextEquals",
  "description" : "Khẳng định rằng văn bản của một phần tử khớp chính xác với chuỗi mong đợi. Phương thức này trích xuất nội dung văn bản của phần tử và so sánh với giá trị mong đợi, ném AssertionError nếu không khớp. Hữu ích để kiểm tra nội dung văn bản, nhãn, thông báo lỗi hoặc các phần tử hiển thị khác.",
  "category" : "Mobile/Assertion",
  "example" : "// Kiểm tra tiêu đề màn hình\nmobileKeyword.assertTextEquals(title, \"Đăng nhập\");\n\n// Xác minh thông báo lỗi\nmobileKeyword.sendText(emailInput, \"invalid\");\nmobileKeyword.tap(submitButton);\nmobileKeyword.assertTextEquals(errorMessage, \"Email không hợp lệ\");\n\n// Kiểm tra giá trị hiển thị sau khi tính toán\nmobileKeyword.sendText(amountInput, \"100\");\nmobileKeyword.tap(calculateButton);\nmobileKeyword.assertTextEquals(resultLabel, \"Tổng: 110.00\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Phần tử UI cần kiểm tra phải hiển thị và chứa văn bản" ],
  "exceptions" : [ "AssertionError: Nếu văn bản của phần tử không khớp với giá trị mong đợi", "NoSuchElementException: Nếu không tìm thấy phần tử", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM" ],
  "platform" : "MOBILE",
  "systemImpact" : "READ_ONLY",
  "stability" : "STABLE",
  "tags" : [ "mobile", "assertion", "text", "content", "verification" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertTextEquals",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra văn bản."
  }, {
    "type" : "String",
    "name" : "expectedText",
    "description" : "Chuỗi văn bản mong đợi để so sánh."
  } ]
}, {
  "name" : "getClipboard",
  "description" : "Lấy và trả về nội dung văn bản hiện tại của clipboard trên thiết bị. Hữu ích khi cần kiểm tra nội dung đã được sao chép hoặc khi cần lấy dữ liệu từ clipboard để sử dụng trong các bước test tiếp theo. Phương thức này trả về một chuỗi chứa nội dung văn bản của clipboard. Lưu ý: Chỉ hỗ trợ nội dung văn bản, không hỗ trợ các loại dữ liệu khác như hình ảnh.",
  "category" : "Mobile/System",
  "example" : "// Kiểm tra nội dung đã được sao chép đúng\nmobileKeyword.longPress(emailText, 2); // Chọn văn bản\nmobileKeyword.tap(copyOption); // Chọn 'Sao chép' từ menu ngữ cảnh\nString copiedText = mobileKeyword.getClipboard();\nassert copiedText.equals(\"user@example.com\") : \"Email was not copied correctly\";\n\n// Sao chép mã xác minh và sử dụng nó\nmobileKeyword.longPress(verificationCode, 1);\nmobileKeyword.tap(copyButton);\nString code = mobileKeyword.getClipboard();\nmobileKeyword.sendText(codeInput, code);\n\n// Kiểm tra chức năng 'Sao chép liên kết'\nmobileKeyword.tap(copyLinkButton);\nString link = mobileKeyword.getClipboard();\nassert link.startsWith(\"https://\") : \"Invalid link format\";\n\n// Sao chép số điện thoại và xác minh định dạng\nmobileKeyword.tap(copyPhoneButton);\nString phone = mobileKeyword.getClipboard();\nassert phone.matches(\"\\\\d{10,}\") : \"Không phải định dạng số điện thoại hợp lệ\";",
  "returnValue" : "String: Nội dung văn bản hiện có trong clipboard của thiết bị",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Ứng dụng phải có quyền truy cập clipboard", "Clipboard phải chứa nội dung văn bản (không phải hình ảnh hoặc dữ liệu nhị phân)" ],
  "exceptions" : [ "WebDriverException: Nếu có lỗi khi tương tác với trình điều khiển", "UnsupportedOperationException: Nếu thiết bị không hỗ trợ truy cập clipboard", "SecurityException: Nếu không có quyền truy cập clipboard" ],
  "platform" : "MOBILE",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "mobile", "system", "clipboard", "copy", "paste", "text", "verification", "data" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "getClipboard",
  "returnType" : "String",
  "parameters" : [ ]
}, {
  "name" : "verifyDataSQL",
  "description" : "Thực thi câu lệnh SQL và kiểm chứng kết quả với dữ liệu mong đợi. Phương thức này so sánh từng cột trong từng hàng của kết quả với dữ liệu mong đợi được cung cấp.",
  "category" : "DB/Verification",
  "example" : "// Kiểm tra dữ liệu người dùng\nString[] columns = {\"username\", \"email\", \"status\"};\nObject[][] expectedData = {\n    {\"john.doe\", \"john.doe@example.com\", \"active\"},\n    {\"jane.smith\", \"jane.smith@example.com\", \"inactive\"}\n};\n\ndatabaseKeyword.verifyDataSQL(\n    \"mysql_dev\",\n    \"SELECT username, email, status FROM users WHERE department = ? ORDER BY username\",\n    columns,\n    expectedData,\n    \"IT\"\n);",
  "returnValue" : "void: Không trả về giá trị, nhưng sẽ ném AssertionError nếu kiểm chứng thất bại",
  "prerequisites" : [ "Đã khởi tạo kết nối CSDL với profileName tương ứng" ],
  "exceptions" : [ "SQLException: Nếu có lỗi khi thực thi câu truy vấn", "AssertionError: Nếu kết quả kiểm chứng không khớp với dữ liệu mong đợi", "IllegalArgumentException: Nếu cấu trúc dữ liệu mong đợi không hợp lệ" ],
  "platform" : "ALL",
  "systemImpact" : "READ_ONLY",
  "stability" : "STABLE",
  "tags" : [ "database", "verification", "assertion", "data-comparison" ],
  "className" : "com.vtnet.netat.db.keywords.DatabaseKeyword",
  "methodName" : "verifyDataSQL",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "profileName",
    "description" : "Tên của profile kết nối CSDL đã được khởi tạo trước đó."
  }, {
    "type" : "String",
    "name" : "query",
    "description" : "Câu lệnh SQL SELECT cần thực thi để lấy dữ liệu cần kiểm chứng."
  }, {
    "type" : "String[]",
    "name" : "expectedColumnNames",
    "description" : "Mảng các tên cột cần kiểm chứng."
  }, {
    "type" : "Object[][]",
    "name" : "expectedData",
    "description" : "Mảng 2 chiều chứa dữ liệu mong đợi, mỗi hàng tương ứng với một bản ghi và các cột tương ứng với expectedColumnNames."
  }, {
    "type" : "Object[]",
    "name" : "queryParams",
    "description" : "Các tham số cần truyền vào câu truy vấn, theo thứ tự xuất hiện của các placeholder '?'."
  } ]
}, {
  "name" : "assertElementSelected",
  "description" : "Khẳng định rằng một phần tử (checkbox hoặc radio button) đang ở trạng thái được chọn. Nếu không, kịch bản sẽ DỪNG LẠI.",
  "category" : "Web/Assert",
  "example" : "// Kiểm tra checkbox \"Ghi nhớ đăng nhập\" đã được chọn\nwebKeyword.click(rememberMeCheckbox);\nwebKeyword.assertElementSelected(rememberMeCheckbox);\nwebKeyword.click(loginButtonObject);\n\n// Kiểm tra radio button phương thức thanh toán đã được chọn\nwebKeyword.click(creditCardRadioButton);\nwebKeyword.assertElementSelected(creditCardRadioButton);\nwebKeyword.sendKeys(cardNumberInputObject, \"1234567890123456\");\n\n// Kiểm tra checkbox điều khoản đã được chọn trước khi tiếp tục\nwebKeyword.click(termsCheckboxObject);\nwebKeyword.assertElementSelected(termsCheckboxObject);\nwebKeyword.click(continueButtonObject);\n\n// Kiểm tra tùy chọn mặc định đã được chọn\nwebKeyword.assertElementSelected(defaultShippingOptionRadio);\nwebKeyword.click(nextStepButtonObject);\n\n// Kiểm tra checkbox thông báo đã được chọn sau khi đăng ký\nwebKeyword.click(newsletterCheckboxObject);\nwebKeyword.assertElementSelected(newsletterCheckboxObject);\nwebKeyword.click(completeRegistrationButton);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần kiểm tra phải tồn tại trong DOM và là checkbox hoặc radio button" ],
  "exceptions" : [ "AssertionError: Nếu phần tử không ở trạng thái được chọn", "NoSuchElementException: Nếu không tìm thấy phần tử", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt", "IllegalArgumentException: Nếu phần tử không phải là checkbox hoặc radio button" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "assert", "verify", "hard", "selected", "checked", "checkbox", "radio", "state", "input" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "assertElementSelected",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử checkbox hoặc radio button cần kiểm tra."
  } ]
}, {
  "name" : "selectByValue",
  "description" : "Chọn một tùy chọn trong dropdown dựa trên giá trị của thuộc tính 'value'.",
  "category" : "Web/Interaction",
  "example" : "// Chọn thành phố Hà Nội từ dropdown\nwebKeyword.selectByValue(cityDropdown, \"HN\");\nwebKeyword.verifyElementText(selectedCityLabel, \"Hà Nội\");\n\n// Chọn phương thức vận chuyển\nwebKeyword.selectByValue(shippingMethodDropdown, \"express\");\nwebKeyword.waitForElementText(deliveryTimeLabel, \"1-2 ngày\");\n\n// Chọn kích thước sản phẩm\nwebKeyword.selectByValue(sizeDropdown, \"XL\");\nwebKeyword.verifyElementAttribute(sizeDropdown, \"data-selected\", \"XL\");\n\n// Chọn quốc gia và kiểm tra thay đổi trong form\nwebKeyword.selectByValue(countryDropdown, \"VN\");\nwebKeyword.waitForElementVisible(vietnamProvinceDropdown);\nwebKeyword.verifyElementNotVisible(stateDropdown); // US states dropdown should be hidden\n\n// Xử lý trường hợp không tìm thấy giá trị\ntry {\n    webKeyword.selectByValue(categoryDropdown, \"non_existent_value\");\n} catch (NoSuchElementException e) {\n    System.out.println(\"Không tìm thấy tùy chọn với giá trị đã chỉ định\");\n    webKeyword.selectByValue(categoryDropdown, \"default\");\n}",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử dropdown phải tồn tại trong DOM", "Phần tử phải là thẻ <select> hợp lệ", "Phần tử phải hiển thị và có thể tương tác được", "Phải tồn tại ít nhất một tùy chọn có thuộc tính value khớp với giá trị cần chọn" ],
  "exceptions" : [ "NoSuchElementException: Nếu không tìm thấy tùy chọn với value chỉ định", "ElementNotVisibleException: Nếu phần tử không hiển thị trên trang", "ElementNotInteractableException: Nếu phần tử không thể tương tác", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "UnexpectedTagNameException: Nếu phần tử không phải là thẻ <select>", "TimeoutException: Nếu phần tử không xuất hiện trong thời gian chờ", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "WRITE",
  "stability" : "STABLE",
  "tags" : [ "web", "interaction", "select", "dropdown", "value", "form", "choose", "option", "combobox", "list" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "selectByValue",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử dropdown (thẻ select)."
  }, {
    "type" : "String",
    "name" : "value",
    "description" : "Giá trị thuộc tính 'value' của tùy chọn cần chọn."
  } ]
}, {
  "name" : "tapByCoordinates",
  "description" : "Thực hiện một hành động chạm (tap) tại một tọa độ (x, y) cụ thể trên màn hình. Hữu ích khi cần tương tác với các phần tử không thể định vị bằng các locator thông thường, hoặc khi cần chạm vào một vị trí tương đối trên màn hình. Tọa độ được tính theo pixel từ góc trên bên trái của màn hình (0,0). Lưu ý: Tọa độ có thể khác nhau trên các thiết bị có kích thước màn hình khác nhau.",
  "category" : "Mobile/Gesture",
  "example" : "// Chạm vào trung tâm màn hình\nDimension size = DriverManager.getDriver().manage().window().getSize();\nint centerX = size.width / 2;\nint centerY = size.height / 2;\nmobileKeyword.tapByCoordinates(centerX, centerY);\n\n// Chạm vào góc trên bên phải để đóng quảng cáo\nmobileKeyword.tapByCoordinates(size.width - 50, 50);\n\n// Chạm vào vị trí cụ thể trên bản đồ\nmobileKeyword.tapByCoordinates(540, 960);\n\n// Chạm vào vị trí tương đối (75% chiều rộng, 30% chiều cao)\nmobileKeyword.tapByCoordinates((int)(size.width * 0.75), (int)(size.height * 0.3));",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Tọa độ cần nằm trong phạm vi kích thước màn hình của thiết bị" ],
  "exceptions" : [ "WebDriverException: Nếu có lỗi khi thực hiện hành động chạm", "IllegalArgumentException: Nếu tọa độ nằm ngoài kích thước màn hình" ],
  "platform" : "MOBILE",
  "systemImpact" : "MODIFY",
  "stability" : "STABLE",
  "tags" : [ "mobile", "gesture", "tap", "touch", "coordinate", "position", "click" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "tapByCoordinates",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "int",
    "name" : "x",
    "description" : "Tọa độ theo trục ngang (pixel)."
  }, {
    "type" : "int",
    "name" : "y",
    "description" : "Tọa độ theo trục dọc (pixel)."
  } ]
}, {
  "name" : "scrollToElement",
  "description" : "Cuộn trang đến khi phần tử được chỉ định nằm trong vùng có thể nhìn thấy của trình duyệt. Rất cần thiết khi cần tương tác với các phần tử ở cuối trang.",
  "category" : "Web/Interaction",
  "example" : "// Cuộn đến phần chân trang\nwebKeyword.scrollToElement(footerSectionObject);\nwebKeyword.click(privacyPolicyLinkObject);\n\n// Cuộn đến nút gửi ở cuối form\nwebKeyword.scrollToElement(submitButtonObject);\nwebKeyword.click(submitButtonObject);\n\n// Cuộn đến phần tử không hiển thị trong viewport\nwebKeyword.scrollToElement(hiddenSectionObject);\nwebKeyword.verifyElementVisible(hiddenSectionObject);\n\n// Cuộn đến phần tử và chờ cho hiệu ứng lazy-load hoạt động\nwebKeyword.scrollToElement(lazyLoadSectionObject);\nwebKeyword.waitForElementVisible(lazyLoadedImagesObject);\n\n// Cuộn đến phần tử và kiểm tra hiệu ứng animation\nwebKeyword.scrollToElement(animatedSectionObject);\nwebKeyword.waitForElementAttributeChange(animatedSectionObject, \"class\", \"section animated visible\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần cuộn đến phải tồn tại trong DOM", "Trình duyệt phải hỗ trợ thực thi JavaScript" ],
  "exceptions" : [ "NoSuchElementException: Nếu phần tử không tồn tại", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "JavascriptException: Nếu có lỗi khi thực thi JavaScript", "TimeoutException: Nếu phần tử không xuất hiện trong thời gian chờ", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "interaction", "scroll", "view", "visibility", "element", "viewport", "page", "position", "javascript" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "scrollToElement",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử đích cần cuộn đến."
  } ]
}, {
  "name" : "isElementPresent",
  "description" : "Kiểm tra xem một phần tử có tồn tại trên màn hình hay không trong một khoảng thời gian chờ nhất định. Khác với các phương thức assertion, phương thức này trả về kết quả boolean (true/false) thay vì ném ra ngoại lệ, giúp xử lý các trường hợp phần tử có thể xuất hiện hoặc không. Hữu ích cho các điều kiện rẽ nhánh trong kịch bản test.",
  "category" : "Mobile/Assert",
  "example" : "// Kiểm tra xem thông báo lỗi có xuất hiện không và xử lý tương ứng\nboolean isErrorVisible = mobileKeyword.isElementPresent(errorMessage, 5);\nif (isErrorVisible) {\n    // Xử lý lỗi\n    mobileKeyword.tap(dismissButton);\n} else {\n    // Tiếp tục luồng bình thường\n    mobileKeyword.tap(nextButton);\n}\n\n// Kiểm tra xem hướng dẫn có xuất hiện không (cho người dùng mới)\nif (mobileKeyword.isElementPresent(tutorialScreen, 3)) {\n    // Bỏ qua hướng dẫn\n    mobileKeyword.tap(skipButton);\n}\n\n// Kiểm tra điều kiện trước khi thực hiện hành động\nif (mobileKeyword.isElementPresent(saveButton, 2)) {\n    // Có thay đổi cần lưu\n    mobileKeyword.tap(saveButton);\n} else {\n    logger.info(\"Không có thay đổi cần lưu\");\n}\n\n// Xử lý các popup có thể xuất hiện hoặc không\nif (mobileKeyword.isElementPresent(rateAppPopup, 3)) {\n    mobileKeyword.tap(remindMeLaterButton);\n}\n\n// Kiểm tra trạng thái đăng nhập\nboolean isLoggedIn = mobileKeyword.isElementPresent(userProfileIcon, 2);\nif (!isLoggedIn) {\n    // Thực hiện đăng nhập\n    performLogin();\n}",
  "returnValue" : "boolean: true nếu phần tử tồn tại, false nếu không tìm thấy sau thời gian chờ",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Locator của phần tử cần kiểm tra phải hợp lệ" ],
  "exceptions" : [ "WebDriverException: Nếu có lỗi khi tương tác với trình điều khiển" ],
  "platform" : "MOBILE",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "mobile", "verification", "presence", "condition", "branching", "boolean", "check", "exist" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "isElementPresent",
  "returnType" : "boolean",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần tìm kiếm."
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa (tính bằng giây)."
  } ]
}, {
  "name" : "verifyCssValueHard",
  "description" : "So sánh giá trị của một thuộc tính CSS trên phần tử. Nếu không khớp, kịch bản sẽ DỪNG LẠI.",
  "category" : "Web/Assert",
  "example" : "// Kiểm tra màu của thông báo lỗi\nwebKeyword.click(submitButtonObject); // Gửi form không hợp lệ\nwebKeyword.waitForElementVisible(errorMessageObject);\nwebKeyword.verifyCssValueHard(errorMessageObject, \"color\", \"rgba(255, 0, 0, 1)\");\n\n// Kiểm tra font-size của tiêu đề\nwebKeyword.verifyCssValueHard(pageTitleObject, \"font-size\", \"24px\");\n\n// Kiểm tra background-color của nút đã chọn\nwebKeyword.click(selectButtonObject);\nwebKeyword.verifyCssValueHard(selectButtonObject, \"background-color\", \"rgba(0, 123, 255, 1)\");\n\n// Kiểm tra border của trường nhập liệu không hợp lệ\nwebKeyword.sendKeys(emailInputObject, \"invalid-email\");\nwebKeyword.click(outsideFormObject); // Click ra ngoài để kích hoạt validation\nwebKeyword.verifyCssValueHard(emailInputObject, \"border-color\", \"rgba(220, 53, 69, 1)\");\n\n// Kiểm tra display của phần tử sau khi hiển thị\nwebKeyword.click(showDetailsButtonObject);\nwebKeyword.verifyCssValueHard(detailsContainerObject, \"display\", \"block\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần kiểm tra phải tồn tại trong DOM" ],
  "exceptions" : [ "AssertionError: Nếu giá trị CSS không khớp với giá trị mong đợi", "NoSuchElementException: Nếu không tìm thấy phần tử", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "assert", "verify", "hard", "css", "style", "property", "visual", "appearance", "validation" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyCssValueHard",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra."
  }, {
    "type" : "String",
    "name" : "cssName",
    "description" : "Tên thuộc tính CSS (ví dụ: 'color')."
  }, {
    "type" : "String",
    "name" : "expectedValue",
    "description" : "Giá trị CSS mong đợi (ví dụ: 'rgb(255, 0, 0)')."
  } ]
}, {
  "name" : "refresh",
  "description" : "Tải lại (làm mới) trang web hiện tại đang hiển thị trên trình duyệt. Tương đương với việc người dùng nhấn phím F5 hoặc nút 'Reload'.",
  "category" : "Web/Browser",
  "example" : "// Làm mới trang hiện tại\nwebKeyword.refresh();\n\n// Làm mới trang sau khi gửi biểu mẫu\nwebKeyword.click(submitButton);\nwebKeyword.waitForElementNotVisible(loadingIndicator);\nwebKeyword.refresh();\nwebKeyword.waitForPageLoaded();\n\n// Làm mới để xóa dữ liệu biểu mẫu\nwebKeyword.sendText(usernameField, \"invalid_user\");\nwebKeyword.sendText(passwordField, \"wrong_password\");\nwebKeyword.refresh(); // Xóa dữ liệu đã nhập\n\n// Làm mới để cập nhật dữ liệu\nwebKeyword.click(updateDataButton);\nwebKeyword.waitForElementVisible(successMessage);\nwebKeyword.refresh();\nwebKeyword.verifyElementText(lastUpdatedTime, expectedTime);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Đã tải một trang web trước đó" ],
  "exceptions" : [ "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt", "NoSuchSessionException: Nếu phiên WebDriver không còn hợp lệ", "TimeoutException: Nếu trang không tải lại trong thời gian chờ mặc định" ],
  "platform" : "WEB",
  "systemImpact" : "WRITE",
  "stability" : "STABLE",
  "tags" : [ "web", "browser", "reload", "refresh", "update", "reset", "F5" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "refresh",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "disconnectAllDatabases",
  "description" : "Đóng tất cả các connection pool đang hoạt động và giải phóng tài nguyên. Nên gọi phương thức này ở cuối mỗi test case hoặc test suite để đảm bảo tất cả kết nối được đóng đúng cách.",
  "category" : "DB/Connection",
  "example" : "// Đóng tất cả kết nối CSDL sau khi hoàn thành test\ndatabaseKeyword.disconnectAllDatabases();",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "Đã khởi tạo ít nhất một kết nối CSDL trước đó" ],
  "exceptions" : [ "SQLException: Nếu có lỗi khi đóng kết nối" ],
  "platform" : "ALL",
  "systemImpact" : "MODIFY",
  "stability" : "STABLE",
  "tags" : [ "database", "connection", "cleanup" ],
  "className" : "com.vtnet.netat.db.keywords.DatabaseKeyword",
  "methodName" : "disconnectAllDatabases",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "getElementCount",
  "description" : "Đếm và trả về số lượng phần tử trên trang khớp với locator được cung cấp. Hữu ích để kiểm tra số lượng kết quả tìm kiếm, số hàng trong bảng,...",
  "category" : "Web/Getter",
  "example" : "// Đếm số lượng sản phẩm trong danh sách\nint numberOfProducts = webKeyword.getElementCount(productListItemObject);\nwebKeyword.verifyEqual(numberOfProducts, 10);\n\n// Kiểm tra số lượng kết quả tìm kiếm\nwebKeyword.sendKeys(searchInputObject, \"smartphone\");\nwebKeyword.click(searchButtonObject);\nwebKeyword.waitForElementVisible(searchResultsObject);\nint resultCount = webKeyword.getElementCount(searchResultItemObject);\nSystem.out.println(\"Tìm thấy \" + resultCount + \" kết quả\");\n\n// Đếm số hàng trong bảng\nint rowCount = webKeyword.getElementCount(tableRowObject);\nwebKeyword.verifyGreaterThan(rowCount, 0, \"Bảng không có dữ liệu\");\n\n// Kiểm tra số lượng lỗi hiển thị trong form\nwebKeyword.click(submitButtonObject); // Gửi form trống\nint errorCount = webKeyword.getElementCount(errorMessageObject);\nwebKeyword.verifyEqual(errorCount, 3, \"Số lượng thông báo lỗi không đúng\");\n\n// Kiểm tra phân trang\nwebKeyword.click(loadMoreButtonObject);\nwebKeyword.waitForElementVisible(loadingIndicatorObject);\nwebKeyword.waitForElementInvisible(loadingIndicatorObject);\nint newItemCount = webKeyword.getElementCount(listItemObject);\nwebKeyword.verifyEqual(newItemCount, 20, \"Không tải thêm được 10 mục mới\");",
  "returnValue" : "int: Số lượng phần tử tìm thấy",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Locator của đối tượng giao diện phải hợp lệ" ],
  "exceptions" : [ "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt", "NoSuchSessionException: Nếu phiên WebDriver không còn hợp lệ", "InvalidSelectorException: Nếu locator không hợp lệ" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "getter", "count", "elements", "size", "quantity", "read", "extract", "information", "list" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "getElementCount",
  "returnType" : "int",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng giao diện đại diện cho các phần tử cần đếm."
  } ]
}, {
  "name" : "waitForElementClickable",
  "description" : "Tạm dừng kịch bản cho đến khi một phần tử không chỉ hiển thị mà còn ở trạng thái sẵn sàng để được click (enabled).",
  "category" : "Web/Wait",
  "example" : "// Chờ nút gửi sẵn sàng để click sau khi điền form\nwebKeyword.sendKeys(emailInputObject, \"test@example.com\");\nwebKeyword.sendKeys(passwordInputObject, \"password123\");\nwebKeyword.waitForElementClickable(submitButtonObject);\nwebKeyword.click(submitButtonObject);\n\n// Chờ nút sẵn sàng sau khi tải dữ liệu\nwebKeyword.click(loadDataButtonObject);\nwebKeyword.waitForElementNotVisible(loadingIndicatorObject);\nwebKeyword.waitForElementClickable(saveButtonObject);\nwebKeyword.click(saveButtonObject);\n\n// Chờ nút được kích hoạt sau khi chọn một tùy chọn\nwebKeyword.click(termsCheckboxObject);\nwebKeyword.waitForElementClickable(continueButtonObject);\nwebKeyword.verifyElementEnabled(continueButtonObject);\nwebKeyword.click(continueButtonObject);\n\n// Chờ tab trở nên có thể click sau khi tải xong\nwebKeyword.navigateToUrl(\"https://example.com/dashboard\");\nwebKeyword.waitForPageLoaded(10);\nwebKeyword.waitForElementClickable(reportsTabObject);\nwebKeyword.click(reportsTabObject);\n\n// Chờ nút trở nên có thể click sau khi xác thực\nwebKeyword.sendKeys(otpInputObject, \"123456\");\nwebKeyword.waitForElementClickable(verifyButtonObject);\nwebKeyword.click(verifyButtonObject);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần chờ phải tồn tại trong DOM", "Phần tử sẽ trở thành hiển thị và có thể click trong khoảng thời gian chờ" ],
  "exceptions" : [ "TimeoutException: Nếu phần tử không trở nên có thể click trong thời gian chờ mặc định", "NoSuchElementException: Nếu không tìm thấy phần tử", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "wait", "synchronization", "clickable", "enabled", "interaction", "ready", "element", "condition", "timeout" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "waitForElementClickable",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần chờ để sẵn sàng click."
  } ]
}, {
  "name" : "assertElementCount",
  "description" : "Khẳng định rằng số lượng phần tử tìm thấy khớp với một con số mong đợi. Hữu ích khi cần kiểm tra số lượng các mục trong danh sách, số lượng tùy chọn, hoặc xác minh rằng một nhóm phần tử có số lượng chính xác. Phương thức này tìm tất cả các phần tử khớp với locator và so sánh số lượng với giá trị mong đợi.",
  "category" : "Mobile/Assertion",
  "example" : "// Kiểm tra số lượng sản phẩm trong giỏ hàng\nmobileKeyword.assertElementCount(cartItems, 3);\n\n// Xác minh số lượng tùy chọn trong menu\nmobileKeyword.assertElementCount(menuOptions, 5);\n\n// Kiểm tra số lượng hình ảnh trong thư viện\nmobileKeyword.assertElementCount(galleryImages, 10);\n\n// Xác minh số lượng thông báo chưa đọc\nmobileKeyword.assertElementCount(unreadNotifications, 2);\n\n// Kiểm tra danh sách rỗng\nmobileKeyword.tap(clearAllButton);\nmobileKeyword.assertElementCount(listItems, 0);\n\n// Kiểm tra số lượng kết quả tìm kiếm\nmobileKeyword.sendText(searchInput, \"điện thoại\");\nmobileKeyword.tap(searchButton);\nmobileKeyword.assertElementCount(searchResults, 15);\n\n// Kiểm tra số lượng tab trong thanh điều hướng\nmobileKeyword.assertElementCount(navigationTabs, 4);",
  "returnValue" : "void: Không trả về giá trị, ném AssertionError nếu kiểm tra thất bại",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Locator của phần tử phải hợp lệ và có thể tìm thấy nhiều phần tử", "Nếu mong đợi không tìm thấy phần tử nào (count = 0), locator vẫn phải hợp lệ" ],
  "exceptions" : [ "AssertionError: Nếu số lượng phần tử tìm thấy không khớp với số lượng mong đợi", "WebDriverException: Nếu có lỗi khi tương tác với trình điều khiển", "InvalidSelectorException: Nếu locator không hợp lệ" ],
  "platform" : "MOBILE",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "mobile", "assertion", "count", "collection", "list", "quantity", "elements", "multiple", "verification" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertElementCount",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Locator để tìm các phần tử."
  }, {
    "type" : "int",
    "name" : "expectedCount",
    "description" : "Số lượng phần tử mong đợi."
  } ]
}, {
  "name" : "assertAttributeContains",
  "description" : "Khẳng định rằng giá trị của một thuộc tính có chứa một chuỗi con. Khác với assertAttributeEquals, phương thức này chỉ kiểm tra sự xuất hiện của chuỗi con trong giá trị thuộc tính, không yêu cầu khớp hoàn toàn. Hữu ích khi giá trị thuộc tính có thể thay đổi nhưng vẫn chứa các phần quan trọng cần kiểm tra.",
  "category" : "Mobile/Assertion",
  "example" : "// Kiểm tra thuộc tính content-desc có chứa từ khóa\nmobileKeyword.assertAttributeContains(productItem, \"content-desc\", \"iPhone\");\n\n// Xác minh resource-id có chứa phần nhất định\nmobileKeyword.assertAttributeContains(anyElement, \"resource-id\", \"button_\");\n\n// Kiểm tra thuộc tính text có chứa thông tin quan trọng\nmobileKeyword.assertAttributeContains(orderSummary, \"text\", \"Tổng tiền\");\n\n// Kiểm tra thuộc tính class có chứa loại phần tử\nmobileKeyword.assertAttributeContains(inputField, \"class\", \"EditText\");\n\n// Kiểm tra thuộc tính package có chứa tên ứng dụng\nmobileKeyword.assertAttributeContains(anyElement, \"package\", \"com.example\");\n\n// Kiểm tra thuộc tính content-desc có chứa thông tin động\nString orderNumber = \"ORD-12345\";\nmobileKeyword.assertAttributeContains(orderDetails, \"content-desc\", orderNumber);\n\n// Kiểm tra thuộc tính text có chứa số tiền\nmobileKeyword.assertAttributeContains(totalAmount, \"text\", \"1,000,000\");",
  "returnValue" : "void: Không trả về giá trị, ném AssertionError nếu kiểm tra thất bại",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Phần tử cần kiểm tra phải tồn tại", "Thuộc tính cần kiểm tra phải tồn tại trên phần tử", "Cần biết chính xác tên thuộc tính theo nền tảng (Android/iOS có thể khác nhau)" ],
  "exceptions" : [ "AssertionError: Nếu giá trị thuộc tính không chứa chuỗi con mong đợi", "NoSuchElementException: Nếu không tìm thấy phần tử", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "WebDriverException: Nếu không thể lấy thuộc tính của phần tử", "NullPointerException: Nếu giá trị thuộc tính là null" ],
  "platform" : "MOBILE",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "mobile", "assertion", "attribute", "property", "substring", "contains", "partial match", "verification" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertAttributeContains",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra thuộc tính."
  }, {
    "type" : "String",
    "name" : "attributeName",
    "description" : "Tên thuộc tính cần kiểm tra."
  }, {
    "type" : "String",
    "name" : "partialValue",
    "description" : "Chuỗi con cần tìm trong giá trị thuộc tính."
  } ]
}, {
  "name" : "verifyDataByQueryFile",
  "description" : "Thực thi câu lệnh SQL từ file và kiểm chứng kết quả với dữ liệu từ file dữ liệu. Phương thức này tách biệt câu truy vấn và dữ liệu kiểm chứng vào các file riêng biệt, giúp quản lý test case dễ dàng hơn.",
  "category" : "DB/Verification",
  "example" : "// Kiểm tra dữ liệu người dùng sử dụng file\ndatabaseKeyword.verifyDataByQueryFile(\n    \"mysql_dev\",\n    \"sql/get_user_by_department.sql\",\n    \"testdata/user_verification_data.xlsx\"\n);\n\n// File SQL có thể chứa: SELECT username, email, status FROM users WHERE department = ?\n// File dữ liệu có thể chứa: {param_1: \"IT\", username: \"john.doe\", email: \"john.doe@example.com\", status: \"active\"}",
  "returnValue" : "void: Không trả về giá trị, nhưng sẽ ném AssertionError nếu kiểm chứng thất bại",
  "prerequisites" : [ "Đã khởi tạo kết nối CSDL với profileName tương ứng", "File SQL và file dữ liệu phải tồn tại và có định dạng hợp lệ" ],
  "exceptions" : [ "SQLException: Nếu có lỗi khi thực thi câu truy vấn", "AssertionError: Nếu kết quả kiểm chứng không khớp với dữ liệu mong đợi", "FileNotFoundException: Nếu không tìm thấy file SQL hoặc file dữ liệu", "IOException: Nếu có lỗi khi đọc file" ],
  "platform" : "ALL",
  "systemImpact" : "READ_ONLY",
  "stability" : "STABLE",
  "tags" : [ "database", "verification", "file-based", "data-driven" ],
  "className" : "com.vtnet.netat.db.keywords.DatabaseKeyword",
  "methodName" : "verifyDataByQueryFile",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "profileName",
    "description" : "Tên của profile kết nối CSDL đã được khởi tạo trước đó."
  }, {
    "type" : "String",
    "name" : "queryPath",
    "description" : "Đường dẫn đến file chứa câu lệnh SQL cần thực thi."
  }, {
    "type" : "String",
    "name" : "dataFilePath",
    "description" : "Đường dẫn đến file dữ liệu chứa các tham số truy vấn và dữ liệu mong đợi."
  } ]
}, {
  "name" : "startBrowser",
  "description" : "Khởi tạo và mở một phiên trình duyệt (web) hoặc thiết bị (mobile) mới dựa trên cấu hình trong file properties. Nếu không có tham số, nó sẽ sử dụng 'platform.name' mặc định.",
  "category" : "Session/Lifecycle",
  "example" : "// Khởi tạo trình duyệt mặc định\ndriverKeyword.startBrowser();",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "File cấu hình properties phải tồn tại và chứa các thiết lập cần thiết" ],
  "exceptions" : [ "WebDriverException: Nếu không thể khởi tạo driver", "ConfigurationException: Nếu thiếu thông tin cấu hình cần thiết" ],
  "platform" : "ALL",
  "systemImpact" : "MODIFY",
  "stability" : "STABLE",
  "tags" : [ "browser", "session", "initialization" ],
  "className" : "com.vtnet.netat.core.keywords.DriverKeyword",
  "methodName" : "startBrowser",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "waitForElementNotVisible",
  "description" : "Tạm dừng kịch bản cho đến khi một phần tử không còn hiển thị trên giao diện. Rất hữu ích để chờ các biểu tượng loading hoặc thông báo tạm thời biến mất.",
  "category" : "Web/Wait",
  "example" : "// Chờ biểu tượng loading biến mất sau khi gửi form\nwebKeyword.click(submitButtonObject);\nwebKeyword.waitForElementNotVisible(loadingSpinnerObject);\nwebKeyword.verifyElementVisible(successMessageObject);\n\n// Chờ thông báo tạm thời biến mất\nwebKeyword.click(saveButtonObject);\nwebKeyword.waitForElementVisible(toastMessageObject);\nwebKeyword.waitForElementNotVisible(toastMessageObject);\n\n// Chờ popup đóng sau khi nhấn nút đóng\nwebKeyword.click(openPopupButtonObject);\nwebKeyword.waitForElementVisible(popupObject);\nwebKeyword.click(closePopupButtonObject);\nwebKeyword.waitForElementNotVisible(popupObject);\n\n// Chờ overlay mờ biến mất sau khi tải dữ liệu\nwebKeyword.click(refreshButtonObject);\nwebKeyword.waitForElementVisible(overlayObject);\nwebKeyword.waitForElementNotVisible(overlayObject);\nwebKeyword.verifyElementVisible(dataTableObject);\n\n// Chờ thông báo lỗi biến mất sau khi sửa lỗi\nwebKeyword.click(submitButtonObject); // Gửi form không hợp lệ\nwebKeyword.waitForElementVisible(emailErrorObject);\nwebKeyword.sendKeys(emailInputObject, \"valid@example.com\");\nwebKeyword.waitForElementNotVisible(emailErrorObject);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần chờ phải tồn tại trong DOM hoặc đã hiển thị trước đó", "Phần tử sẽ trở thành không hiển thị trong khoảng thời gian chờ" ],
  "exceptions" : [ "TimeoutException: Nếu phần tử vẫn còn hiển thị sau thời gian chờ mặc định", "NoSuchElementException: Nếu không tìm thấy phần tử ban đầu", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "wait", "synchronization", "invisible", "hidden", "disappear", "element", "condition", "timeout", "loading" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "waitForElementNotVisible",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần chờ cho đến khi nó biến mất."
  } ]
}, {
  "name" : "swipeDown",
  "description" : "Thực hiện hành động vuốt xuống dưới màn hình, tương đương với thao tác cuộn lên để xem nội dung phía trên. Phương thức này tự động tính toán các tọa độ dựa trên kích thước màn hình thiết bị hiện tại.",
  "category" : "Mobile/Gesture",
  "example" : "// Vuốt xuống với tốc độ mặc định để làm mới trang\nmobileKeyword.swipeDown();\n\n// Vuốt xuống với tốc độ chậm hơn (800ms)\nmobileKeyword.swipeDown(800);\n\n// Cuộn lên đầu danh sách\nfor (int i = 0; i < 2; i++) {\n    mobileKeyword.swipeDown();\n}",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium" ],
  "exceptions" : [ "WebDriverException: Nếu không thể thực hiện hành động vuốt" ],
  "platform" : "MOBILE",
  "systemImpact" : "MODIFY",
  "stability" : "STABLE",
  "tags" : [ "mobile", "gesture", "swipe", "scroll", "down", "refresh" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "swipeDown",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "Integer[]",
    "name" : "durationInMs",
    "description" : "(Tùy chọn) Thời gian thực hiện vuốt (ms). Mặc định là 500ms nếu không được chỉ định."
  } ]
}, {
  "name" : "uploadFile",
  "description" : "Tải lên một file từ máy local bằng cách gửi đường dẫn file vào một phần tử <input type='file'>.",
  "category" : "Web/Interaction",
  "example" : "// Tải lên ảnh đại diện\nwebKeyword.uploadFile(avatarUploadInput, \"C:/Users/Tester/Pictures/avatar.jpg\");\nwebKeyword.waitForElementVisible(uploadSuccessMessage);\n\n// Tải lên tài liệu PDF\nwebKeyword.uploadFile(documentUploadInput, \"D:/Documents/report.pdf\");\nwebKeyword.waitForElementVisible(documentPreviewObject);\n\n// Tải lên nhiều file cùng lúc (nếu input hỗ trợ multiple)\nwebKeyword.uploadFile(multipleFilesInput, \"C:/Files/doc1.pdf\\nC:/Files/doc2.pdf\");\n\n// Tải lên file từ đường dẫn động\nString testDataPath = System.getProperty(\"user.dir\") + \"/src/test/resources/testdata/\";\nwebKeyword.uploadFile(fileUploadInput, testDataPath + \"sample.xlsx\");\n\n// Kiểm tra sau khi tải lên\nwebKeyword.uploadFile(csvUploadInput, \"D:/Data/users.csv\");\nwebKeyword.waitForElementVisible(fileNameLabel);\nwebKeyword.verifyElementText(fileNameLabel, \"users.csv\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử input phải có thuộc tính type='file'", "Phần tử input phải tồn tại trong DOM (có thể ẩn nhưng phải tồn tại)", "File cần tải lên phải tồn tại tại đường dẫn được chỉ định", "Người dùng thực thi test phải có quyền truy cập vào file", "Đường dẫn file phải là đường dẫn tuyệt đối" ],
  "exceptions" : [ "InvalidArgumentException: Nếu đường dẫn file không hợp lệ hoặc file không tồn tại", "ElementNotInteractableException: Nếu phần tử không phải là input type='file'", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "TimeoutException: Nếu phần tử không xuất hiện trong thời gian chờ", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "WRITE",
  "stability" : "STABLE",
  "tags" : [ "web", "interaction", "upload", "file", "input", "form", "attachment", "document", "image" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "uploadFile",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử input (type='file') để tải file lên."
  }, {
    "type" : "String",
    "name" : "filePath",
    "description" : "Đường dẫn tuyệt đối đến file cần tải lên trên máy."
  } ]
}, {
  "name" : "pushFile",
  "description" : "Đẩy một file từ máy tính vào một đường dẫn trên thiết bị di động. Hữu ích khi cần chuẩn bị dữ liệu hoặc tài nguyên cho test case. Lưu ý: Đường dẫn trên thiết bị phải là đường dẫn mà ứng dụng có quyền ghi. Trên Android, thường là trong /sdcard/. Trên iOS, cần sử dụng bundle path.",
  "category" : "Mobile/File",
  "example" : "// Đẩy một hình ảnh vào thư mục Downloads của thiết bị Android\nmobileKeyword.pushFile(\"/sdcard/Download/avatar.png\", \"C:/test-data/images/avatar.png\");\n\n// Đẩy một file JSON cấu hình vào thư mục Documents\nmobileKeyword.pushFile(\"/sdcard/Documents/config.json\", \"C:/test-data/config.json\");\n\n// Đẩy file CSV chứa dữ liệu test\nmobileKeyword.pushFile(\"/sdcard/TestData/users.csv\", \"src/test/resources/testdata/users.csv\");\n\n// Trên iOS, đẩy file vào bundle của ứng dụng\nmobileKeyword.pushFile(\"@com.example.myapp/Documents/settings.json\", \"src/test/resources/ios/settings.json\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "File nguồn phải tồn tại trên máy chạy test", "Đường dẫn đích trên thiết bị phải có quyền ghi", "Trên Android không root, chỉ có thể ghi vào thư mục shared như /sdcard/", "Trên iOS, cần sử dụng đường dẫn bundle đúng cú pháp" ],
  "exceptions" : [ "WebDriverException: Nếu có lỗi khi tương tác với trình điều khiển", "IOException: Nếu không thể đọc file nguồn", "IllegalArgumentException: Nếu đường dẫn không hợp lệ", "SecurityException: Nếu không có quyền ghi vào đường dẫn đích" ],
  "platform" : "MOBILE",
  "systemImpact" : "MODIFY",
  "stability" : "STABLE",
  "tags" : [ "mobile", "file", "transfer", "upload", "data", "resource", "preparation" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "pushFile",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "devicePath",
    "description" : "Đường dẫn đích trên thiết bị di động."
  }, {
    "type" : "String",
    "name" : "localFilePath",
    "description" : "Đường dẫn tuyệt đối đến file trên máy tính chạy test."
  } ]
}, {
  "name" : "extractTextByRegex",
  "description" : "Trích xuất một phần của chuỗi văn bản dựa trên một biểu thức chính quy (regex) và một nhóm (group) cụ thể. Phương thức này tìm kiếm sự xuất hiện đầu tiên của mẫu regex trong chuỗi văn bản và trả về giá trị của nhóm được chỉ định.",
  "category" : "Utility/String",
  "example" : "// Lấy mã đơn hàng '12345' từ chuỗi 'Mã đơn hàng của bạn là DH-12345'\nString orderCode = utilityKeyword.extractTextByRegex(\"Mã đơn hàng của bạn là DH-12345\", \"DH-(\\\\d+)\", 1);\n// orderCode sẽ có giá trị \"12345\"",
  "returnValue" : "String: Chuỗi văn bản được trích xuất từ nhóm được chỉ định, hoặc null nếu không tìm thấy kết quả khớp",
  "prerequisites" : [ ],
  "exceptions" : [ "PatternSyntaxException: Nếu biểu thức chính quy không hợp lệ", "IndexOutOfBoundsException: Nếu chỉ số nhóm không tồn tại" ],
  "platform" : "ALL",
  "systemImpact" : "READ_ONLY",
  "stability" : "STABLE",
  "tags" : [ "string", "regex", "extraction", "pattern-matching" ],
  "className" : "com.vtnet.netat.core.keywords.UtilityKeyword",
  "methodName" : "extractTextByRegex",
  "returnType" : "String",
  "parameters" : [ {
    "type" : "String",
    "name" : "text",
    "description" : "Chuỗi văn bản nguồn cần trích xuất dữ liệu."
  }, {
    "type" : "String",
    "name" : "regex",
    "description" : "Biểu thức chính quy để tìm kiếm mẫu trong chuỗi văn bản."
  }, {
    "type" : "int",
    "name" : "group",
    "description" : "Chỉ số của nhóm cần trích xuất (0 cho toàn bộ kết quả khớp, 1 cho nhóm đầu tiên, v.v.)."
  } ]
}, {
  "name" : "verifyElementNotPresentHard",
  "description" : "Khẳng định rằng một phần tử KHÔNG tồn tại trong DOM sau một khoảng thời gian chờ. Nếu phần tử vẫn tồn tại, kịch bản sẽ DỪNG LẠI.",
  "category" : "Web/Assert",
  "example" : "// Kiểm tra phần tử đã bị xóa\nwebKeyword.click(deleteButtonObject);\nwebKeyword.verifyElementNotPresentHard(deletedItemObject, 5);\n\n// Kiểm tra thông báo lỗi đã biến mất\nwebKeyword.sendKeys(emailInput, \"valid@example.com\");\nwebKeyword.verifyElementNotPresentHard(errorMessageObject, 3);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động" ],
  "exceptions" : [ "AssertionError: Nếu phần tử vẫn tồn tại trong DOM sau thời gian chờ", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "assert", "verify", "hard", "not present", "absence", "removed", "deleted", "invisible", "dom" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyElementNotPresentHard",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra."
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa."
  } ]
}, {
  "name" : "resetApp",
  "description" : "Reset ứng dụng về trạng thái ban đầu, tương đương với việc xóa dữ liệu ứng dụng. Phương thức này giúp đưa ứng dụng về trạng thái như mới cài đặt mà không cần gỡ và cài đặt lại. Lưu ý: Phương thức này chỉ reset trạng thái đầu vào (input state) của ứng dụng, không phải toàn bộ dữ liệu. Để xóa hoàn toàn dữ liệu ứng dụng, nên sử dụng executeMobileCommand với 'mobile:clearApp' trên Android hoặc gỡ và cài đặt lại trên iOS.",
  "category" : "Mobile/AppLifecycle",
  "example" : "// Reset ứng dụng về trạng thái ban đầu trước mỗi test case\nmobileKeyword.resetApp();\n\n// Reset sau khi hoàn thành một luồng test để chuẩn bị cho luồng tiếp theo\nmobileKeyword.completeCheckout();\nmobileKeyword.resetApp();\nmobileKeyword.loginWithCredentials(username, password);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Ứng dụng đã được khởi động trước đó" ],
  "exceptions" : [ "WebDriverException: Nếu không thể reset ứng dụng" ],
  "platform" : "MOBILE",
  "systemImpact" : "MODIFY",
  "stability" : "STABLE",
  "tags" : [ "mobile", "app", "reset", "clean-state" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "resetApp",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "takeScreenshot",
  "description" : "Chụp ảnh màn hình của thiết bị và lưu vào thư mục screenshots với tên file được chỉ định. Hữu ích khi cần ghi lại trạng thái màn hình tại các điểm quan trọng trong quá trình test, đặc biệt là khi gặp lỗi hoặc cần xác minh giao diện. Ảnh chụp màn hình sẽ được lưu với định dạng .png và tự động đính kèm vào báo cáo Allure nếu được cấu hình.",
  "category" : "Mobile/System",
  "example" : "// Chụp màn hình tại các bước quan trọng\nmobileKeyword.takeScreenshot(\"login_screen\");\nmobileKeyword.sendText(usernameInput, \"user@example.com\");\nmobileKeyword.sendText(passwordInput, \"password123\");\nmobileKeyword.takeScreenshot(\"credentials_entered\");\nmobileKeyword.tap(loginButton);\nmobileKeyword.takeScreenshot(\"after_login\");\n\n// Chụp màn hình khi gặp lỗi\ntry {\n    mobileKeyword.tap(submitButton);\n    mobileKeyword.waitForVisible(successMessage, 10);\n} catch (Exception e) {\n    mobileKeyword.takeScreenshot(\"error_submit_form\");\n    throw e;\n}\n\n// Chụp màn hình để xác minh giao diện\nmobileKeyword.takeScreenshot(\"product_details_page\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Thư mục screenshots phải tồn tại hoặc có quyền tạo", "Ứng dụng Appium phải có quyền chụp ảnh màn hình" ],
  "exceptions" : [ "WebDriverException: Nếu có lỗi khi chụp ảnh màn hình", "IOException: Nếu không thể lưu ảnh vào thư mục chỉ định", "IllegalArgumentException: Nếu tên file không hợp lệ" ],
  "platform" : "MOBILE",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "mobile", "system", "screenshot", "evidence", "debug", "report", "documentation" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "takeScreenshot",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "fileName",
    "description" : "Tên file để lưu ảnh (không cần đuôi .png)."
  } ]
}, {
  "name" : "goBack",
  "description" : "Thực hiện hành động quay lại trang trước đó trong lịch sử của trình duyệt, tương đương với việc người dùng nhấn nút 'Back'.",
  "category" : "Web/Browser",
  "example" : "// Quay lại trang trước sau khi đã điều hướng\nwebKeyword.openUrl(\"https://example.com/page1\");\nwebKeyword.openUrl(\"https://example.com/page2\");\nwebKeyword.goBack(); // Quay lại page1\n\n// Quay lại sau khi nhấp vào liên kết\nwebKeyword.click(linkToDetailsPage);\nwebKeyword.waitForPageLoaded();\nwebKeyword.goBack();\n\n// Kiểm tra URL sau khi quay lại\nwebKeyword.goBack();\nString currentUrl = DriverManager.getDriver().getCurrentUrl();\nAssert.assertEquals(\"https://example.com/expected-page\", currentUrl);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phải có ít nhất một trang đã được truy cập trước đó trong lịch sử của phiên hiện tại" ],
  "exceptions" : [ "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt", "NoSuchSessionException: Nếu phiên WebDriver không còn hợp lệ" ],
  "platform" : "WEB",
  "systemImpact" : "WRITE",
  "stability" : "STABLE",
  "tags" : [ "web", "browser", "navigation", "back", "history", "previous", "return" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "goBack",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "selectByVisibleText",
  "description" : "Chọn một tùy chọn trong dropdown dựa trên văn bản hiển thị của nó.",
  "category" : "Web/Interaction",
  "example" : "// Chọn quốc gia từ dropdown theo tên hiển thị\nwebKeyword.selectByVisibleText(countryDropdown, \"Việt Nam\");\nwebKeyword.verifyElementAttribute(countryDropdown, \"value\", \"VN\");\n\n// Chọn danh mục sản phẩm\nwebKeyword.selectByVisibleText(categoryDropdown, \"Điện thoại & Máy tính bảng\");\nwebKeyword.waitForElementVisible(mobileProductsGrid);\n\n// Chọn ngôn ngữ hiển thị\nwebKeyword.selectByVisibleText(languageDropdown, \"Tiếng Việt\");\nwebKeyword.waitForPageToLoad();\nwebKeyword.verifyElementText(welcomeMessage, \"Chào mừng bạn!\");\n\n// Chọn phương thức thanh toán\nwebKeyword.selectByVisibleText(paymentMethodDropdown, \"Thanh toán khi nhận hàng\");\nwebKeyword.waitForElementVisible(codInstructionsPanel);\nwebKeyword.verifyElementNotVisible(cardDetailsForm);\n\n// Xử lý văn bản có khoảng trắng và ký tự đặc biệt\nwebKeyword.selectByVisibleText(sortDropdown, \"Giá: Thấp đến cao (đề xuất)\");\nwebKeyword.verifyElementAttribute(sortDropdown, \"data-sort\", \"price-asc\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử dropdown phải tồn tại trong DOM", "Phần tử phải là thẻ <select> hợp lệ", "Phần tử phải hiển thị và có thể tương tác được", "Phải tồn tại ít nhất một tùy chọn có văn bản hiển thị khớp chính xác với text cần chọn", "Văn bản cần chọn phải khớp chính xác với văn bản hiển thị (phân biệt chữ hoa/thường, khoảng trắng, ký tự đặc biệt)" ],
  "exceptions" : [ "NoSuchElementException: Nếu không tìm thấy tùy chọn với văn bản hiển thị chỉ định", "ElementNotVisibleException: Nếu phần tử không hiển thị trên trang", "ElementNotInteractableException: Nếu phần tử không thể tương tác", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "UnexpectedTagNameException: Nếu phần tử không phải là thẻ <select>", "TimeoutException: Nếu phần tử không xuất hiện trong thời gian chờ", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "WRITE",
  "stability" : "STABLE",
  "tags" : [ "web", "interaction", "select", "dropdown", "text", "visible-text", "form", "choose", "option", "combobox", "list" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "selectByVisibleText",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử dropdown (thẻ select)."
  }, {
    "type" : "String",
    "name" : "text",
    "description" : "Văn bản hiển thị của tùy chọn cần chọn."
  } ]
}, {
  "name" : "dragAndDrop",
  "description" : "Thực hiện thao tác kéo một phần tử (nguồn) và thả nó vào vị trí của một phần tử khác (đích).",
  "category" : "Web/Interaction",
  "example" : "// Kéo và thả một mục vào giỏ hàng\nwebKeyword.dragAndDrop(productItemObject, cartDropZoneObject);\nwebKeyword.waitForElementVisible(cartNotificationObject);\n\n// Kéo và thả để sắp xếp lại danh sách\nwebKeyword.dragAndDrop(taskItemObject, topOfListObject);\nwebKeyword.verifyElementText(firstTaskObject, \"Nhiệm vụ đã kéo\");\n\n// Kéo và thả file vào khu vực tải lên\nwebKeyword.dragAndDrop(fileIconObject, uploadAreaObject);\nwebKeyword.waitForElementVisible(uploadProgressObject);\n\n// Kéo và thả để di chuyển phần tử trong bảng\nwebKeyword.dragAndDrop(tableRowObject, targetRowPositionObject);\nwebKeyword.waitForElementAttributeChange(tableObject, \"data-order-changed\", \"true\");\n\n// Kéo và thả để thay đổi kích thước phần tử\nwebKeyword.dragAndDrop(resizeHandleObject, newSizePositionObject);\nint newWidth = webKeyword.findElement(resizableElementObject).getSize().getWidth();\nAssert.assertTrue(newWidth > originalWidth, \"Phần tử phải được thay đổi kích thước\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Cả hai phần tử nguồn và đích phải tồn tại trong DOM", "Cả hai phần tử phải hiển thị và có thể tương tác được", "Trang web phải hỗ trợ thao tác kéo và thả", "Trình duyệt phải hỗ trợ thao tác kéo và thả (một số trình duyệt di động có thể không hỗ trợ đầy đủ)" ],
  "exceptions" : [ "ElementNotVisibleException: Nếu một trong hai phần tử không hiển thị trên trang", "ElementNotInteractableException: Nếu một trong hai phần tử không thể tương tác", "StaleElementReferenceException: Nếu một trong hai phần tử không còn gắn với DOM", "TimeoutException: Nếu một trong hai phần tử không xuất hiện trong thời gian chờ", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt", "MoveTargetOutOfBoundsException: Nếu phần tử đích nằm ngoài viewport hiện tại" ],
  "platform" : "WEB",
  "systemImpact" : "WRITE",
  "stability" : "MODERATE",
  "tags" : [ "web", "interaction", "drag", "drop", "dragndrop", "move", "reorder", "sort", "mouse", "action" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "dragAndDrop",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "sourceObject",
    "description" : "Phần tử nguồn cần được kéo đi."
  }, {
    "type" : "ObjectUI",
    "name" : "targetObject",
    "description" : "Phần tử đích, nơi phần tử nguồn sẽ được thả vào."
  } ]
}, {
  "name" : "verifyAlertPresent",
  "description" : "Khẳng định rằng một hộp thoại alert đang hiển thị trong một khoảng thời gian chờ.",
  "category" : "Web/Assert",
  "example" : "// Kiểm tra alert xuất hiện sau khi xóa\nwebKeyword.click(deleteButtonObject);\nwebKeyword.verifyAlertPresent(5);\nwebKeyword.acceptAlert(); // Xác nhận xóa\n\n// Kiểm tra alert xuất hiện khi rời trang có dữ liệu chưa lưu\nwebKeyword.sendKeys(commentField, \"Bình luận mới\");\nwebKeyword.click(backButtonObject);\nwebKeyword.verifyAlertPresent(3);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Trang web có thể hiển thị hộp thoại alert" ],
  "exceptions" : [ "AssertionError: Nếu không có hộp thoại alert xuất hiện trong thời gian chờ", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "assert", "verify", "alert", "popup", "dialog", "notification", "javascript", "confirmation" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyAlertPresent",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa."
  } ]
}, {
  "name" : "executeCommand",
  "description" : "Thực thi một lệnh trên command line của hệ điều hành và chờ cho đến khi nó hoàn thành. Phương thức này cho phép thực thi các lệnh hệ thống từ trong kịch bản kiểm thử, hữu ích cho các tác vụ như khởi động/dừng dịch vụ, xóa tệp, hoặc các tác vụ hệ thống khác.",
  "category" : "Utility/Command",
  "example" : "// Dừng tất cả các tiến trình Chrome trên Windows\nutilityKeyword.executeCommand(\"taskkill\", \"/F\", \"/IM\", \"chrome.exe\");\n\n// Liệt kê các tệp trong thư mục hiện tại trên Linux/Mac\nutilityKeyword.executeCommand(\"ls\", \"-la\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "Quyền thực thi lệnh trên hệ điều hành" ],
  "exceptions" : [ "IOException: Nếu có lỗi khi thực thi lệnh", "SecurityException: Nếu không có quyền thực thi lệnh" ],
  "platform" : "ALL",
  "systemImpact" : "MODIFY",
  "stability" : "STABLE",
  "tags" : [ "command", "system", "shell", "process" ],
  "className" : "com.vtnet.netat.core.keywords.UtilityKeyword",
  "methodName" : "executeCommand",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String[]",
    "name" : "command",
    "description" : "Lệnh và các tham số của nó, mỗi phần tử trong mảng là một phần riêng biệt của lệnh."
  } ]
}, {
  "name" : "activateApp",
  "description" : "Đưa một ứng dụng đã được cài đặt lên foreground (màn hình chính). Hữu ích khi cần chuyển đổi giữa các ứng dụng hoặc kích hoạt lại ứng dụng đang chạy nền. Ứng dụng phải đã được cài đặt trên thiết bị, nếu không sẽ gây ra lỗi. Không giống như startActivity trên Android, phương thức này hoạt động trên cả Android và iOS với cùng một cú pháp.",
  "category" : "Mobile/AppLifecycle",
  "example" : "// Kích hoạt ứng dụng chính đang test\nmobileKeyword.activateApp(\"com.example.myapp\");\n\n// Chuyển sang ứng dụng cài đặt để thay đổi cấu hình thiết bị\nmobileKeyword.activateApp(\"com.android.settings\"); // Android\n// hoặc\nmobileKeyword.activateApp(\"com.apple.Preferences\"); // iOS\n\n// Quay lại ứng dụng chính sau khi thực hiện thao tác trên ứng dụng khác\nmobileKeyword.activateApp(\"com.example.myapp\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "Ứng dụng đã được cài đặt trên thiết bị", "Thiết bị di động đã được kết nối và cấu hình đúng với Appium" ],
  "exceptions" : [ "WebDriverException: Nếu không thể kích hoạt ứng dụng", "NoSuchAppException: Nếu ứng dụng không được cài đặt trên thiết bị" ],
  "platform" : "MOBILE",
  "systemImpact" : "MODIFY",
  "stability" : "STABLE",
  "tags" : [ "mobile", "app", "activation", "foreground" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "activateApp",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "appId",
    "description" : "AppPackage (Android) hoặc BundleID (iOS) của ứng dụng cần kích hoạt."
  } ]
}, {
  "name" : "getCurrentUrl",
  "description" : "Lấy và trả về URL đầy đủ của trang web hiện tại mà trình duyệt đang hiển thị.",
  "category" : "Web/Getter",
  "example" : "// Kiểm tra URL sau khi điều hướng\nwebKeyword.navigateToUrl(\"https://example.com/products\");\nString currentUrl = webKeyword.getCurrentUrl();\nwebKeyword.verifyEqual(currentUrl, \"https://example.com/products\");\n\n// Kiểm tra URL sau khi gửi form\nwebKeyword.click(submitButtonObject);\nwebKeyword.waitForPageToLoad();\nString resultUrl = webKeyword.getCurrentUrl();\nwebKeyword.verifyContains(resultUrl, \"success=true\");\n\n// Lưu URL hiện tại để quay lại sau\nString originalUrl = webKeyword.getCurrentUrl();\nwebKeyword.click(detailsLinkObject);\nwebKeyword.waitForPageToLoad();\n// Thực hiện một số thao tác khác\nwebKeyword.navigateToUrl(originalUrl); // Quay lại trang ban đầu\n\n// Kiểm tra chuyển hướng\nwebKeyword.click(loginButtonObject);\nwebKeyword.waitForPageToLoad();\nString redirectedUrl = webKeyword.getCurrentUrl();\nwebKeyword.verifyContains(redirectedUrl, \"/auth/login\");\n\n// Trích xuất tham số từ URL\nString url = webKeyword.getCurrentUrl();\nif (url.contains(\"?id=\")) {\n    String id = url.split(\"\\\\?id=\")[1].split(\"&\")[0];\n    System.out.println(\"ID từ URL: \" + id);\n}",
  "returnValue" : "String: URL đầy đủ của trang web hiện tại",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động" ],
  "exceptions" : [ "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt", "NoSuchSessionException: Nếu phiên WebDriver không còn hợp lệ" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "getter", "url", "address", "navigation", "read", "extract", "information", "location", "browser" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "getCurrentUrl",
  "returnType" : "String",
  "parameters" : [ ]
}, {
  "name" : "setLocalStorage",
  "description" : "Ghi một cặp khóa-giá trị vào Local Storage của trình duyệt. Hữu ích để thiết lập trạng thái ứng dụng hoặc token.",
  "category" : "Web/Storage",
  "example" : "// Thiết lập token xác thực người dùng\nwebKeyword.setLocalStorage(\"user_token\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\");\nwebKeyword.navigate(\"https://example.com/dashboard\");\n\n// Lưu trạng thái giỏ hàng\nwebKeyword.setLocalStorage(\"cart_items\", \"[{\\\"id\\\":123,\\\"quantity\\\":2}]\");\nwebKeyword.refreshPage();",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Trang web đã được tải hoàn toàn", "Trình duyệt hỗ trợ Local Storage" ],
  "exceptions" : [ "JavascriptException: Nếu có lỗi khi thực thi JavaScript", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "WRITE",
  "stability" : "STABLE",
  "tags" : [ "web", "storage", "local-storage", "state", "data", "persistence", "browser", "javascript", "token" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "setLocalStorage",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "key",
    "description" : "Khóa (key) để lưu trữ."
  }, {
    "type" : "String",
    "name" : "value",
    "description" : "Giá trị (value) tương ứng."
  } ]
}, {
  "name" : "scrollToCoordinates",
  "description" : "Cuộn trang web đến một tọa độ (x, y) cụ thể trong viewport.",
  "category" : "Web/Interaction",
  "example" : "// Cuộn xuống 500px từ đầu trang\nwebKeyword.scrollToCoordinates(0, 500);\nwebKeyword.verifyElementVisible(midPageBannerObject);\n\n// Cuộn đến đầu trang\nwebKeyword.scrollToCoordinates(0, 0);\nwebKeyword.verifyElementVisible(headerObject);\n\n// Cuộn đến cuối trang\nwebKeyword.executeJavaScript(\"return Math.max(document.documentElement.scrollHeight, document.body.scrollHeight)\", (height) -> {\n    webKeyword.scrollToCoordinates(0, (int) height);\n    return null;\n});\nwebKeyword.verifyElementVisible(footerObject);\n\n// Cuộn đến vị trí cụ thể để hiển thị phần tử\nwebKeyword.scrollToCoordinates(0, 1200);\nwebKeyword.waitForElementVisible(middleSectionObject);\n\n// Cuộn theo chiều ngang trong bảng rộng\nwebKeyword.scrollToCoordinates(500, 800);\nwebKeyword.verifyElementVisible(tableRightColumnObject);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Trình duyệt phải hỗ trợ thực thi JavaScript", "Tọa độ phải nằm trong phạm vi hợp lệ của trang web" ],
  "exceptions" : [ "JavascriptException: Nếu có lỗi khi thực thi JavaScript", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "interaction", "scroll", "coordinate", "position", "pixel", "viewport", "page", "javascript", "xy" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "scrollToCoordinates",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "int",
    "name" : "x",
    "description" : "Tọa độ theo trục hoành (pixel)."
  }, {
    "type" : "int",
    "name" : "y",
    "description" : "Tọa độ theo trục tung (pixel)."
  } ]
}, {
  "name" : "verifyOrientation",
  "description" : "Khẳng định rằng màn hình thiết bị đang ở hướng dọc (PORTRAIT) hoặc ngang (LANDSCAPE). Hữu ích để đảm bảo ứng dụng hiển thị đúng hướng trước khi thực hiện các thao tác tiếp theo. Phương thức hoạt động trên cả Android và iOS. Nếu hướng màn hình không khớp với giá trị mong đợi, một AssertionError sẽ được ném ra.",
  "category" : "Mobile/Assertion",
  "example" : "// Kiểm tra rằng ứng dụng đang ở chế độ dọc trước khi tiếp tục\nmobileKeyword.verifyOrientation(\"PORTRAIT\");\n\n// Xoay thiết bị và xác minh hướng ngang\n// (Giả sử đã có phương thức để xoay thiết bị)\nrotateDevice();\nmobileKeyword.verifyOrientation(\"LANDSCAPE\");\n\n// Kiểm tra hướng màn hình trước khi chụp ảnh\nmobileKeyword.verifyOrientation(\"LANDSCAPE\");\nmobileKeyword.tap(captureButton);\n\n// Kiểm tra hướng màn hình sau khi xoay tự động\nmobileKeyword.tap(playVideoButton);\nmobileKeyword.waitForVisible(videoPlayer, 5);\nmobileKeyword.verifyOrientation(\"LANDSCAPE\");\n\n// Kiểm tra hướng màn hình sau khi quay lại từ ứng dụng khác\nmobileKeyword.pressKeyCode(\"HOME\");\nmobileKeyword.launchApp();\nmobileKeyword.verifyOrientation(\"PORTRAIT\");",
  "returnValue" : "void: Không trả về giá trị, ném AssertionError nếu kiểm tra thất bại",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Đang sử dụng AndroidDriver hoặc IOSDriver", "Tham số expectedOrientation phải là 'PORTRAIT' hoặc 'LANDSCAPE'" ],
  "exceptions" : [ "AssertionError: Nếu hướng màn hình không khớp với giá trị mong đợi", "IllegalArgumentException: Nếu giá trị expectedOrientation không hợp lệ", "UnsupportedOperationException: Nếu loại driver không được hỗ trợ", "WebDriverException: Nếu không thể lấy thông tin hướng màn hình" ],
  "platform" : "MOBILE",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "mobile", "assertion", "orientation", "portrait", "landscape", "screen", "display", "rotation", "verification" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "verifyOrientation",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "expectedOrientation",
    "description" : "Hướng màn hình mong đợi, phải là 'PORTRAIT' hoặc 'LANDSCAPE' (không phân biệt hoa/thường)."
  } ]
}, {
  "name" : "verifyElementEnabledSoft",
  "description" : "Kiểm tra một phần tử có đang ở trạng thái enabled hay không. Nếu không, kịch bản sẽ ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Web/Assert",
  "example" : "// Kiểm tra nhiều trường nhập liệu tùy chọn có thể tương tác\nwebKeyword.verifyElementEnabledSoft(optionalFieldObject);\nwebKeyword.verifyElementEnabledSoft(commentFieldObject);\nwebKeyword.verifyElementEnabledSoft(ratingFieldObject);\nwebKeyword.sendKeys(commentFieldObject, \"Đây là bình luận của tôi\"); // Tiếp tục ngay cả khi có trường không enabled\n\n// Kiểm tra các nút chức năng trong trang quản trị\nwebKeyword.verifyElementEnabledSoft(addButtonObject);\nwebKeyword.verifyElementEnabledSoft(editButtonObject);\nwebKeyword.verifyElementEnabledSoft(deleteButtonObject);\nwebKeyword.click(addButtonObject); // Tiếp tục thực hiện hành động\n\n// Kiểm tra các trường trong form sau khi mở khóa\nwebKeyword.click(unlockFormButtonObject);\nwebKeyword.verifyElementEnabledSoft(nameFieldObject);\nwebKeyword.verifyElementEnabledSoft(emailFieldObject);\nwebKeyword.verifyElementEnabledSoft(phoneFieldObject);\nwebKeyword.sendKeys(nameFieldObject, \"Nguyễn Văn A\"); // Tiếp tục điền form\n\n// Kiểm tra các tùy chọn trong menu\nwebKeyword.click(userMenuObject);\nwebKeyword.verifyElementEnabledSoft(profileOptionObject);\nwebKeyword.verifyElementEnabledSoft(settingsOptionObject);\nwebKeyword.verifyElementEnabledSoft(logoutOptionObject);\nwebKeyword.click(profileOptionObject); // Tiếp tục thực hiện hành động\n\n// Kiểm tra các nút điều hướng\nwebKeyword.verifyElementEnabledSoft(previousButtonObject);\nwebKeyword.verifyElementEnabledSoft(nextButtonObject);\nwebKeyword.click(nextButtonObject); // Tiếp tục điều hướng",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần kiểm tra phải tồn tại trong DOM" ],
  "exceptions" : [ "NoSuchElementException: Nếu không tìm thấy phần tử", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "assert", "verify", "soft", "enabled", "disabled", "state", "interactive", "button", "input" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyElementEnabledSoft",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra."
  } ]
}, {
  "name" : "swipeUp",
  "description" : "Thực hiện hành động vuốt lên trên màn hình, tương đương với thao tác cuộn xuống để xem nội dung bên dưới. Phương thức này tự động tính toán các tọa độ dựa trên kích thước màn hình thiết bị.",
  "category" : "Mobile/Gesture",
  "example" : "// Vuốt lên với tốc độ mặc định để xem thêm nội dung\nmobileKeyword.swipeUp();\n\n// Vuốt lên với tốc độ chậm hơn (1000ms)\nmobileKeyword.swipeUp(1000);\n\n// Cuộn xuống danh sách sản phẩm để tải thêm\nfor (int i = 0; i < 3; i++) {\n    mobileKeyword.swipeUp();\n    mobileKeyword.waitForVisible(loadingIndicator, 2);\n}",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium" ],
  "exceptions" : [ "WebDriverException: Nếu không thể thực hiện hành động vuốt" ],
  "platform" : "MOBILE",
  "systemImpact" : "MODIFY",
  "stability" : "STABLE",
  "tags" : [ "mobile", "gesture", "swipe", "scroll", "up" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "swipeUp",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "Integer[]",
    "name" : "durationInMs",
    "description" : "(Tùy chọn) Thời gian thực hiện vuốt (ms). Mặc định là 500ms nếu không được chỉ định."
  } ]
}, {
  "name" : "sendKeys",
  "description" : "Nhập một chuỗi văn bản vào một phần tử (thường là ô input hoặc textarea). Keyword sẽ tự động xóa nội dung có sẵn trong ô trước khi nhập văn bản mới.",
  "category" : "Web/Interaction",
  "example" : "// Nhập tên đăng nhập\nwebKeyword.sendKeys(usernameInputObject, \"my_username\");\n\n// Nhập mật khẩu\nwebKeyword.sendKeys(passwordInputObject, \"secure_password123\");\n\n// Nhập nội dung tìm kiếm\nwebKeyword.sendKeys(searchInputObject, \"laptop gaming\");\n\n// Nhập nội dung vào textarea\nwebKeyword.sendKeys(commentTextareaObject, \"Đây là một bình luận dài về sản phẩm này. Tôi rất hài lòng với chất lượng và giá cả.\");\n\n// Nhập dữ liệu từ biến\nString email = \"user\" + System.currentTimeMillis() + \"@example.com\";\nwebKeyword.sendKeys(emailInputObject, email);\n\n// Nhập dữ liệu có ký tự đặc biệt\nwebKeyword.sendKeys(codeInputObject, \"function test() { return true; }\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần nhập liệu phải tồn tại trong DOM", "Phần tử phải hiển thị và có thể tương tác được", "Phần tử phải là loại có thể nhập liệu (input, textarea, contenteditable)" ],
  "exceptions" : [ "ElementNotVisibleException: Nếu phần tử không hiển thị trên trang", "ElementNotInteractableException: Nếu phần tử không thể tương tác", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "TimeoutException: Nếu phần tử không xuất hiện trong thời gian chờ", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "WRITE",
  "stability" : "STABLE",
  "tags" : [ "web", "interaction", "input", "text", "type", "enter", "fill", "form", "data", "keyboard" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "sendKeys",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Ô input hoặc textarea cần nhập dữ liệu."
  }, {
    "type" : "String",
    "name" : "text",
    "description" : "Chuỗi văn bản cần nhập vào phần tử."
  } ]
}, {
  "name" : "assertAll",
  "description" : "Thực hiện kiểm tra tất cả các soft assertion đã được thu thập trước đó. Nếu có bất kỳ assertion nào thất bại, phương thức sẽ ném ra ngoại lệ với thông tin chi tiết về các lỗi. Sau khi gọi phương thức này, soft assert sẽ được reset về null.",
  "category" : "Assertion",
  "example" : "// Sau khi thực hiện nhiều soft assertion\nsoftAssert.assertEquals(actualTitle, expectedTitle, \"Title không khớp\");\nsoftAssert.assertTrue(isElementDisplayed, \"Element không hiển thị\");\n// Thực hiện kiểm tra tất cả các assertion\nassertAll();",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "Đã thực hiện ít nhất một soft assertion trước đó", "ExecutionContext đã được khởi tạo" ],
  "exceptions" : [ "AssertionError: Nếu có bất kỳ soft assertion nào thất bại" ],
  "platform" : "ALL",
  "systemImpact" : "READ_ONLY",
  "stability" : "STABLE",
  "tags" : [ "assertion", "validation", "softAssert" ],
  "className" : "com.vtnet.netat.core.keywords.AssertionKeyword",
  "methodName" : "assertAll",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "startApplication",
  "description" : "Khởi chạy một phiên làm việc mới hoặc kích hoạt lại ứng dụng nếu nó đang chạy nền. Luôn đảm bảo ứng dụng đang ở foreground. Nếu phiên làm việc đã tồn tại, phương thức sẽ kích hoạt lại ứng dụng bằng cách sử dụng appPackage hoặc bundleId từ file cấu hình.",
  "category" : "Session/Lifecycle",
  "example" : "// Khởi chạy ứng dụng trên Android\ndriverKeyword.startApplication(\"android\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "File cấu hình properties phải chứa 'capability.appium.appPackage' (Android) hoặc 'capability.appium.bundleId' (iOS)", "Appium server phải đang chạy" ],
  "exceptions" : [ "WebDriverException: Nếu không thể khởi tạo driver hoặc kích hoạt ứng dụng", "ConfigurationException: Nếu thiếu thông tin cấu hình cần thiết" ],
  "platform" : "ANDROID, IOS",
  "systemImpact" : "MODIFY",
  "stability" : "STABLE",
  "tags" : [ "mobile", "application", "session", "initialization" ],
  "className" : "com.vtnet.netat.core.keywords.DriverKeyword",
  "methodName" : "startApplication",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String[]",
    "name" : "platformName",
    "description" : "Tên nền tảng di động ('android', 'ios')."
  } ]
}, {
  "name" : "hover",
  "description" : "Di chuyển con trỏ chuột đến vị trí của một phần tử để hiển thị các menu con, tooltip, hoặc các hiệu ứng khác.",
  "category" : "Web/Interaction",
  "example" : "// Di chuột đến menu chính để hiển thị menu con\nwebKeyword.hover(mainMenuObject);\nwebKeyword.waitForElementVisible(subMenuObject);\nwebKeyword.click(subMenuItemObject);\n\n// Di chuột đến biểu tượng để hiển thị tooltip\nwebKeyword.hover(infoIconObject);\nwebKeyword.waitForElementVisible(tooltipObject);\nwebKeyword.verifyElementText(tooltipObject, \"Thông tin chi tiết\");\n\n// Di chuột đến hình ảnh để hiển thị nút phóng to\nwebKeyword.hover(productImageObject);\nwebKeyword.waitForElementVisible(zoomButtonObject);\nwebKeyword.click(zoomButtonObject);\n\n// Di chuột đến phần tử để kích hoạt hiệu ứng\nwebKeyword.hover(cardObject);\nwebKeyword.verifyElementAttribute(cardObject, \"class\", \"card-hover\");\n\n// Di chuột qua các mục trong thanh điều hướng\nList<WebElement> navItems = webKeyword.findElements(navItemsObject);\nfor (WebElement item : navItems) {\n    new Actions(DriverManager.getDriver()).moveToElement(item).perform();\n    Thread.sleep(500); // Dừng để quan sát hiệu ứng\n}",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần hover phải tồn tại trong DOM", "Phần tử phải hiển thị trên trang", "Trình duyệt phải hỗ trợ thao tác di chuột (một số trình duyệt di động có thể không hỗ trợ)" ],
  "exceptions" : [ "ElementNotVisibleException: Nếu phần tử không hiển thị trên trang", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "TimeoutException: Nếu phần tử không xuất hiện trong thời gian chờ", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt", "MoveTargetOutOfBoundsException: Nếu phần tử nằm ngoài viewport hiện tại" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "interaction", "hover", "mouseover", "mouse", "tooltip", "submenu", "dropdown", "effect" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "hover",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần di chuột đến."
  } ]
}, {
  "name" : "pullFile",
  "description" : "Kéo một file từ thiết bị về máy tính và trả về nội dung dưới dạng chuỗi (đã được giải mã Base64). Hữu ích khi cần lấy các file log, dữ liệu hoặc tài nguyên từ thiết bị để phân tích hoặc xác minh. Lưu ý: Đường dẫn phải trỏ đến một file có thể truy cập được từ ứng dụng (với quyền thích hợp). Trên Android không root, thường chỉ có thể truy cập các file trong thư mục ứng dụng.",
  "category" : "Mobile/File",
  "example" : "// Lấy nội dung file log để kiểm tra\nString logContent = mobileKeyword.pullFile(\"/sdcard/Download/app.log\");\nassert logContent.contains(\"Transaction completed\") : \"Log không chứa thông tin giao dịch\";\n\n// Lấy file cấu hình để xác minh thiết lập\nString configContent = mobileKeyword.pullFile(\"/data/data/com.example.myapp/files/config.json\");\n// Phân tích JSON và kiểm tra giá trị\nJSONObject config = new JSONObject(configContent);\nassert config.getBoolean(\"darkMode\") : \"Chế độ tối chưa được bật\";\n\n// Lấy file CSV đã tạo bởi ứng dụng để kiểm tra dữ liệu xuất\nString csvData = mobileKeyword.pullFile(\"/sdcard/Documents/export.csv\");\nassert csvData.split(\"\\n\").length > 1 : \"File CSV không chứa dữ liệu\";",
  "returnValue" : "String: Nội dung của file được trả về dưới dạng chuỗi (đã giải mã Base64)",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "File cần lấy phải tồn tại trên thiết bị", "Ứng dụng phải có quyền đọc file đó", "Trên Android không root, chỉ có thể đọc file từ thư mục ứng dụng hoặc thư mục shared", "Trên iOS, cần sử dụng đường dẫn bundle đúng cú pháp" ],
  "exceptions" : [ "WebDriverException: Nếu có lỗi khi tương tác với trình điều khiển", "NoSuchFileException: Nếu file không tồn tại trên thiết bị", "SecurityException: Nếu không có quyền đọc file", "IllegalArgumentException: Nếu đường dẫn không hợp lệ" ],
  "platform" : "MOBILE",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "mobile", "file", "transfer", "download", "data", "verification", "log", "analysis" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "pullFile",
  "returnType" : "String",
  "parameters" : [ {
    "type" : "String",
    "name" : "devicePath",
    "description" : "Đường dẫn đến file trên thiết bị."
  } ]
}, {
  "name" : "connectDatabase",
  "description" : "Khởi tạo một connection pool dựa trên file profile. File profile chứa các thông tin cấu hình kết nối như URL, username, password, driver class, và các thuộc tính kết nối khác.",
  "category" : "DB/Connection",
  "example" : "// Khởi tạo kết nối đến cơ sở dữ liệu từ file cấu hình\ndatabaseKeyword.connectDatabase(\"profiles/mysql_dev.properties\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "File profile phải tồn tại và chứa thông tin cấu hình hợp lệ" ],
  "exceptions" : [ "SQLException: Nếu không thể thiết lập kết nối đến CSDL", "FileNotFoundException: Nếu không tìm thấy file profile", "ConfigurationException: Nếu thông tin cấu hình trong profile không hợp lệ" ],
  "platform" : "ALL",
  "systemImpact" : "MODIFY",
  "stability" : "STABLE",
  "tags" : [ "database", "connection", "setup" ],
  "className" : "com.vtnet.netat.db.keywords.DatabaseKeyword",
  "methodName" : "connectDatabase",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "profilePath",
    "description" : "Đường dẫn đến file profile chứa thông tin cấu hình kết nối CSDL."
  } ]
}, {
  "name" : "waitForNotVisible",
  "description" : "Chờ cho đến khi một phần tử biến mất khỏi màn hình hoặc cho đến khi hết thời gian chờ. Phần tử được coi là không hiển thị khi nó không tồn tại trong DOM hoặc không thể nhìn thấy được (invisible). Hữu ích khi cần đảm bảo một phần tử đã biến mất (như màn hình loading) trước khi tiếp tục. Nếu phần tử vẫn hiển thị sau khi hết thời gian chờ, một TimeoutException sẽ được ném ra.",
  "category" : "Mobile/Wait",
  "example" : "// Chờ màn hình splash biến mất\nmobileKeyword.waitForNotVisible(splashScreen, 10);\n\n// Chờ biểu tượng loading biến mất sau khi tải dữ liệu\nmobileKeyword.tap(refreshButton);\nmobileKeyword.waitForNotVisible(loadingSpinner, 15);\n\n// Chờ thông báo lỗi tự động đóng\nmobileKeyword.waitForNotVisible(errorToast, 5);\n\n// Đảm bảo hộp thoại đã đóng sau khi nhấn nút hủy\nmobileKeyword.tap(cancelButton);\nmobileKeyword.waitForNotVisible(dialog, 3);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Đã xác định chính xác phần tử UI cần chờ đợi" ],
  "exceptions" : [ "TimeoutException: Nếu phần tử vẫn hiển thị sau khi hết thời gian chờ", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM" ],
  "platform" : "MOBILE",
  "systemImpact" : "READ_ONLY",
  "stability" : "STABLE",
  "tags" : [ "mobile", "wait", "invisibility", "synchronization" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "waitForNotVisible",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần chờ biến mất."
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian tối đa (giây) để chờ phần tử biến mất."
  } ]
}, {
  "name" : "longPressByCoordinates",
  "description" : "Thực hiện hành động chạm và giữ tại một tọa độ (x, y) trong một khoảng thời gian xác định. Hữu ích khi cần thực hiện các thao tác đặc biệt như hiển thị menu ngữ cảnh tại một vị trí cụ thể, hoặc khi tương tác với các phần tử không thể định vị bằng locator. Tọa độ được tính theo pixel từ góc trên bên trái của màn hình (0,0).",
  "category" : "Mobile/Gesture",
  "example" : "// Chạm và giữ tại trung tâm màn hình trong 2 giây\nDimension size = DriverManager.getDriver().manage().window().getSize();\nint centerX = size.width / 2;\nint centerY = size.height / 2;\nmobileKeyword.longPressByCoordinates(centerX, centerY, 2);\n\n// Chạm và giữ tại một vị trí trên bản đồ để thả ghim\nmobileKeyword.longPressByCoordinates(450, 800, 1);\n\n// Chạm và giữ tại một vị trí trên hình ảnh để hiển thị menu lưu ảnh\nmobileKeyword.longPressByCoordinates(300, 500, 2);\n\n// Mô phỏng thao tác chỉnh sửa văn bản (chạm và giữ để hiển thị con trỏ)\nmobileKeyword.longPressByCoordinates(200, 600, 1);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Tọa độ cần nằm trong phạm vi kích thước màn hình của thiết bị", "Ứng dụng phải hỗ trợ thao tác chạm và giữ tại vị trí đó" ],
  "exceptions" : [ "WebDriverException: Nếu có lỗi khi thực hiện hành động chạm và giữ", "IllegalArgumentException: Nếu tọa độ nằm ngoài kích thước màn hình hoặc thời gian giữ không hợp lệ" ],
  "platform" : "MOBILE",
  "systemImpact" : "MODIFY",
  "stability" : "STABLE",
  "tags" : [ "mobile", "gesture", "longpress", "touch", "coordinate", "position", "context", "menu" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "longPressByCoordinates",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "int",
    "name" : "x",
    "description" : "Tọa độ theo trục ngang (pixel)."
  }, {
    "type" : "int",
    "name" : "y",
    "description" : "Tọa độ theo trục dọc (pixel)."
  }, {
    "type" : "int",
    "name" : "durationInSeconds",
    "description" : "Thời gian giữ (tính bằng giây)."
  } ]
}, {
  "name" : "getElementHeight",
  "description" : "Lấy và trả về chiều cao của một phần tử (tính bằng pixel). Hữu ích khi cần tính toán vị trí tương đối hoặc kiểm tra kích thước hiển thị của phần tử. Phương thức này trả về giá trị số nguyên đại diện cho chiều cao theo pixel của phần tử. Lưu ý: Phần tử phải hiển thị trên màn hình để có thể lấy được kích thước chính xác.",
  "category" : "Mobile/Getter",
  "example" : "// Lấy chiều cao của một hình ảnh\nint imageHeight = mobileKeyword.getElementHeight(productImage);\n\n// Kiểm tra xem phần tử có kích thước đúng không\nint cardHeight = mobileKeyword.getElementHeight(cardElement);\nassert cardHeight > 200 : \"Card height is too small\";\n\n// Sử dụng chiều cao để tính toán vị trí cuộn\nint itemHeight = mobileKeyword.getElementHeight(listItem);\nint scrollDistance = itemHeight * 5; // Cuộn qua 5 mục\n\n// Tính toán vị trí tap dựa trên chiều cao\nint buttonHeight = mobileKeyword.getElementHeight(tallButton);\nPoint location = tallButton.getLocation();\nmobileKeyword.tapByCoordinates(location.x + 10, location.y + buttonHeight / 2); // Tap ở giữa theo chiều cao\n\n// Kiểm tra tỷ lệ khung hình\nint height = mobileKeyword.getElementHeight(imageView);\nint width = mobileKeyword.getElementWidth(imageView);\ndouble ratio = (double) width / height;\nAssert.assertEquals(1.78, ratio, 0.1, \"Tỷ lệ khung hình phải là 16:9 (1.78)\");",
  "returnValue" : "int: Chiều cao của phần tử tính bằng pixel",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Phần tử cần đo phải tồn tại và hiển thị trên màn hình", "Phần tử phải có kích thước xác định (không phải phần tử ẩn hoặc có kích thước 0)" ],
  "exceptions" : [ "NoSuchElementException: Nếu không tìm thấy phần tử", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "WebDriverException: Nếu không thể lấy kích thước của phần tử" ],
  "platform" : "MOBILE",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "mobile", "getter", "dimension", "height", "size", "measurement", "pixel", "layout", "calculation" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "getElementHeight",
  "returnType" : "int",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần lấy chiều cao."
  } ]
}, {
  "name" : "waitForVisible",
  "description" : "Chờ cho đến khi một phần tử hiển thị trên màn hình hoặc cho đến khi hết thời gian chờ. Phần tử được coi là hiển thị khi nó tồn tại trong DOM và có thể nhìn thấy được (visible). Phương thức này hữu ích khi cần đảm bảo một phần tử đã xuất hiện trước khi tương tác với nó. Nếu phần tử không hiển thị sau khi hết thời gian chờ, một TimeoutException sẽ được ném ra.",
  "category" : "Mobile/Wait",
  "example" : "// Chờ nút đăng nhập hiển thị sau khi nhập thông tin\nmobileKeyword.sendText(usernameInput, \"user@example.com\");\nmobileKeyword.sendText(passwordInput, \"password123\");\nmobileKeyword.waitForVisible(loginButton, 5);\nmobileKeyword.tap(loginButton);\n\n// Chờ thông báo thành công hiển thị sau khi gửi biểu mẫu\nmobileKeyword.tap(submitButton);\nmobileKeyword.waitForVisible(successMessage, 10);\n\n// Chờ màn hình chính tải xong sau khi đăng nhập\nmobileKeyword.waitForVisible(homeScreenIndicator, 15);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Đã xác định chính xác phần tử UI cần chờ đợi" ],
  "exceptions" : [ "TimeoutException: Nếu phần tử không hiển thị trong thời gian chờ đợi", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "NoSuchElementException: Nếu không tìm thấy phần tử trong DOM" ],
  "platform" : "MOBILE",
  "systemImpact" : "READ_ONLY",
  "stability" : "STABLE",
  "tags" : [ "mobile", "wait", "visibility", "synchronization" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "waitForVisible",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần chờ hiển thị."
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian tối đa (giây) để chờ phần tử hiển thị."
  } ]
}, {
  "name" : "verifyCssValueSoft",
  "description" : "So sánh giá trị của một thuộc tính CSS trên phần tử. Nếu không khớp, kịch bản sẽ ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Web/Assert",
  "example" : "// Kiểm tra độ đậm của tiêu đề\nwebKeyword.verifyCssValueSoft(titleObject, \"font-weight\", \"700\");\nwebKeyword.click(nextButtonObject); // Tiếp tục quy trình\n\n// Kiểm tra màu nền của nút\nwebKeyword.verifyCssValueSoft(buttonObject, \"background-color\", \"rgb(0, 123, 255)\");\nwebKeyword.click(buttonObject);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần kiểm tra phải tồn tại trong DOM" ],
  "exceptions" : [ "NoSuchElementException: Nếu không tìm thấy phần tử", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "assert", "verify", "soft", "css", "style", "property", "visual", "appearance", "validation" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyCssValueSoft",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra."
  }, {
    "type" : "String",
    "name" : "cssName",
    "description" : "Tên thuộc tính CSS (ví dụ: 'font-weight')."
  }, {
    "type" : "String",
    "name" : "expectedValue",
    "description" : "Giá trị CSS mong đợi (ví dụ: '700')."
  } ]
}, {
  "name" : "check",
  "description" : "Kiểm tra và đảm bảo một checkbox hoặc radio button đang ở trạng thái được chọn. Nếu phần tử chưa được chọn, keyword sẽ thực hiện click để chọn nó.",
  "category" : "Web/Interaction",
  "example" : "// Đảm bảo checkbox Điều khoản và Điều kiện đã được chọn\nwebKeyword.check(termsAndConditionsCheckbox);\n\n// Chọn phương thức thanh toán\nwebKeyword.check(creditCardRadioButton);\n\n// Đăng ký nhận thông báo\nwebKeyword.check(newsletterCheckbox);\n\n// Chọn nhiều tùy chọn\nwebKeyword.check(expressShippingCheckbox);\nwebKeyword.check(giftWrappingCheckbox);\n\n// Chọn và kiểm tra trạng thái\nwebKeyword.check(rememberMeCheckbox);\nboolean isSelected = webKeyword.findElement(rememberMeCheckbox).isSelected();\nAssert.assertTrue(isSelected, \"Checkbox 'Ghi nhớ đăng nhập' phải được chọn\");\n\n// Chọn một radio button trong nhóm\nwebKeyword.check(maleGenderRadio); // Sẽ tự động bỏ chọn các radio button khác trong cùng nhóm",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần chọn phải tồn tại trong DOM", "Phần tử phải hiển thị và có thể tương tác được", "Phần tử phải là checkbox hoặc radio button (input type=\"checkbox\" hoặc type=\"radio\")" ],
  "exceptions" : [ "ElementNotVisibleException: Nếu phần tử không hiển thị trên trang", "ElementNotInteractableException: Nếu phần tử không thể tương tác", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "TimeoutException: Nếu phần tử không xuất hiện trong thời gian chờ", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "WRITE",
  "stability" : "STABLE",
  "tags" : [ "web", "interaction", "checkbox", "radio", "select", "check", "toggle", "form", "input", "boolean" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "check",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử checkbox hoặc radio button cần kiểm tra và chọn."
  } ]
}, {
  "name" : "isElementPresent",
  "description" : "Kiểm tra xem một phần tử có tồn tại trong DOM hay không trong một khoảng thời gian chờ nhất định. Trả về true nếu tìm thấy, false nếu không tìm thấy và không ném ra exception.",
  "category" : "Web/Assert",
  "example" : "// Kiểm tra thông báo lỗi có xuất hiện không\nboolean isErrorVisible = webKeyword.isElementPresent(errorMessageObject, 5);\nif (isErrorVisible) {\n    // Xử lý khi có lỗi\n}\n\n// Kiểm tra phần tử tùy chọn có tồn tại không\nif (webKeyword.isElementPresent(optionalElementObject, 2)) {\n    webKeyword.click(optionalElementObject);\n}",
  "returnValue" : "boolean: true nếu phần tử tồn tại, false nếu không tồn tại",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động" ],
  "exceptions" : [ "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "assert", "verify", "presence", "exists", "dom", "element", "check", "condition", "wait" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "isElementPresent",
  "returnType" : "boolean",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần tìm kiếm."
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa (tính bằng giây)."
  } ]
}, {
  "name" : "pause",
  "description" : "Tạm dừng việc thực thi kịch bản trong một khoảng thời gian tĩnh. (Lưu ý: Chỉ nên dùng khi thực sự cần thiết, ưu tiên các keyword chờ động).",
  "category" : "Web/Utility",
  "example" : "// Tạm dừng để đợi animation hoàn thành\nwebKeyword.click(expandMenuButtonObject);\nwebKeyword.pause(1000); // Đợi 1 giây cho animation menu mở ra\nwebKeyword.click(menuItemObject);\n\n// Tạm dừng để đợi dữ liệu được xử lý\nwebKeyword.click(generateReportButtonObject);\nwebKeyword.pause(3000); // Đợi 3 giây cho quá trình xử lý\nwebKeyword.verifyElementVisibleHard(reportResultObject, 10);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "Không có điều kiện tiên quyết đặc biệt" ],
  "exceptions" : [ "InterruptedException: Nếu luồng thực thi bị gián đoạn trong khi tạm dừng" ],
  "platform" : "WEB",
  "systemImpact" : "NONE",
  "stability" : "STABLE",
  "tags" : [ "web", "pause", "wait", "delay", "sleep", "timing", "utility", "synchronization" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "pause",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "int",
    "name" : "milliseconds",
    "description" : "Thời gian cần tạm dừng (tính bằng mili giây)."
  } ]
}, {
  "name" : "uninstallApp",
  "description" : "Gỡ cài đặt một ứng dụng khỏi thiết bị dựa trên định danh của ứng dụng. Trên Android, đây là package name (ví dụ: com.example.myapp). Trên iOS, đây là bundle ID (ví dụ: com.example.MyApp). Lưu ý: Một số ứng dụng hệ thống không thể gỡ cài đặt ngay cả khi có quyền root/jailbreak.",
  "category" : "Mobile/AppLifecycle",
  "example" : "// Gỡ cài đặt ứng dụng Android\nmobileKeyword.uninstallApp(\"com.example.myapp\");\n\n// Gỡ cài đặt ứng dụng iOS\nmobileKeyword.uninstallApp(\"com.example.MyApp\");\n\n// Gỡ cài đặt để chuẩn bị cho test case cài đặt mới\nmobileKeyword.uninstallApp(\"com.banking.app\");\nmobileKeyword.installApp(\"C:/apps/banking-app.apk\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Có quyền gỡ cài đặt ứng dụng trên thiết bị" ],
  "exceptions" : [ "WebDriverException: Nếu không thể gỡ cài đặt ứng dụng", "IllegalArgumentException: Nếu appId không hợp lệ" ],
  "platform" : "MOBILE",
  "systemImpact" : "MODIFY",
  "stability" : "STABLE",
  "tags" : [ "mobile", "app", "uninstallation" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "uninstallApp",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "appId",
    "description" : "AppPackage (Android) hoặc BundleID (iOS) của ứng dụng cần gỡ cài đặt."
  } ]
}, {
  "name" : "openUrl",
  "description" : "Điều hướng trình duyệt đến một địa chỉ web (URL) cụ thể.",
  "category" : "Web/Browser",
  "example" : "// Mở trang chủ Google\nwebKeyword.openUrl(\"https://www.google.com\");\n\n// Mở trang đăng nhập\nwebKeyword.openUrl(\"https://example.com/login\");\n\n// Mở URL với tham số truy vấn\nwebKeyword.openUrl(\"https://example.com/search?q=selenium&lang=vi\");\n\n// Mở URL từ biến cấu hình\nString baseUrl = ConfigReader.getProperty(\"app.url\");\nwebKeyword.openUrl(baseUrl + \"/dashboard\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "URL phải là một địa chỉ hợp lệ và có thể truy cập được", "Kết nối mạng phải hoạt động" ],
  "exceptions" : [ "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt", "InvalidArgumentException: Nếu URL không hợp lệ", "TimeoutException: Nếu trang không tải trong thời gian chờ mặc định" ],
  "platform" : "WEB",
  "systemImpact" : "WRITE",
  "stability" : "STABLE",
  "tags" : [ "web", "browser", "navigation", "url", "open", "load", "page", "visit" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "openUrl",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "url",
    "description" : "Địa chỉ trang web đầy đủ cần mở (ví dụ: 'https://www.google.com')."
  } ]
}, {
  "name" : "verifyTitleSoft",
  "description" : "So sánh tiêu đề của trang hiện tại với một chuỗi mong đợi. Nếu không khớp, kịch bản sẽ ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Web/Assert",
  "example" : "// Kiểm tra tiêu đề trang giỏ hàng sau khi thêm sản phẩm\nwebKeyword.click(addToCartButtonObject);\nwebKeyword.click(viewCartButtonObject);\nwebKeyword.waitForPageLoaded(10);\nwebKeyword.verifyTitleSoft(\"Giỏ hàng (1 sản phẩm)\");\nwebKeyword.click(checkoutButtonObject); // Tiếp tục quy trình thanh toán\n\n// Kiểm tra nhiều điều kiện trong quy trình đặt hàng\nwebKeyword.verifyTitleSoft(\"Thanh toán - Bước 1: Thông tin giao hàng\");\nwebKeyword.verifyElementVisibleSoft(shippingFormObject, true);\nwebKeyword.fillShippingForm(); // Tiếp tục điền form\n\n// Kiểm tra tiêu đề trang trong quy trình nhiều bước\nwebKeyword.click(step1ButtonObject);\nwebKeyword.verifyTitleSoft(\"Bước 1: Thông tin cá nhân\");\nwebKeyword.click(step2ButtonObject);\nwebKeyword.verifyTitleSoft(\"Bước 2: Thông tin liên hệ\");\nwebKeyword.click(step3ButtonObject);\nwebKeyword.verifyTitleSoft(\"Bước 3: Xác nhận\");\n\n// Kiểm tra tiêu đề trang sau khi lọc sản phẩm\nwebKeyword.selectByVisibleText(categoryDropdownObject, \"Điện thoại\");\nwebKeyword.click(filterButtonObject);\nwebKeyword.waitForPageLoaded(10);\nwebKeyword.verifyTitleSoft(\"Điện thoại - Danh sách sản phẩm\");\n\n// Kiểm tra tiêu đề trang sau khi tìm kiếm\nwebKeyword.sendKeys(searchInputObject, \"laptop gaming\");\nwebKeyword.click(searchButtonObject);\nwebKeyword.waitForPageLoaded(15);\nwebKeyword.verifyTitleSoft(\"Kết quả tìm kiếm: laptop gaming\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Trang web đã hoàn thành quá trình tải" ],
  "exceptions" : [ "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "assert", "verify", "soft", "title", "page", "header", "browser", "validation", "metadata" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyTitleSoft",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "expectedTitle",
    "description" : "Tiêu đề trang mong đợi."
  } ]
}, {
  "name" : "hideKeyboard",
  "description" : "Ẩn bàn phím ảo nếu nó đang hiển thị trên màn hình. Hữu ích khi cần giải phóng không gian màn hình sau khi nhập liệu hoặc trước khi thực hiện các thao tác khác. Lưu ý: Nếu bàn phím không hiển thị, phương thức này có thể gây ra lỗi trên một số thiết bị.",
  "category" : "Mobile/Interaction",
  "example" : "// Nhập văn bản vào ô tìm kiếm, sau đó ẩn bàn phím\nmobileKeyword.sendText(searchInput, \"điện thoại samsung\");\nmobileKeyword.hideKeyboard();\n\n// Ẩn bàn phím trước khi chạm vào nút tìm kiếm\nmobileKeyword.hideKeyboard();\nmobileKeyword.tap(searchButton);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium" ],
  "exceptions" : [ "WebDriverException: Nếu không thể ẩn bàn phím hoặc bàn phím không hiển thị" ],
  "platform" : "MOBILE",
  "systemImpact" : "MODIFY",
  "stability" : "STABLE",
  "tags" : [ "mobile", "interaction", "keyboard", "ui" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "hideKeyboard",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "maximizeWindow",
  "description" : "Phóng to cửa sổ trình duyệt hiện tại ra kích thước lớn nhất có thể trên màn hình.",
  "category" : "Web/Browser",
  "example" : "// Phóng to cửa sổ trình duyệt khi bắt đầu kiểm thử\nwebKeyword.openUrl(\"https://example.com\");\nwebKeyword.maximizeWindow();\n\n// Phóng to cửa sổ trước khi chụp ảnh màn hình\nwebKeyword.maximizeWindow();\nwebKeyword.takeScreenshot(\"full_page\");\n\n// Phóng to cửa sổ để xem các phần tử ẩn\nwebKeyword.openUrl(\"https://example.com/responsive-page\");\nwebKeyword.maximizeWindow();\nwebKeyword.verifyElementVisible(menuItemOnlyVisibleOnLargeScreen);\n\n// Phóng to cửa sổ để kiểm tra bố cục responsive\nwebKeyword.maximizeWindow();\nint headerWidth = webKeyword.findElement(headerElement).getSize().getWidth();\nint screenWidth = DriverManager.getDriver().manage().window().getSize().getWidth();\nAssert.assertEquals(headerWidth, screenWidth, \"Header phải có chiều rộng bằng với màn hình\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Trình duyệt phải hỗ trợ thay đổi kích thước cửa sổ" ],
  "exceptions" : [ "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt", "NoSuchSessionException: Nếu phiên WebDriver không còn hợp lệ", "UnsupportedOperationException: Nếu trình duyệt không hỗ trợ thay đổi kích thước" ],
  "platform" : "WEB",
  "systemImpact" : "WRITE",
  "stability" : "STABLE",
  "tags" : [ "web", "browser", "window", "maximize", "resize", "fullscreen", "display", "viewport" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "maximizeWindow",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "waitForPageLoaded",
  "description" : "Tạm dừng kịch bản cho đến khi trang web tải xong hoàn toàn (trạng thái 'document.readyState' là 'complete').",
  "category" : "Web/Wait",
  "example" : "// Chờ trang tải xong sau khi điều hướng\nwebKeyword.navigateToUrl(\"https://example.com/dashboard\");\nwebKeyword.waitForPageLoaded(30);\nwebKeyword.verifyElementVisible(dashboardWidgetsObject);\n\n// Chờ trang tải xong sau khi gửi form\nwebKeyword.click(submitButtonObject);\nwebKeyword.waitForPageLoaded(20);\nwebKeyword.verifyElementVisible(successMessageObject);\n\n// Chờ trang tải xong sau khi chuyển tab\nwebKeyword.click(ordersTabObject);\nwebKeyword.waitForPageLoaded(15);\nwebKeyword.verifyElementVisible(orderListObject);\n\n// Chờ trang tải xong sau khi đăng nhập\nwebKeyword.sendKeys(usernameInputObject, \"testuser\");\nwebKeyword.sendKeys(passwordInputObject, \"password123\");\nwebKeyword.click(loginButtonObject);\nwebKeyword.waitForPageLoaded(25);\nwebKeyword.verifyElementVisible(userProfileObject);\n\n// Chờ trang tải xong và kiểm tra URL\nwebKeyword.click(checkoutButtonObject);\nwebKeyword.waitForPageLoaded(30);\nString currentUrl = webKeyword.getCurrentUrl();\nwebKeyword.verifyContains(currentUrl, \"/checkout\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Trình duyệt phải hỗ trợ thực thi JavaScript", "Trang web sẽ hoàn thành quá trình tải trong khoảng thời gian chờ đã chỉ định" ],
  "exceptions" : [ "TimeoutException: Nếu trang không tải xong trong thời gian chờ đã chỉ định", "JavascriptException: Nếu có lỗi khi thực thi JavaScript", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "wait", "synchronization", "page", "load", "ready", "complete", "document", "timeout", "navigation" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "waitForPageLoaded",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa (tính bằng giây)."
  } ]
}, {
  "name" : "getLocalStorage",
  "description" : "Đọc và trả về giá trị từ Local Storage của trình duyệt dựa trên một khóa (key) được cung cấp.",
  "category" : "Web/Storage",
  "example" : "// Kiểm tra token xác thực\nString userToken = webKeyword.getLocalStorage(\"user_token\");\nif (userToken == null || userToken.isEmpty()) {\n    webKeyword.navigate(\"https://example.com/login\");\n}\n\n// Đọc thông tin giỏ hàng\nString cartItems = webKeyword.getLocalStorage(\"cart_items\");\nlogger.info(\"Số lượng sản phẩm trong giỏ: \" + cartItems);",
  "returnValue" : "String: Giá trị được lưu trữ trong Local Storage với khóa đã chỉ định, hoặc null nếu không tìm thấy",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Trang web đã được tải hoàn toàn", "Trình duyệt hỗ trợ Local Storage" ],
  "exceptions" : [ "JavascriptException: Nếu có lỗi khi thực thi JavaScript", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "storage", "local-storage", "state", "data", "persistence", "browser", "javascript", "get" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "getLocalStorage",
  "returnType" : "String",
  "parameters" : [ {
    "type" : "String",
    "name" : "key",
    "description" : "Khóa (key) của giá trị cần đọc."
  } ]
}, {
  "name" : "getTextFromElements",
  "description" : "Lấy và trả về một danh sách (List) các chuỗi văn bản từ mỗi phần tử trong một danh sách các phần tử.",
  "category" : "Web/Getter",
  "example" : "// Lấy danh sách tên sản phẩm\nList<String> productNames = webKeyword.getTextFromElements(productNameObject);\nSystem.out.println(\"Tìm thấy \" + productNames.size() + \" sản phẩm\");\nfor (String name : productNames) {\n    System.out.println(\"- \" + name);\n}\n\n// Kiểm tra danh sách giá sản phẩm\nList<String> prices = webKeyword.getTextFromElements(productPriceObject);\nfor (String price : prices) {\n    webKeyword.verifyTrue(price.contains(\"₫\"), \"Giá không đúng định dạng tiền Việt Nam\");\n}\n\n// Kiểm tra thứ tự sắp xếp theo bảng chữ cái\nList<String> categoryNames = webKeyword.getTextFromElements(categoryListObject);\nList<String> sortedNames = new ArrayList<>(categoryNames);\nCollections.sort(sortedNames);\nwebKeyword.verifyEqual(categoryNames, sortedNames, \"Danh mục không được sắp xếp theo bảng chữ cái\");\n\n// Tìm kiếm một giá trị cụ thể trong danh sách\nList<String> menuItems = webKeyword.getTextFromElements(menuItemObject);\nboolean hasLogout = menuItems.stream().anyMatch(item -> item.contains(\"Đăng xuất\"));\nwebKeyword.verifyTrue(hasLogout, \"Menu không chứa tùy chọn đăng xuất\");\n\n// Lấy và xử lý danh sách lỗi\nwebKeyword.click(submitButtonObject); // Gửi form không hợp lệ\nList<String> errorMessages = webKeyword.getTextFromElements(errorMessageObject);\nwebKeyword.verifyGreaterThan(errorMessages.size(), 0, \"Không hiển thị thông báo lỗi\");\nwebKeyword.verifyTrue(errorMessages.stream().anyMatch(msg -> msg.contains(\"Email\")), \"Không có lỗi về email\");",
  "returnValue" : "List<String>: Danh sách các chuỗi văn bản từ các phần tử tìm thấy",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Locator của đối tượng giao diện phải hợp lệ", "Các phần tử cần lấy văn bản phải tồn tại trong DOM" ],
  "exceptions" : [ "NoSuchElementException: Nếu không tìm thấy phần tử nào khớp với locator", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM trong quá trình xử lý", "TimeoutException: Nếu các phần tử không xuất hiện trong thời gian chờ", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "getter", "text", "list", "collection", "multiple", "read", "extract", "information", "elements" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "getTextFromElements",
  "returnType" : "List",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng giao diện đại diện cho các phần tử cần lấy văn bản."
  } ]
}, {
  "name" : "verifyOptionSelectedByLabelHard",
  "description" : "Khẳng định rằng tùy chọn có văn bản hiển thị (label) cụ thể đang được chọn trong dropdown.",
  "category" : "Web/Assert",
  "example" : "// Kiểm tra quốc gia đã chọn\nwebKeyword.selectByVisibleText(countryDropdown, \"Việt Nam\");\nwebKeyword.verifyOptionSelectedByLabelHard(countryDropdown, \"Việt Nam\");\n\n// Kiểm tra danh mục đã chọn\nwebKeyword.verifyOptionSelectedByLabelHard(categoryDropdown, \"Điện thoại\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần kiểm tra phải là thẻ select và tồn tại trong DOM" ],
  "exceptions" : [ "AssertionError: Nếu tùy chọn được chọn không khớp với tùy chọn mong đợi", "NoSuchElementException: Nếu không tìm thấy phần tử", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt", "UnexpectedTagNameException: Nếu phần tử không phải là thẻ select" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "assert", "verify", "hard", "dropdown", "select", "option", "combobox", "selected", "value" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyOptionSelectedByLabelHard",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử dropdown (thẻ select)."
  }, {
    "type" : "String",
    "name" : "expectedLabel",
    "description" : "Văn bản hiển thị của tùy chọn mong đợi."
  } ]
}, {
  "name" : "terminateApp",
  "description" : "Buộc dừng (kill) một tiến trình ứng dụng đang chạy. Khác với việc chỉ đưa ứng dụng về background, phương thức này thực sự kết thúc tiến trình của ứng dụng. Hữu ích khi cần kiểm tra khả năng khôi phục trạng thái của ứng dụng sau khi bị buộc dừng, hoặc để đảm bảo ứng dụng bắt đầu từ trạng thái sạch. Trả về true nếu ứng dụng đã được dừng thành công, false nếu ứng dụng không chạy.",
  "category" : "Mobile/AppLifecycle",
  "example" : "// Dừng ứng dụng đang test\nmobileKeyword.terminateApp(\"com.example.myapp\");\n\n// Dừng ứng dụng và khởi động lại để kiểm tra tính năng khôi phục\nmobileKeyword.terminateApp(\"com.example.myapp\");\nmobileKeyword.activateApp(\"com.example.myapp\");\n\n// Kiểm tra xử lý lỗi khi ứng dụng bị crash\nmobileKeyword.tap(crashButton); // Gây ra crash\nmobileKeyword.terminateApp(\"com.example.myapp\"); // Đảm bảo ứng dụng đã dừng\nmobileKeyword.activateApp(\"com.example.myapp\"); // Khởi động lại",
  "returnValue" : "boolean: True nếu ứng dụng đã được dừng thành công, false nếu ứng dụng không chạy",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium" ],
  "exceptions" : [ "WebDriverException: Nếu không thể dừng ứng dụng", "IllegalArgumentException: Nếu appId không hợp lệ" ],
  "platform" : "MOBILE",
  "systemImpact" : "MODIFY",
  "stability" : "STABLE",
  "tags" : [ "mobile", "app", "termination", "process" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "terminateApp",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "appId",
    "description" : "AppPackage (Android) hoặc BundleID (iOS) của ứng dụng cần dừng."
  } ]
}, {
  "name" : "assertTextContains",
  "description" : "Khẳng định rằng văn bản của một phần tử có chứa một chuỗi con. Khác với assertTextEquals, phương thức này chỉ kiểm tra sự xuất hiện của chuỗi con trong văn bản, không yêu cầu khớp hoàn toàn. Hữu ích khi nội dung có thể thay đổi nhưng vẫn chứa các phần quan trọng cần kiểm tra. Phương thức phân biệt chữ hoa/thường.",
  "category" : "Mobile/Assertion",
  "example" : "// Kiểm tra thông báo chào mừng có chứa tên người dùng\nmobileKeyword.assertTextContains(welcomeMessage, \"Xin chào\");\n\n// Xác minh thông báo lỗi có chứa thông tin về mật khẩu\nmobileKeyword.assertTextContains(errorMessage, \"mật khẩu không đúng\");\n\n// Kiểm tra thông báo xác nhận có chứa mã đơn hàng\nmobileKeyword.assertTextContains(confirmationMessage, \"ĐH12345\");\n\n// Kiểm tra tiêu đề trang có chứa từ khóa tìm kiếm\nmobileKeyword.sendText(searchInput, \"điện thoại samsung\");\nmobileKeyword.tap(searchButton);\nmobileKeyword.assertTextContains(searchResultTitle, \"samsung\");\n\n// Kiểm tra thông báo lỗi chứa mã lỗi cụ thể\nmobileKeyword.assertTextContains(errorDialog, \"ERR-1234\");",
  "returnValue" : "void: Không trả về giá trị, ném AssertionError nếu kiểm tra thất bại",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Phần tử cần kiểm tra phải tồn tại và có thuộc tính văn bản (text)", "Phần tử phải hiển thị trên màn hình để có thể đọc văn bản" ],
  "exceptions" : [ "AssertionError: Nếu văn bản của phần tử không chứa chuỗi con mong đợi", "NoSuchElementException: Nếu không tìm thấy phần tử", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM" ],
  "platform" : "MOBILE",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "mobile", "assertion", "text", "contains", "verification", "substring", "validation" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertTextContains",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra văn bản."
  }, {
    "type" : "String",
    "name" : "partialText",
    "description" : "Chuỗi con cần tìm trong văn bản của phần tử."
  } ]
}, {
  "name" : "assertElementPresent",
  "description" : "Khẳng định rằng một phần tử tồn tại trong cấu trúc DOM của màn hình, không nhất thiết phải hiển thị. Phương thức này kiểm tra ngay lập tức (timeout = 0) và ném AssertionError nếu phần tử không tồn tại. Lưu ý: Phương thức này chỉ kiểm tra sự tồn tại, không kiểm tra tính hiển thị của phần tử.",
  "category" : "Mobile/Assertion",
  "example" : "// Kiểm tra rằng nút đăng nhập tồn tại trên màn hình\nmobileKeyword.assertElementPresent(loginButton);\n\n// Xác minh rằng menu hamburger tồn tại trong header\nmobileKeyword.assertElementPresent(hamburgerMenu);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Đã xác định chính xác phần tử UI cần kiểm tra" ],
  "exceptions" : [ "AssertionError: Nếu phần tử không tồn tại trong DOM", "WebDriverException: Nếu có lỗi khi tương tác với trình điều khiển" ],
  "platform" : "MOBILE",
  "systemImpact" : "READ_ONLY",
  "stability" : "STABLE",
  "tags" : [ "mobile", "assertion", "element", "presence", "verification" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertElementPresent",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra sự tồn tại."
  } ]
}, {
  "name" : "verifyRecordExists",
  "description" : "Kiểm tra sự tồn tại của ít nhất một bản ghi thỏa mãn điều kiện trong câu truy vấn. Phương thức này thực thi câu lệnh SELECT và kiểm tra xem kết quả có trống không, sau đó so sánh với giá trị mong đợi.",
  "category" : "DB/Verification",
  "example" : "// Kiểm tra xem người dùng với email cụ thể có tồn tại không\ndatabaseKeyword.verifyRecordExists(\n    \"mysql_dev\", \n    \"SELECT * FROM users WHERE email = ?\", \n    true, // Mong đợi bản ghi tồn tại\n    \"john.doe@example.com\"\n);\n\n// Kiểm tra xem không có đơn hàng nào có trạng thái 'cancelled'\ndatabaseKeyword.verifyRecordExists(\n    \"mysql_dev\", \n    \"SELECT * FROM orders WHERE status = ?\", \n    false, // Mong đợi không có bản ghi nào\n    \"cancelled\"\n);",
  "returnValue" : "void: Không trả về giá trị, nhưng sẽ ném AssertionError nếu kiểm chứng thất bại",
  "prerequisites" : [ "Đã khởi tạo kết nối CSDL với profileName tương ứng" ],
  "exceptions" : [ "SQLException: Nếu có lỗi khi thực thi câu truy vấn", "AssertionError: Nếu kết quả kiểm chứng không khớp với giá trị mong đợi" ],
  "platform" : "ALL",
  "systemImpact" : "READ_ONLY",
  "stability" : "STABLE",
  "tags" : [ "database", "verification", "assertion" ],
  "className" : "com.vtnet.netat.db.keywords.DatabaseKeyword",
  "methodName" : "verifyRecordExists",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "profileName",
    "description" : "Tên của profile kết nối CSDL đã được khởi tạo trước đó."
  }, {
    "type" : "String",
    "name" : "query",
    "description" : "Câu lệnh SQL SELECT cần thực thi để kiểm tra sự tồn tại của bản ghi."
  }, {
    "type" : "boolean",
    "name" : "expectedExists",
    "description" : "Giá trị mong đợi: true nếu mong đợi bản ghi tồn tại, false nếu mong đợi không tồn tại."
  }, {
    "type" : "Object[]",
    "name" : "params",
    "description" : "Các tham số cần truyền vào câu truy vấn, theo thứ tự xuất hiện của các placeholder '?'."
  } ]
}, {
  "name" : "verifyAttributeContainsSoft",
  "description" : "Kiểm tra giá trị của một thuộc tính trên phần tử có chứa một chuỗi con hay không. Nếu không chứa, kịch bản sẽ ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Web/Assert",
  "example" : "// Kiểm tra thuộc tính style có chứa thông tin hiển thị\nwebKeyword.verifyAttributeContainsSoft(elementObject, \"style\", \"display: block\");\nwebKeyword.click(elementObject); // Tiếp tục thực hiện hành động\n\n// Kiểm tra nhiều thuộc tính của một phần tử\nwebKeyword.verifyAttributeContainsSoft(buttonObject, \"class\", \"btn\");\nwebKeyword.verifyAttributeContainsSoft(buttonObject, \"data-action\", \"submit\");\nwebKeyword.verifyAttributeContainsSoft(buttonObject, \"id\", \"save\");\nwebKeyword.click(buttonObject); // Tiếp tục thực hiện hành động\n\n// Kiểm tra thuộc tính của nhiều phần tử\nwebKeyword.verifyAttributeContainsSoft(menuItemObject1, \"class\", \"menu-item\");\nwebKeyword.verifyAttributeContainsSoft(menuItemObject2, \"class\", \"menu-item\");\nwebKeyword.verifyAttributeContainsSoft(activeMenuItemObject, \"class\", \"active\");\nwebKeyword.click(menuItemObject1); // Tiếp tục điều hướng\n\n// Kiểm tra thuộc tính placeholder có chứa hướng dẫn\nwebKeyword.verifyAttributeContainsSoft(searchInputObject, \"placeholder\", \"Tìm kiếm\");\nwebKeyword.sendKeys(searchInputObject, \"laptop\"); // Tiếp tục tìm kiếm\n\n// Kiểm tra thuộc tính alt của hình ảnh có chứa mô tả\nwebKeyword.verifyAttributeContainsSoft(productImageObject, \"alt\", \"Điện thoại\");\nwebKeyword.click(productImageObject); // Tiếp tục xem chi tiết sản phẩm",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần kiểm tra phải tồn tại trong DOM", "Thuộc tính cần kiểm tra phải tồn tại trên phần tử" ],
  "exceptions" : [ "NoSuchElementException: Nếu không tìm thấy phần tử", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "assert", "verify", "soft", "attribute", "property", "contains", "substring", "partial", "validation" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyAttributeContainsSoft",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra."
  }, {
    "type" : "String",
    "name" : "attribute",
    "description" : "Tên của thuộc tính (ví dụ: 'class')."
  }, {
    "type" : "String",
    "name" : "partialValue",
    "description" : "Chuỗi con mong đợi."
  } ]
}, {
  "name" : "getAlertText",
  "description" : "Chờ cho đến khi một hộp thoại alert, prompt, hoặc confirm của trình duyệt xuất hiện và lấy về nội dung văn bản của nó.",
  "category" : "Web/Alert",
  "example" : "// Lấy và kiểm tra nội dung thông báo xác nhận\nwebKeyword.click(deleteButtonObject);\nString alertMessage = webKeyword.getAlertText();\nif (alertMessage.contains(\"Bạn có chắc chắn muốn xóa?\")) {\n    webKeyword.acceptAlert();\n}\n\n// Lấy thông báo lỗi từ alert\nwebKeyword.click(submitButtonObject);\nString errorMessage = webKeyword.getAlertText();\nlogger.info(\"Thông báo lỗi: \" + errorMessage);",
  "returnValue" : "String: Nội dung văn bản của hộp thoại alert",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Một hộp thoại alert đang hiển thị hoặc sẽ xuất hiện" ],
  "exceptions" : [ "TimeoutException: Nếu không có hộp thoại alert xuất hiện trong thời gian chờ", "NoAlertPresentException: Nếu không có hộp thoại alert đang hiển thị", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "alert", "popup", "dialog", "text", "message", "javascript", "notification", "get" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "getAlertText",
  "returnType" : "String",
  "parameters" : [ ]
}, {
  "name" : "verifyTextContainsHard",
  "description" : "Kiểm tra văn bản của một phần tử có chứa một chuỗi con hay không. Nếu không chứa, kịch bản sẽ DỪNG LẠI.",
  "category" : "Web/Assert",
  "example" : "// Kiểm tra thông báo chào mừng có chứa tên người dùng\nwebKeyword.verifyTextContainsHard(welcomeMessageObject, \"Xin chào\");\n\n// Kiểm tra thông báo lỗi chứa thông tin về trường bắt buộc\nwebKeyword.click(submitButtonObject); // Gửi form không hợp lệ\nwebKeyword.verifyTextContainsHard(formErrorObject, \"bắt buộc\");\n\n// Kiểm tra mô tả sản phẩm có chứa từ khóa\nwebKeyword.click(productCardObject);\nwebKeyword.waitForElementVisible(productDescriptionObject);\nwebKeyword.verifyTextContainsHard(productDescriptionObject, \"chống nước\");\n\n// Kiểm tra tiêu đề trang có chứa tên công ty\nwebKeyword.verifyTextContainsHard(pageTitleObject, \"Example Corp\");\n\n// Kiểm tra kết quả tìm kiếm có chứa từ khóa đã tìm\nwebKeyword.sendKeys(searchInputObject, \"laptop\");\nwebKeyword.click(searchButtonObject);\nwebKeyword.waitForElementVisible(searchResultsObject);\nwebKeyword.verifyTextContainsHard(searchResultTitleObject, \"laptop\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần kiểm tra phải tồn tại trong DOM và có văn bản" ],
  "exceptions" : [ "AssertionError: Nếu văn bản của phần tử không chứa chuỗi con mong đợi", "NoSuchElementException: Nếu không tìm thấy phần tử", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "assert", "verify", "hard", "text", "content", "contains", "substring", "partial", "validation" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyTextContainsHard",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử chứa văn bản cần kiểm tra."
  }, {
    "type" : "String",
    "name" : "partialText",
    "description" : "Chuỗi văn bản con mong đợi."
  } ]
}, {
  "name" : "contextClick",
  "description" : "Thực hiện hành động click chuột phải vào một phần tử. Thường dùng để mở các menu ngữ cảnh (context menu).",
  "category" : "Web/Interaction",
  "example" : "// Click chuột phải vào biểu tượng file\nwebKeyword.contextClick(fileIconObject);\nwebKeyword.waitForElementVisible(contextMenuObject);\n\n// Click chuột phải vào hình ảnh để tải xuống\nwebKeyword.contextClick(productImageObject);\nwebKeyword.click(saveImageOptionObject);\n\n// Click chuột phải vào ô trong bảng\nwebKeyword.contextClick(tableCellObject);\nwebKeyword.click(editCellOptionObject);\n\n// Click chuột phải vào văn bản để sao chép\nwebKeyword.contextClick(selectedTextObject);\nwebKeyword.click(copyOptionObject);\n\n// Click chuột phải để mở menu tùy chọn nâng cao\nwebKeyword.contextClick(documentObject);\nwebKeyword.waitForElementVisible(advancedOptionsMenu);\nwebKeyword.click(propertiesOption);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần click phải tồn tại trong DOM", "Phần tử phải hiển thị và có thể tương tác được", "Phần tử không bị che khuất bởi các phần tử khác", "Trình duyệt phải hỗ trợ thao tác chuột phải (một số trình duyệt di động có thể không hỗ trợ)" ],
  "exceptions" : [ "ElementNotVisibleException: Nếu phần tử không hiển thị trên trang", "ElementNotInteractableException: Nếu phần tử không thể tương tác", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "TimeoutException: Nếu phần tử không xuất hiện trong thời gian chờ", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt", "MoveTargetOutOfBoundsException: Nếu phần tử nằm ngoài viewport hiện tại" ],
  "platform" : "WEB",
  "systemImpact" : "WRITE",
  "stability" : "STABLE",
  "tags" : [ "web", "interaction", "right-click", "context-click", "context-menu", "mouse", "action", "advanced" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "contextClick",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần thực hiện hành động click chuột phải."
  } ]
}, {
  "name" : "getElementWidth",
  "description" : "Lấy và trả về chiều rộng của một phần tử (tính bằng pixel). Hữu ích khi cần tính toán vị trí tương đối hoặc kiểm tra kích thước hiển thị của phần tử. Phương thức này trả về giá trị số nguyên đại diện cho chiều rộng theo pixel của phần tử. Lưu ý: Phần tử phải hiển thị trên màn hình để có thể lấy được kích thước chính xác.",
  "category" : "Mobile/Getter",
  "example" : "// Lấy chiều rộng của một nút\nint buttonWidth = mobileKeyword.getElementWidth(submitButton);\n\n// Kiểm tra xem phần tử có chiều rộng đúng không\nint bannerWidth = mobileKeyword.getElementWidth(promotionBanner);\nassert bannerWidth == DriverManager.getDriver().manage().window().getSize().width : \"Banner should be full width\";\n\n// Tính toán vị trí tap dựa trên chiều rộng\nint progressBarWidth = mobileKeyword.getElementWidth(progressBar);\nPoint location = progressBar.getLocation();\nmobileKeyword.tapByCoordinates(location.x + (int)(progressBarWidth * 0.7), location.y); // Tap at 70% of the progress bar\n\n// Kiểm tra độ rộng tương đối của các phần tử\nint containerWidth = mobileKeyword.getElementWidth(containerElement);\nint childWidth = mobileKeyword.getElementWidth(childElement);\nAssert.assertTrue(childWidth <= containerWidth, \"Phần tử con không được rộng hơn phần tử cha\");\n\n// Xác minh rằng nút đủ rộng để hiển thị văn bản\nint textWidth = mobileKeyword.getElementWidth(buttonText);\nint buttonWidth = mobileKeyword.getElementWidth(button);\nAssert.assertTrue(buttonWidth >= textWidth, \"Nút phải đủ rộng để hiển thị văn bản\");",
  "returnValue" : "int: Chiều rộng của phần tử tính bằng pixel",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Phần tử cần đo phải tồn tại và hiển thị trên màn hình", "Phần tử phải có kích thước xác định (không phải phần tử ẩn hoặc có kích thước 0)" ],
  "exceptions" : [ "NoSuchElementException: Nếu không tìm thấy phần tử", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "WebDriverException: Nếu không thể lấy kích thước của phần tử" ],
  "platform" : "MOBILE",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "mobile", "getter", "dimension", "width", "size", "measurement", "pixel", "layout", "calculation" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "getElementWidth",
  "returnType" : "int",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần lấy chiều rộng."
  } ]
}, {
  "name" : "takeScreenshot",
  "description" : "Chụp lại ảnh toàn bộ màn hình (viewport) của trình duyệt và lưu vào một file tại đường dẫn được chỉ định.",
  "category" : "Web/Utility",
  "example" : "// Chụp ảnh màn hình khi gặp lỗi\ntry {\n    webKeyword.click(submitButtonObject);\n    webKeyword.verifyElementVisibleHard(confirmationMessageObject, 5);\n} catch (Exception e) {\n    webKeyword.takeScreenshot(\"D:/test-reports/screenshots/submit_error_\" + System.currentTimeMillis() + \".png\");\n    throw e;\n}\n\n// Chụp ảnh màn hình để lưu trữ trạng thái\nwebKeyword.waitForPageLoaded();\nwebKeyword.takeScreenshot(\"D:/test-reports/screenshots/homepage.png\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Thư mục đích phải tồn tại hoặc có quyền tạo thư mục" ],
  "exceptions" : [ "RuntimeException: Nếu không thể chụp hoặc lưu ảnh màn hình", "IOException: Nếu có lỗi khi ghi file", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "screenshot", "debug", "evidence", "report", "image", "capture", "utility", "visual" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "takeScreenshot",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "filePath",
    "description" : "Đường dẫn đầy đủ để lưu file ảnh (ví dụ: 'C:/screenshots/error.png')."
  } ]
}, {
  "name" : "verifyElementDisabledSoft",
  "description" : "Kiểm tra một phần tử có đang ở trạng thái disabled hay không. Nếu không, kịch bản sẽ ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Web/Assert",
  "example" : "// Kiểm tra các tính năng bị khóa trong phiên bản dùng thử\nwebKeyword.verifyElementDisabledSoft(lockedFeatureButton);\nwebKeyword.verifyElementDisabledSoft(premiumFeatureButton);\nwebKeyword.verifyElementDisabledSoft(exportDataButton);\nwebKeyword.click(upgradeAccountButton); // Tiếp tục thực hiện hành động\n\n// Kiểm tra các trường không thể chỉnh sửa trong chế độ xem\nwebKeyword.click(viewModeButton);\nwebKeyword.verifyElementDisabledSoft(nameFieldInViewMode);\nwebKeyword.verifyElementDisabledSoft(emailFieldInViewMode);\nwebKeyword.verifyElementDisabledSoft(phoneFieldInViewMode);\nwebKeyword.click(editModeButton); // Chuyển sang chế độ chỉnh sửa\n\n// Kiểm tra nút tiếp theo bị vô hiệu hóa khi chưa hoàn thành bước hiện tại\nwebKeyword.verifyElementDisabledSoft(nextStepButtonObject);\nwebKeyword.sendKeys(requiredFieldObject, \"Thông tin bắt buộc\"); // Điền thông tin\nwebKeyword.click(nextStepButtonObject); // Tiếp tục quy trình\n\n// Kiểm tra các tùy chọn không khả dụng dựa trên lựa chọn hiện tại\nwebKeyword.click(option1RadioButton);\nwebKeyword.verifyElementDisabledSoft(subOption2ForOption1);\nwebKeyword.verifyElementDisabledSoft(subOption3ForOption1);\nwebKeyword.click(subOption1ForOption1); // Chọn tùy chọn phụ khả dụng\n\n// Kiểm tra các nút điều hướng trong phân trang\nwebKeyword.verifyElementDisabledSoft(previousPageButtonOnFirstPage);\nwebKeyword.click(nextPageButton); // Chuyển đến trang tiếp theo",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần kiểm tra phải tồn tại trong DOM" ],
  "exceptions" : [ "NoSuchElementException: Nếu không tìm thấy phần tử", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "assert", "verify", "soft", "enabled", "disabled", "state", "interactive", "button", "input" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyElementDisabledSoft",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra."
  } ]
}, {
  "name" : "takeElementScreenshot",
  "description" : "Chụp ảnh chỉ riêng một phần tử cụ thể trên trang và lưu vào file tại đường dẫn được chỉ định.",
  "category" : "Web/Utility",
  "example" : "// Chụp ảnh phần tử để kiểm tra hiển thị\nwebKeyword.waitForElementVisible(loginFormObject, 10);\nwebKeyword.takeElementScreenshot(loginFormObject, \"D:/screenshots/login_form.png\");\n\n// Chụp ảnh phần tử khi gặp lỗi hiển thị\nif (!webKeyword.verifyElementTextContains(errorMessageObject, \"Invalid credentials\")) {\n    webKeyword.takeElementScreenshot(errorMessageObject, \"D:/screenshots/unexpected_error_\" + System.currentTimeMillis() + \".png\");\n}",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần chụp phải hiển thị trên màn hình", "Thư mục đích phải tồn tại hoặc có quyền tạo thư mục" ],
  "exceptions" : [ "NoSuchElementException: Nếu không tìm thấy phần tử", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "ElementNotVisibleException: Nếu phần tử không hiển thị", "RuntimeException: Nếu không thể chụp hoặc lưu ảnh phần tử", "IOException: Nếu có lỗi khi ghi file", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "screenshot", "element", "debug", "evidence", "report", "image", "capture", "utility", "visual" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "takeElementScreenshot",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần chụp ảnh."
  }, {
    "type" : "String",
    "name" : "filePath",
    "description" : "Đường dẫn đầy đủ để lưu file ảnh."
  } ]
}, {
  "name" : "selectRadioByValue",
  "description" : "Chọn một radio button trong một nhóm các radio button dựa trên giá trị của thuộc tính 'value'.",
  "category" : "Web/Interaction",
  "example" : "// Chọn radio button giới tính nữ\nwebKeyword.selectRadioByValue(genderRadioGroup, \"female\");\nwebKeyword.verifyElementAttribute(genderRadioGroup + \"[@value='female']\", \"checked\", \"true\");\n\n// Chọn phương thức thanh toán\nwebKeyword.selectRadioByValue(paymentMethodRadioGroup, \"credit_card\");\nwebKeyword.waitForElementVisible(creditCardFormObject);\n\n// Chọn gói dịch vụ\nwebKeyword.selectRadioByValue(servicePlanRadioGroup, \"premium\");\nwebKeyword.verifyElementText(planPriceObject, \"$99.99\");\n\n// Chọn phương thức giao hàng\nwebKeyword.selectRadioByValue(shippingMethodRadioGroup, \"express\");\nwebKeyword.waitForElementAttributeChange(totalPriceObject, \"data-value\", \"129.99\");\n\n// Chọn radio button và kiểm tra các phần tử liên quan\nwebKeyword.selectRadioByValue(accountTypeRadioGroup, \"business\");\nwebKeyword.waitForElementVisible(businessDetailsFormObject);\nwebKeyword.verifyElementNotVisible(personalDetailsFormObject);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Nhóm radio button phải tồn tại trong DOM", "Ít nhất một radio button trong nhóm phải có thuộc tính 'value' khớp với giá trị cần chọn", "Phần tử phải hiển thị và có thể tương tác được" ],
  "exceptions" : [ "NoSuchElementException: Nếu không tìm thấy radio button với value chỉ định", "ElementNotVisibleException: Nếu phần tử không hiển thị trên trang", "ElementNotInteractableException: Nếu phần tử không thể tương tác", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "TimeoutException: Nếu phần tử không xuất hiện trong thời gian chờ", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "WRITE",
  "stability" : "STABLE",
  "tags" : [ "web", "interaction", "radio", "button", "select", "value", "form", "choose", "option", "group" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "selectRadioByValue",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đại diện cho nhóm radio button (ví dụ locator chung là '//input[@name=\"gender\"]')."
  }, {
    "type" : "String",
    "name" : "value",
    "description" : "Giá trị trong thuộc tính 'value' của radio button cần chọn."
  } ]
}, {
  "name" : "tap",
  "description" : "Thực hiện một hành động chạm (tap) vào một phần tử trên màn hình. Đây là thao tác tương đương với click trên web nhưng được tối ưu cho thiết bị di động. Phương thức này sẽ đợi phần tử hiển thị và có thể tương tác trước khi thực hiện chạm.",
  "category" : "Mobile/Interaction",
  "example" : "// Chạm vào nút đăng nhập\nmobileKeyword.tap(loginButtonObject);\n\n// Chạm vào menu hamburger để mở navigation drawer\nmobileKeyword.tap(menuButton);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Phần tử UI cần tương tác phải hiển thị trên màn hình" ],
  "exceptions" : [ "ElementNotVisibleException: Nếu phần tử không hiển thị", "NoSuchElementException: Nếu không tìm thấy phần tử", "ElementNotInteractableException: Nếu phần tử không thể tương tác" ],
  "platform" : "MOBILE",
  "systemImpact" : "MODIFY",
  "stability" : "STABLE",
  "tags" : [ "mobile", "interaction", "tap", "touch" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "tap",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần chạm vào."
  } ]
}, {
  "name" : "assertEnabled",
  "description" : "Khẳng định rằng một phần tử đang ở trạng thái có thể tương tác (enabled). Phương thức này kiểm tra thuộc tính 'enabled' của phần tử và ném AssertionError nếu phần tử bị vô hiệu hóa (disabled). Hữu ích khi cần đảm bảo một nút hoặc trường nhập liệu có thể tương tác được trước khi thực hiện các thao tác tiếp theo.",
  "category" : "Mobile/Assertion",
  "example" : "// Kiểm tra rằng nút đăng nhập đã được kích hoạt sau khi nhập thông tin\nmobileKeyword.sendText(usernameInput, \"user@example.com\");\nmobileKeyword.sendText(passwordInput, \"password123\");\nmobileKeyword.assertEnabled(loginButton);\n\n// Xác minh rằng nút tiếp tục đã được kích hoạt sau khi hoàn thành biểu mẫu\nmobileKeyword.tap(agreeToTermsCheckbox);\nmobileKeyword.assertEnabled(continueButton);\n\n// Kiểm tra rằng trường nhập liệu đã được kích hoạt sau khi chọn tùy chọn\nmobileKeyword.tap(customAmountOption);\nmobileKeyword.assertEnabled(amountInput);\n\n// Kiểm tra rằng nút thanh toán được kích hoạt sau khi chọn phương thức thanh toán\nmobileKeyword.tap(creditCardOption);\nmobileKeyword.assertEnabled(payButton);\n\n// Kiểm tra rằng nút gửi được kích hoạt sau khi điền đủ thông tin bắt buộc\nmobileKeyword.sendText(nameField, \"Nguyễn Văn A\");\nmobileKeyword.sendText(phoneField, \"0912345678\");\nmobileKeyword.assertEnabled(submitButton);",
  "returnValue" : "void: Không trả về giá trị, ném AssertionError nếu kiểm tra thất bại",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Phần tử cần kiểm tra phải tồn tại và có thuộc tính 'enabled'", "Phần tử phải là loại có thể được kích hoạt/vô hiệu hóa (button, input, etc.)" ],
  "exceptions" : [ "AssertionError: Nếu phần tử đang ở trạng thái bị vô hiệu hóa (disabled)", "NoSuchElementException: Nếu không tìm thấy phần tử", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "WebDriverException: Nếu không thể lấy thuộc tính 'enabled' của phần tử" ],
  "platform" : "MOBILE",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "mobile", "assertion", "enabled", "interactive", "button", "input", "state", "active" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertEnabled",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra trạng thái."
  } ]
}, {
  "name" : "findElements",
  "description" : "Tìm và trả về một danh sách (List) tất cả các phần tử WebElement khớp với locator được cung cấp. Trả về danh sách rỗng nếu không tìm thấy, không ném ra exception.",
  "category" : "Web/Finder",
  "example" : "// Lấy danh sách tất cả các sản phẩm\nList<WebElement> productList = webKeyword.findElements(productListItemObject);\n\n// Đếm số lượng kết quả tìm kiếm\nint resultCount = webKeyword.findElements(searchResultObject).size();\nSystem.out.println(\"Tìm thấy \" + resultCount + \" kết quả\");\n\n// Lặp qua danh sách các phần tử để xử lý\nList<WebElement> rows = webKeyword.findElements(tableRowObject);\nfor (WebElement row : rows) {\n    String text = row.getText();\n    if (text.contains(\"Khuyến mãi\")) {\n        row.click();\n        break;\n    }\n}\n\n// Kiểm tra danh sách rỗng\nList<WebElement> errorMessages = webKeyword.findElements(errorObject);\nAssert.assertTrue(errorMessages.isEmpty(), \"Không nên có lỗi hiển thị\");",
  "returnValue" : "List<WebElement>: Danh sách các phần tử web khớp với locator, hoặc danh sách rỗng nếu không tìm thấy phần tử nào",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Đối tượng ObjectUI phải có ít nhất một locator được định nghĩa" ],
  "exceptions" : [ "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt", "InvalidSelectorException: Nếu locator không hợp lệ", "NullPointerException: Nếu uiObject là null hoặc không có locator nào được kích hoạt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "finder", "elements", "collection", "list", "locate", "search", "multiple" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "findElements",
  "returnType" : "List",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng giao diện đại diện cho các phần tử cần tìm."
  } ]
}, {
  "name" : "verifyTextMatchesRegexHard",
  "description" : "Kiểm tra văn bản của một phần tử có khớp với một biểu thức chính quy (regex) hay không. Nếu không khớp, kịch bản sẽ DỪNG LẠI.",
  "category" : "Web/Assert",
  "example" : "// Kiểm tra mã đơn hàng có đúng định dạng\nwebKeyword.click(viewOrderButtonObject);\nwebKeyword.waitForElementVisible(orderIdObject);\nwebKeyword.verifyTextMatchesRegexHard(orderIdObject, \"^DH-\\d{5}$\"); // Khớp với DH-12345\n\n// Kiểm tra số điện thoại có đúng định dạng\nwebKeyword.verifyTextMatchesRegexHard(phoneNumberObject, \"^(\\\\+84|0)[0-9]{9,10}$\");\n\n// Kiểm tra mã sản phẩm có đúng định dạng\nwebKeyword.click(productDetailsButtonObject);\nwebKeyword.waitForElementVisible(productCodeObject);\nwebKeyword.verifyTextMatchesRegexHard(productCodeObject, \"^SP-[A-Z]{2}-\\d{4}$\"); // Khớp với SP-DT-1234\n\n// Kiểm tra định dạng ngày tháng\nwebKeyword.verifyTextMatchesRegexHard(orderDateObject, \"^\\d{2}/\\d{2}/\\d{4}$\"); // Khớp với 01/01/2023\n\n// Kiểm tra định dạng giá tiền\nwebKeyword.verifyTextMatchesRegexHard(priceObject, \"^\\d{1,3}(,\\d{3})*(\\.\\d{1,2})?₫$\"); // Khớp với 1,000,000₫",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần kiểm tra phải tồn tại trong DOM và có văn bản" ],
  "exceptions" : [ "AssertionError: Nếu văn bản không khớp với biểu thức chính quy", "NoSuchElementException: Nếu không tìm thấy phần tử", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt", "PatternSyntaxException: Nếu biểu thức chính quy không hợp lệ" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "assert", "verify", "hard", "text", "regex", "pattern", "format", "validation", "regular expression" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyTextMatchesRegexHard",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử chứa văn bản cần kiểm tra."
  }, {
    "type" : "String",
    "name" : "pattern",
    "description" : "Biểu thức chính quy để so khớp."
  } ]
}, {
  "name" : "clear",
  "description" : "Xóa văn bản trong một ô input có thể chỉnh sửa. Chỉ áp dụng cho các phần tử có thuộc tính 'editable' là true như TextField, EditText. Không hoạt động với các phần tử không phải là trường nhập liệu.",
  "category" : "Mobile/Interaction",
  "example" : "// Xóa văn bản trong ô tìm kiếm\nmobileKeyword.clear(searchInput);\n\n// Xóa nội dung trong ô email trước khi nhập giá trị mới\nmobileKeyword.clear(emailInput);\nmobileKeyword.sendText(emailInput, \"new.email@example.com\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Phần tử UI cần phải là trường nhập liệu có thể chỉnh sửa" ],
  "exceptions" : [ "ElementNotVisibleException: Nếu phần tử không hiển thị", "NoSuchElementException: Nếu không tìm thấy phần tử", "ElementNotInteractableException: Nếu phần tử không thể tương tác hoặc không phải trường nhập liệu" ],
  "platform" : "MOBILE",
  "systemImpact" : "MODIFY",
  "stability" : "STABLE",
  "tags" : [ "mobile", "interaction", "clear", "input" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "clear",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử input cần xóa văn bản."
  } ]
}, {
  "name" : "switchToDefaultContent",
  "description" : "Chuyển sự điều khiển của WebDriver ra khỏi tất cả các iframe và quay về nội dung chính, cấp cao nhất của trang web.",
  "category" : "Web/Window&Frame",
  "example" : "// Thoát khỏi tất cả các iframe và quay về nội dung chính\nwebKeyword.switchToFrame(paymentIframeObject);\nwebKeyword.sendKeys(cardNumberObject, \"4111111111111111\");\nwebKeyword.click(submitPaymentObject);\nwebKeyword.switchToDefaultContent(); // Quay về nội dung chính\nwebKeyword.waitForElementVisible(confirmationMessageObject);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động" ],
  "exceptions" : [ "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "NAVIGATION",
  "stability" : "STABLE",
  "tags" : [ "web", "iframe", "frame", "navigation", "switch", "context", "main", "root", "default" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "switchToDefaultContent",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "waitForTitleIs",
  "description" : "Tạm dừng kịch bản cho đến khi tiêu đề của trang hiện tại khớp chính xác với chuỗi được chỉ định.",
  "category" : "Web/Wait",
  "example" : "// Chờ tiêu đề trang sau khi tải xuống hoàn tất\nwebKeyword.click(downloadButtonObject);\nwebKeyword.waitForTitleIs(\"Tải xuống hoàn tất\", 20);\nwebKeyword.verifyElementVisible(downloadCompleteMessageObject);\n\n// Chờ tiêu đề trang sau khi đăng nhập thành công\nwebKeyword.sendKeys(usernameInputObject, \"testuser\");\nwebKeyword.sendKeys(passwordInputObject, \"password123\");\nwebKeyword.click(loginButtonObject);\nwebKeyword.waitForTitleIs(\"Bảng điều khiển người dùng\", 15);\nwebKeyword.verifyElementVisible(dashboardWidgetsObject);\n\n// Chờ tiêu đề trang sau khi chuyển tab\nwebKeyword.click(profileTabObject);\nwebKeyword.waitForTitleIs(\"Thông tin cá nhân\", 10);\nwebKeyword.verifyElementVisible(profileFormObject);\n\n// Chờ tiêu đề trang sau khi hoàn thành một quy trình\nwebKeyword.click(completeOrderButtonObject);\nwebKeyword.waitForTitleIs(\"Đặt hàng thành công\", 30);\nwebKeyword.verifyElementVisible(orderConfirmationObject);\n\n// Chờ tiêu đề trang sau khi chuyển ngôn ngữ\nwebKeyword.click(languageSelectorObject);\nwebKeyword.click(englishOptionObject);\nwebKeyword.waitForTitleIs(\"Welcome to our website\", 15);\nwebKeyword.verifyElementVisible(englishContentObject);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Tiêu đề trang sẽ thay đổi thành giá trị mong đợi trong khoảng thời gian chờ" ],
  "exceptions" : [ "TimeoutException: Nếu tiêu đề trang không khớp với giá trị mong đợi trong thời gian chờ", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "wait", "synchronization", "title", "page", "exact", "match", "header", "timeout", "browser" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "waitForTitleIs",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "expectedTitle",
    "description" : "Tiêu đề trang mong đợi."
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa (tính bằng giây)."
  } ]
}, {
  "name" : "waitForClickable",
  "description" : "Chờ cho đến khi một phần tử sẵn sàng để được chạm vào (clickable/tappable) hoặc cho đến khi hết thời gian chờ. Phần tử được coi là clickable khi nó hiển thị và có thể tương tác được (không bị disabled). Khác với waitForVisible, phương thức này còn kiểm tra khả năng tương tác của phần tử. Nếu phần tử không clickable sau khi hết thời gian chờ, một TimeoutException sẽ được ném ra.",
  "category" : "Mobile/Wait",
  "example" : "// Chờ nút đăng nhập có thể nhấn sau khi nhập đủ thông tin\nmobileKeyword.sendText(usernameInput, \"user@example.com\");\nmobileKeyword.sendText(passwordInput, \"password123\");\nmobileKeyword.waitForClickable(loginButton, 5);\nmobileKeyword.tap(loginButton);\n\n// Chờ nút tiếp tục có thể nhấn sau khi hoàn thành xử lý\nmobileKeyword.tap(processButton);\nmobileKeyword.waitForClickable(continueButton, 10);\nmobileKeyword.tap(continueButton);\n\n// Chờ nút thanh toán có thể nhấn sau khi chọn phương thức thanh toán\nmobileKeyword.tap(creditCardOption);\nmobileKeyword.waitForClickable(payButton, 3);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Đã xác định chính xác phần tử UI cần chờ đợi" ],
  "exceptions" : [ "TimeoutException: Nếu phần tử không trở nên clickable trong thời gian chờ đợi", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "NoSuchElementException: Nếu không tìm thấy phần tử trong DOM" ],
  "platform" : "MOBILE",
  "systemImpact" : "READ_ONLY",
  "stability" : "STABLE",
  "tags" : [ "mobile", "wait", "clickable", "interactable", "synchronization" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "waitForClickable",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần chờ sẵn sàng để tương tác."
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian tối đa (giây) để chờ phần tử có thể tương tác."
  } ]
}, {
  "name" : "resizeWindow",
  "description" : "Thay đổi kích thước của cửa sổ trình duyệt hiện tại theo chiều rộng và chiều cao được chỉ định.",
  "category" : "Web/Browser",
  "example" : "// Thay đổi kích thước cửa sổ thành HD (720p)\nwebKeyword.resizeWindow(1280, 720);\n\n// Thay đổi kích thước thành Full HD\nwebKeyword.resizeWindow(1920, 1080);\n\n// Mô phỏng kích thước màn hình tablet\nwebKeyword.resizeWindow(768, 1024);\nwebKeyword.verifyElementVisible(tabletMenuIcon);\n\n// Mô phỏng kích thước điện thoại di động\nwebKeyword.resizeWindow(375, 667); // iPhone 8\nwebKeyword.verifyElementVisible(mobileNavigation);\n\n// Kiểm tra tính năng responsive\nwebKeyword.resizeWindow(1200, 800);\nwebKeyword.verifyElementVisible(desktopMenu);\nwebKeyword.resizeWindow(600, 800);\nwebKeyword.verifyElementNotVisible(desktopMenu);\nwebKeyword.verifyElementVisible(mobileMenu);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Trình duyệt phải hỗ trợ thay đổi kích thước cửa sổ", "Kích thước yêu cầu phải nằm trong giới hạn hợp lý (lớn hơn 0 và nhỏ hơn kích thước màn hình vật lý)" ],
  "exceptions" : [ "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt", "NoSuchSessionException: Nếu phiên WebDriver không còn hợp lệ", "UnsupportedOperationException: Nếu trình duyệt không hỗ trợ thay đổi kích thước", "IllegalArgumentException: Nếu chiều rộng hoặc chiều cao là số âm" ],
  "platform" : "WEB",
  "systemImpact" : "WRITE",
  "stability" : "STABLE",
  "tags" : [ "web", "browser", "window", "resize", "dimension", "responsive", "viewport", "size", "width", "height" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "resizeWindow",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "int",
    "name" : "width",
    "description" : "Chiều rộng mới của cửa sổ (pixel)."
  }, {
    "type" : "int",
    "name" : "height",
    "description" : "Chiều cao mới của cửa sổ (pixel)."
  } ]
}, {
  "name" : "goForward",
  "description" : "Thực hiện hành động đi tới trang tiếp theo trong lịch sử của trình duyệt, tương đương với việc người dùng nhấn nút 'Forward'.",
  "category" : "Web/Browser",
  "example" : "// Điều hướng qua lại giữa các trang\nwebKeyword.openUrl(\"https://example.com/page1\");\nwebKeyword.openUrl(\"https://example.com/page2\");\nwebKeyword.goBack(); // Quay lại page1\nwebKeyword.goForward(); // Tiến tới page2 lần nữa\n\n// Kiểm tra luồng điều hướng\nwebKeyword.click(productLink);\nwebKeyword.waitForPageLoaded();\nwebKeyword.goBack();\nwebKeyword.waitForPageLoaded();\nwebKeyword.goForward();\nwebKeyword.verifyElementPresent(productDetail);\n\n// Kiểm tra URL sau khi đi tới\nwebKeyword.goForward();\nString currentUrl = DriverManager.getDriver().getCurrentUrl();\nAssert.assertTrue(currentUrl.contains(\"/expected-forward-page\"));",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phải đã sử dụng goBack() hoặc có trang tiếp theo trong lịch sử điều hướng" ],
  "exceptions" : [ "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt", "NoSuchSessionException: Nếu phiên WebDriver không còn hợp lệ" ],
  "platform" : "WEB",
  "systemImpact" : "WRITE",
  "stability" : "STABLE",
  "tags" : [ "web", "browser", "navigation", "forward", "history", "next", "advance" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "goForward",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "getValueFromJson",
  "description" : "Lấy một giá trị từ một chuỗi JSON bằng cách sử dụng cú pháp JSON Pointer. JSON Pointer là một chuỗi bắt đầu bằng dấu gạch chéo (/) và tiếp theo là tên thuộc tính, cho phép truy cập vào các phần tử lồng nhau trong cấu trúc JSON.",
  "category" : "Utility/String",
  "example" : "// Giả sử có chuỗi JSON: {\"data\":{\"user\":{\"name\":\"John Doe\",\"age\":30}}}\nString userName = utilityKeyword.getValueFromJson(jsonString, \"/data/user/name\");\n// userName sẽ có giá trị \"John Doe\"",
  "returnValue" : "String: Giá trị được truy xuất dưới dạng chuỗi, hoặc null nếu không tìm thấy",
  "prerequisites" : [ ],
  "exceptions" : [ "JsonProcessingException: Nếu chuỗi JSON không hợp lệ", "IllegalArgumentException: Nếu JSON Pointer không hợp lệ" ],
  "platform" : "ALL",
  "systemImpact" : "READ_ONLY",
  "stability" : "STABLE",
  "tags" : [ "json", "parsing", "data-extraction" ],
  "className" : "com.vtnet.netat.core.keywords.UtilityKeyword",
  "methodName" : "getValueFromJson",
  "returnType" : "String",
  "parameters" : [ {
    "type" : "String",
    "name" : "jsonString",
    "description" : "Chuỗi JSON nguồn cần truy vấn."
  }, {
    "type" : "String",
    "name" : "jsonPointer",
    "description" : "Đường dẫn đến giá trị cần lấy theo cú pháp JSON Pointer (ví dụ: '/user/name', '/data/0/id')."
  } ]
}, {
  "name" : "startBrowser",
  "description" : "Khởi tạo và mở một phiên trình duyệt (web) hoặc thiết bị (mobile) mới dựa trên cấu hình trong file properties. Tham số platform cho phép chỉ định loại trình duyệt hoặc thiết bị cụ thể cần khởi tạo.",
  "category" : "Session/Lifecycle",
  "example" : "// Chỉ định khởi tạo trình duyệt Firefox\ndriverKeyword.startBrowser(\"firefox\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "File cấu hình properties phải tồn tại và chứa các thiết lập cần thiết cho nền tảng được chỉ định" ],
  "exceptions" : [ "WebDriverException: Nếu không thể khởi tạo driver", "ConfigurationException: Nếu thiếu thông tin cấu hình cần thiết", "IllegalArgumentException: Nếu nền tảng được chỉ định không được hỗ trợ" ],
  "platform" : "ALL",
  "systemImpact" : "MODIFY",
  "stability" : "STABLE",
  "tags" : [ "browser", "session", "initialization", "custom-platform" ],
  "className" : "com.vtnet.netat.core.keywords.DriverKeyword",
  "methodName" : "startBrowser",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "platform",
    "description" : "Tên nền tảng cần khởi tạo (ví dụ: 'chrome', 'firefox', 'android', 'ios')."
  } ]
}, {
  "name" : "assertTextWithOptions",
  "description" : "So sánh văn bản của phần tử với nhiều tùy chọn linh hoạt: có thể bỏ qua sự khác biệt giữa chữ hoa/thường và/hoặc cắt khoảng trắng ở đầu/cuối. Hữu ích khi cần kiểm tra nội dung mà không quan tâm đến định dạng chính xác. Nếu văn bản không khớp theo các tùy chọn đã chọn, một AssertionError sẽ được ném ra.",
  "category" : "Mobile/Assertion",
  "example" : "// Kiểm tra nội dung chào mừng, bỏ qua chữ hoa/thường và khoảng trắng\nmobileKeyword.assertTextWithOptions(welcomeMessage, \"  xin chào, Người Dùng \", true, true);\n\n// Kiểm tra mã xác minh, chỉ bỏ qua khoảng trắng nhưng vẫn phân biệt chữ hoa/thường\nmobileKeyword.assertTextWithOptions(verificationCode, \" ABC123 \", false, true);\n\n// Kiểm tra thông báo lỗi, bỏ qua chữ hoa/thường nhưng giữ nguyên khoảng trắng\nmobileKeyword.assertTextWithOptions(errorMessage, \"Lỗi kết nối\", true, false);\n\n// Kiểm tra nội dung động có thể thay đổi định dạng\nString expectedName = \"NGUYỄN VĂN A\";\nmobileKeyword.assertTextWithOptions(userNameDisplay, expectedName, true, true);\n\n// Kiểm tra địa chỉ email không phân biệt chữ hoa/thường\nmobileKeyword.assertTextWithOptions(emailField, \"User@Example.com\", true, true);",
  "returnValue" : "void: Không trả về giá trị, ném AssertionError nếu kiểm tra thất bại",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Phần tử cần kiểm tra phải tồn tại và có thuộc tính văn bản (text)", "Phần tử phải hiển thị trên màn hình để có thể đọc văn bản" ],
  "exceptions" : [ "AssertionError: Nếu văn bản không khớp theo các tùy chọn đã chọn", "NoSuchElementException: Nếu không tìm thấy phần tử", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "WebDriverException: Nếu không thể lấy văn bản của phần tử", "NullPointerException: Nếu văn bản của phần tử là null và expectedText không phải null" ],
  "platform" : "MOBILE",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "mobile", "assertion", "text", "flexible", "ignoreCase", "trim", "comparison", "verification", "content" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertTextWithOptions",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra văn bản."
  }, {
    "type" : "String",
    "name" : "expectedText",
    "description" : "Chuỗi văn bản mong đợi."
  }, {
    "type" : "boolean",
    "name" : "ignoreCase",
    "description" : "true để bỏ qua sự khác biệt giữa chữ hoa/thường, false để phân biệt."
  }, {
    "type" : "boolean",
    "name" : "trimText",
    "description" : "true để cắt khoảng trắng ở đầu/cuối trước khi so sánh, false để giữ nguyên."
  } ]
}, {
  "name" : "getPageTitle",
  "description" : "Lấy và trả về tiêu đề (title) của trang web hiện tại.",
  "category" : "Web/Getter",
  "example" : "// Kiểm tra tiêu đề trang sau khi điều hướng\nwebKeyword.navigateToUrl(\"https://example.com/about\");\nString pageTitle = webKeyword.getPageTitle();\nwebKeyword.verifyEqual(pageTitle, \"Về chúng tôi - Example Company\");\n\n// Kiểm tra tiêu đề trang sau khi tìm kiếm\nwebKeyword.sendKeys(searchInputObject, \"laptop\");\nwebKeyword.click(searchButtonObject);\nwebKeyword.waitForPageToLoad();\nString searchResultTitle = webKeyword.getPageTitle();\nwebKeyword.verifyContains(searchResultTitle, \"Kết quả tìm kiếm cho: laptop\");\n\n// Kiểm tra tiêu đề trang sau khi đăng nhập\nwebKeyword.sendKeys(usernameInputObject, \"testuser\");\nwebKeyword.sendKeys(passwordInputObject, \"password123\");\nwebKeyword.click(loginButtonObject);\nwebKeyword.waitForPageToLoad();\nString dashboardTitle = webKeyword.getPageTitle();\nwebKeyword.verifyEqual(dashboardTitle, \"Bảng điều khiển người dùng\");\n\n// Lưu tiêu đề trang để kiểm tra sau\nString originalTitle = webKeyword.getPageTitle();\nwebKeyword.click(tabObject);\nwebKeyword.waitForPageToLoad();\nString newTitle = webKeyword.getPageTitle();\nwebKeyword.verifyNotEqual(originalTitle, newTitle);\n\n// Kiểm tra tiêu đề trang động\nwebKeyword.click(productLinkObject);\nwebKeyword.waitForPageToLoad();\nString productTitle = webKeyword.getPageTitle();\nwebKeyword.verifyContains(productTitle, \"Sản phẩm:\");",
  "returnValue" : "String: Tiêu đề của trang web hiện tại",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động" ],
  "exceptions" : [ "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt", "NoSuchSessionException: Nếu phiên WebDriver không còn hợp lệ" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "getter", "title", "page", "header", "read", "extract", "information", "browser", "metadata" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "getPageTitle",
  "returnType" : "String",
  "parameters" : [ ]
}, {
  "name" : "backgroundApp",
  "description" : "Đưa ứng dụng hiện tại về chạy nền trong một khoảng thời gian xác định, sau đó tự động đưa lại lên foreground. Hữu ích để kiểm tra khả năng lưu trữ và khôi phục trạng thái của ứng dụng, hoặc để mô phỏng việc người dùng tạm thời chuyển sang ứng dụng khác. Lưu ý: Nếu thời gian là -1, ứng dụng sẽ ở chế độ nền cho đến khi được kích hoạt lại bằng activateApp.",
  "category" : "Mobile/AppLifecycle",
  "example" : "// Đưa ứng dụng về nền trong 5 giây để kiểm tra khả năng lưu trạng thái\nmobileKeyword.sendText(noteInput, \"Ghi chú quan trọng\");\nmobileKeyword.backgroundApp(5);\nmobileKeyword.assertTextEquals(noteInput, \"Ghi chú quan trọng\"); // Kiểm tra dữ liệu còn nguyên\n\n// Mô phỏng việc chuyển sang ứng dụng khác và quay lại\nmobileKeyword.backgroundApp(10);\n\n// Đưa ứng dụng về nền vô thời hạn và sau đó kích hoạt lại thủ công\nmobileKeyword.backgroundApp(-1);\n// Thực hiện các thao tác khác...\nmobileKeyword.activateApp(\"com.example.myapp\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Ứng dụng đang chạy ở foreground" ],
  "exceptions" : [ "WebDriverException: Nếu không thể đưa ứng dụng về background" ],
  "platform" : "MOBILE",
  "systemImpact" : "MODIFY",
  "stability" : "STABLE",
  "tags" : [ "mobile", "app", "background", "state-preservation" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "backgroundApp",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "int",
    "name" : "seconds",
    "description" : "Số giây ứng dụng chạy nền. Sử dụng -1 để giữ ứng dụng ở nền vô thời hạn."
  } ]
}, {
  "name" : "waitForText",
  "description" : "Chờ cho đến khi văn bản của một phần tử khớp chính xác với chuỗi mong đợi hoặc cho đến khi hết thời gian chờ. Hữu ích khi cần đảm bảo nội dung đã được cập nhật đúng trước khi tiếp tục. Phương thức này kiểm tra chính xác nội dung văn bản, phân biệt chữ hoa/thường và khoảng trắng. Nếu văn bản không khớp sau khi hết thời gian chờ, một TimeoutException sẽ được ném ra.",
  "category" : "Mobile/Wait",
  "example" : "// Chờ trạng thái đơn hàng cập nhật thành \"Đã hoàn thành\"\nmobileKeyword.waitForText(orderStatusLabel, \"Đã hoàn thành\", 15);\n\n// Chờ số dư tài khoản cập nhật sau khi thực hiện giao dịch\nmobileKeyword.tap(transferButton);\nmobileKeyword.waitForText(balanceAmount, \"1,250,000 VND\", 10);\n\n// Chờ thông báo xác nhận hiển thị đúng nội dung\nmobileKeyword.tap(submitButton);\nmobileKeyword.waitForText(confirmationMessage, \"Yêu cầu của bạn đã được gửi\", 5);\n\n// Chờ giá trị đếm ngược thay đổi\nmobileKeyword.tap(startCountdownButton);\nmobileKeyword.waitForText(countdownTimer, \"00:30\", 3);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Phần tử cần kiểm tra phải có thuộc tính văn bản (text)", "Phần tử phải tồn tại trong DOM (có thể chưa hiển thị)" ],
  "exceptions" : [ "TimeoutException: Nếu văn bản không khớp sau khi hết thời gian chờ", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM trong quá trình chờ", "NoSuchElementException: Nếu không tìm thấy phần tử trong DOM" ],
  "platform" : "MOBILE",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "mobile", "wait", "text", "content", "verification", "synchronization", "dynamic" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "waitForText",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra văn bản."
  }, {
    "type" : "String",
    "name" : "expectedText",
    "description" : "Văn bản mong đợi phải khớp chính xác."
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian tối đa (giây) để chờ văn bản khớp."
  } ]
}, {
  "name" : "assertChecked",
  "description" : "Khẳng định rằng một switch, checkbox hoặc radio button đang ở trạng thái được chọn/bật. Phương thức này kiểm tra thuộc tính 'checked' của phần tử và ném AssertionError nếu phần tử không được chọn. Áp dụng cho các phần tử có thể chọn/bỏ chọn như checkbox, radio button, toggle switch. Lưu ý: Phần tử phải hỗ trợ thuộc tính 'checked', nếu không có thể gây ra lỗi.",
  "category" : "Mobile/Assertion",
  "example" : "// Kiểm tra rằng tùy chọn đã được chọn\nmobileKeyword.tap(agreeToTermsCheckbox);\nmobileKeyword.assertChecked(agreeToTermsCheckbox);\n\n// Kiểm tra rằng công tắc thông báo đã được bật\nmobileKeyword.tap(notificationSwitch);\nmobileKeyword.assertChecked(notificationSwitch);\n\n// Xác minh rằng radio button đã được chọn sau khi tap\nmobileKeyword.tap(femaleGenderOption);\nmobileKeyword.assertChecked(femaleGenderOption);\n\n// Kiểm tra trạng thái mặc định của một tùy chọn\nmobileKeyword.assertChecked(defaultSelectedOption);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Phần tử UI cần kiểm tra phải là loại có thể chọn/bỏ chọn", "Phần tử phải hỗ trợ thuộc tính 'checked'" ],
  "exceptions" : [ "AssertionError: Nếu phần tử không ở trạng thái được chọn/bật", "NoSuchElementException: Nếu không tìm thấy phần tử", "WebDriverException: Nếu không thể truy cập thuộc tính 'checked'" ],
  "platform" : "MOBILE",
  "systemImpact" : "READ_ONLY",
  "stability" : "STABLE",
  "tags" : [ "mobile", "assertion", "checkbox", "radio", "toggle", "state", "verification" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertChecked",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra trạng thái."
  } ]
}, {
  "name" : "getValueFromXml",
  "description" : "Lấy một giá trị từ một chuỗi XML bằng cách sử dụng một biểu thức XPath. XPath là một ngôn ngữ truy vấn cho phép chọn các nút trong tài liệu XML dựa trên các tiêu chí khác nhau như đường dẫn, thuộc tính, và vị trí.",
  "category" : "Utility/String",
  "example" : "// Giả sử có chuỗi XML: <books><book id=\"bk101\"><title>XML Developer's Guide</title></book></books>\nString bookTitle = utilityKeyword.getValueFromXml(xmlString, \"//book[@id='bk101']/title/text()\");\n// bookTitle sẽ có giá trị \"XML Developer's Guide\"",
  "returnValue" : "String: Giá trị được truy xuất từ tài liệu XML, hoặc null nếu không tìm thấy",
  "prerequisites" : [ ],
  "exceptions" : [ "SAXException: Nếu chuỗi XML không hợp lệ", "XPathExpressionException: Nếu biểu thức XPath không hợp lệ" ],
  "platform" : "ALL",
  "systemImpact" : "READ_ONLY",
  "stability" : "STABLE",
  "tags" : [ "xml", "xpath", "parsing", "data-extraction" ],
  "className" : "com.vtnet.netat.core.keywords.UtilityKeyword",
  "methodName" : "getValueFromXml",
  "returnType" : "String",
  "parameters" : [ {
    "type" : "String",
    "name" : "xmlString",
    "description" : "Chuỗi XML nguồn cần truy vấn."
  }, {
    "type" : "String",
    "name" : "xpathExpression",
    "description" : "Biểu thức XPath để tìm và trích xuất giá trị."
  } ]
}, {
  "name" : "toggleAirplaneMode",
  "description" : "Bật hoặc tắt chế độ máy bay trên thiết bị Android. Mỗi lần gọi sẽ chuyển đổi trạng thái hiện tại (nếu đang bật sẽ tắt, nếu đang tắt sẽ bật). Chỉ hoạt động trên Android, sẽ hiển thị cảnh báo nếu được gọi trên iOS. Hữu ích khi cần kiểm tra hành vi ứng dụng trong điều kiện không có kết nối mạng.",
  "category" : "Mobile/System",
  "example" : "// Bật chế độ máy bay để kiểm tra xử lý offline\nmobileKeyword.toggleAirplaneMode(); // Bật chế độ máy bay\n\n// Thực hiện các thao tác kiểm tra offline\nmobileKeyword.tap(refreshButton);\nmobileKeyword.assertElementVisible(offlineMessage);\n\n// Tắt chế độ máy bay để kiểm tra khả năng phục hồi kết nối\nmobileKeyword.toggleAirplaneMode(); // Tắt chế độ máy bay\nmobileKeyword.waitForNotVisible(offlineMessage, 10);\n\n// Kiểm tra đồng bộ hóa sau khi kết nối lại\nmobileKeyword.waitForVisible(syncCompleteIndicator, 15);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "Thiết bị Android đã được kết nối và cấu hình đúng với Appium", "Ứng dụng Appium phải có quyền thay đổi chế độ máy bay (cần quyền WRITE_SETTINGS)", "Thiết bị Android phải hỗ trợ chế độ máy bay" ],
  "exceptions" : [ "WebDriverException: Nếu có lỗi khi tương tác với trình điều khiển", "UnsupportedOperationException: Nếu được gọi trên thiết bị iOS", "SecurityException: Nếu không có đủ quyền để thay đổi chế độ máy bay" ],
  "platform" : "MOBILE",
  "systemImpact" : "MODIFY",
  "stability" : "STABLE",
  "tags" : [ "mobile", "system", "network", "airplane", "offline", "connectivity", "android" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "toggleAirplaneMode",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "verifyAttributeContainsHard",
  "description" : "Kiểm tra giá trị của một thuộc tính trên phần tử có chứa một chuỗi con hay không. Nếu không chứa, kịch bản sẽ DỪNG LẠI.",
  "category" : "Web/Assert",
  "example" : "// Kiểm tra phần tử có class 'active'\nwebKeyword.click(tabButtonObject);\nwebKeyword.verifyAttributeContainsHard(tabButtonObject, \"class\", \"active\");\n\n// Kiểm tra đường dẫn hình ảnh chứa tên sản phẩm\nwebKeyword.verifyAttributeContainsHard(productImageObject, \"src\", \"iphone-13\");\n\n// Kiểm tra thuộc tính data-id chứa mã sản phẩm\nwebKeyword.verifyAttributeContainsHard(productCardObject, \"data-id\", \"SP-1234\");\n\n// Kiểm tra liên kết chứa thông tin danh mục\nwebKeyword.verifyAttributeContainsHard(categoryLinkObject, \"href\", \"category=electronics\");\n\n// Kiểm tra thuộc tính aria-label chứa thông tin trợ năng\nwebKeyword.verifyAttributeContainsHard(closeButtonObject, \"aria-label\", \"Đóng\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần kiểm tra phải tồn tại trong DOM", "Thuộc tính cần kiểm tra phải tồn tại trên phần tử" ],
  "exceptions" : [ "AssertionError: Nếu giá trị thuộc tính không chứa chuỗi con mong đợi", "NoSuchElementException: Nếu không tìm thấy phần tử", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "assert", "verify", "hard", "attribute", "property", "contains", "substring", "partial", "validation" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyAttributeContainsHard",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra."
  }, {
    "type" : "String",
    "name" : "attribute",
    "description" : "Tên của thuộc tính (ví dụ: 'class')."
  }, {
    "type" : "String",
    "name" : "partialValue",
    "description" : "Chuỗi con mong đợi."
  } ]
}, {
  "name" : "getCssValue",
  "description" : "Lấy giá trị của một thuộc tính CSS được áp dụng trên một phần tử.",
  "category" : "Web/Getter",
  "example" : "// Lấy màu chữ của nút\nString buttonColor = webKeyword.getCssValue(buttonObject, \"color\");\nwebKeyword.verifyEqual(buttonColor, \"rgba(255, 255, 255, 1)\"); // Màu trắng\n\n// Kiểm tra kích thước font\nString fontSize = webKeyword.getCssValue(headingObject, \"font-size\");\nwebKeyword.verifyEqual(fontSize, \"24px\");\n\n// Kiểm tra thuộc tính hiển thị\nString display = webKeyword.getCssValue(hiddenElementObject, \"display\");\nwebKeyword.verifyEqual(display, \"none\"); // Phần tử đang bị ẩn\n\n// Kiểm tra màu nền khi hover\nwebKeyword.hoverElement(menuItemObject);\nString backgroundColor = webKeyword.getCssValue(menuItemObject, \"background-color\");\nwebKeyword.verifyEqual(backgroundColor, \"rgba(240, 240, 240, 1)\"); // Màu xám nhạt\n\n// Kiểm tra thuộc tính border\nString borderStyle = webKeyword.getCssValue(inputErrorObject, \"border-color\");\nwebKeyword.verifyEqual(borderStyle, \"rgba(255, 0, 0, 1)\"); // Màu đỏ",
  "returnValue" : "String: Giá trị của thuộc tính CSS được chỉ định",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần lấy giá trị CSS phải tồn tại trong DOM", "Thuộc tính CSS cần lấy phải được áp dụng cho phần tử (trực tiếp hoặc được kế thừa)" ],
  "exceptions" : [ "NoSuchElementException: Nếu phần tử không tồn tại", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "TimeoutException: Nếu phần tử không xuất hiện trong thời gian chờ", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "getter", "css", "style", "property", "visual", "read", "extract", "information", "design" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "getCssValue",
  "returnType" : "String",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần lấy giá trị CSS."
  }, {
    "type" : "String",
    "name" : "cssPropertyName",
    "description" : "Tên của thuộc tính CSS (ví dụ: 'color', 'font-size', 'background-color')."
  } ]
}, {
  "name" : "verifyTextSoft",
  "description" : "So sánh văn bản của một phần tử với một chuỗi ký tự mong đợi (phải khớp chính xác). Nếu không khớp, kịch bản sẽ ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Web/Assert",
  "example" : "// Kiểm tra nhãn trên form đăng nhập\nwebKeyword.verifyTextSoft(usernameLabelObject, \"Tên đăng nhập\");\nwebKeyword.verifyTextSoft(passwordLabelObject, \"Mật khẩu\");\nwebKeyword.verifyTextSoft(loginButtonTextObject, \"Đăng nhập\");\n// Kịch bản tiếp tục ngay cả khi có nhãn không khớp\n\n// Kiểm tra nhiều giá trị hiển thị\nwebKeyword.verifyTextSoft(productNameObject, \"Điện thoại thông minh X1\");\nwebKeyword.verifyTextSoft(productPriceObject, \"5.990.000 ₫\");\nwebKeyword.verifyTextSoft(productStockObject, \"Còn hàng\");\nwebKeyword.click(addToCartButtonObject); // Tiếp tục thực hiện hành động\n\n// Kiểm tra thông tin người dùng\nwebKeyword.verifyTextSoft(userFullNameObject, \"Nguyễn Văn A\");\nwebKeyword.verifyTextSoft(userEmailObject, \"nguyenvana@example.com\");\nwebKeyword.verifyTextSoft(userRoleObject, \"Người dùng\");\n\n// Kiểm tra thông tin đơn hàng\nwebKeyword.verifyTextSoft(orderNumberObject, \"ORD-12345\");\nwebKeyword.verifyTextSoft(orderDateObject, \"15/09/2023\");\nwebKeyword.verifyTextSoft(orderStatusObject, \"Đang xử lý\");\nwebKeyword.click(viewDetailsButtonObject); // Tiếp tục xem chi tiết",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần kiểm tra phải tồn tại trong DOM và có văn bản" ],
  "exceptions" : [ "NoSuchElementException: Nếu không tìm thấy phần tử", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "assert", "verify", "soft", "text", "content", "exact", "match", "string", "validation" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyTextSoft",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử chứa văn bản cần kiểm tra."
  }, {
    "type" : "String",
    "name" : "expectedText",
    "description" : "Chuỗi văn bản mong đợi."
  } ]
}, {
  "name" : "denySystemDialog",
  "description" : "Tự động tìm và nhấn vào các nút hệ thống có văn bản phủ định như 'Deny', 'Cancel', 'Don't allow'. Hữu ích để từ chối các yêu cầu cấp quyền hoặc đóng các thông báo hệ thống không mong muốn. Phương thức sẽ tìm kiếm các nút phổ biến và nhấn vào nút đầu tiên tìm thấy. Nếu không tìm thấy nút nào, một cảnh báo sẽ được ghi vào log.",
  "category" : "Mobile/System",
  "example" : "// Từ chối yêu cầu quyền truy cập vị trí để kiểm tra xử lý khi không có quyền\nmobileKeyword.tap(locationFeatureButton);\nmobileKeyword.denySystemDialog();\nmobileKeyword.assertElementVisible(locationPermissionDeniedMessage);\n\n// Từ chối thông báo cập nhật ứng dụng để tiếp tục với phiên bản hiện tại\nmobileKeyword.denySystemDialog();\n\n// Từ chối nhiều hộp thoại liên tiếp\nfor (int i = 0; i < 3; i++) {\n    mobileKeyword.denySystemDialog();\n    Thread.sleep(1000); // Đợi hộp thoại tiếp theo xuất hiện\n}\n\n// Từ chối yêu cầu đánh giá ứng dụng\nmobileKeyword.denySystemDialog();",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Hộp thoại hệ thống đang hiển thị trên màn hình", "Hộp thoại chứa ít nhất một nút có văn bản phủ định được hỗ trợ" ],
  "exceptions" : [ "WebDriverException: Nếu có lỗi khi tương tác với trình điều khiển", "NoSuchElementException: Nếu không tìm thấy nút nào khớp với danh sách văn bản đã cho" ],
  "platform" : "MOBILE",
  "systemImpact" : "MODIFY",
  "stability" : "STABLE",
  "tags" : [ "mobile", "system", "dialog", "permission", "deny", "cancel", "popup", "reject" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "denySystemDialog",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "openNewTab",
  "description" : "Mở một tab mới trong trình duyệt và tự động chuyển sự điều khiển sang tab mới đó. Có thể tùy chọn mở một URL cụ thể trong tab mới.",
  "category" : "Web/Window&Frame",
  "example" : "// Mở tab mới với URL cụ thể\nwebKeyword.openNewTab(\"https://google.com\");\nwebKeyword.waitForElementVisible(searchBoxObject);\n\n// Mở tab trống và điều hướng sau đó\nwebKeyword.openNewTab(\"\");\nwebKeyword.navigate(\"https://example.com\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Trình duyệt hỗ trợ việc mở tab mới thông qua WebDriver" ],
  "exceptions" : [ "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt", "UnsupportedCommandException: Nếu trình duyệt không hỗ trợ lệnh mở tab mới" ],
  "platform" : "WEB",
  "systemImpact" : "NAVIGATION",
  "stability" : "STABLE",
  "tags" : [ "web", "window", "tab", "navigation", "open", "new", "browser", "url" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "openNewTab",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "url",
    "description" : "(Tùy chọn) URL để mở trong tab mới. Nếu để trống, sẽ mở tab trống."
  } ]
}, {
  "name" : "getCurrentDateTime",
  "description" : "Lấy và trả về chuỗi ngày giờ hiện tại theo một định dạng cho trước. Sử dụng các mẫu định dạng chuẩn của Java như 'yyyy' cho năm, 'MM' cho tháng, 'dd' cho ngày, 'HH' cho giờ (24h), 'mm' cho phút và 'ss' cho giây.",
  "category" : "Utility/DateTime",
  "example" : "// Lấy ngày giờ hiện tại với định dạng yyyy-MM-dd_HH-mm-ss\nString timestamp = utilityKeyword.getCurrentDateTime(\"yyyy-MM-dd_HH-mm-ss\");\n// Kết quả có thể là: 2025-09-15_11-30-45",
  "returnValue" : "String: Chuỗi ngày giờ hiện tại theo định dạng được chỉ định",
  "prerequisites" : [ ],
  "exceptions" : [ "IllegalArgumentException: Nếu định dạng ngày giờ không hợp lệ" ],
  "platform" : "ALL",
  "systemImpact" : "READ_ONLY",
  "stability" : "STABLE",
  "tags" : [ "datetime", "utility", "formatting" ],
  "className" : "com.vtnet.netat.core.keywords.UtilityKeyword",
  "methodName" : "getCurrentDateTime",
  "returnType" : "String",
  "parameters" : [ {
    "type" : "String",
    "name" : "dateTimeFormat",
    "description" : "Định dạng ngày giờ (ví dụ: 'dd/MM/yyyy HH:mm:ss')."
  } ]
}, {
  "name" : "findElementInShadowDom",
  "description" : "Tìm kiếm và trả về một phần tử nằm bên trong một Shadow DOM. Yêu cầu cung cấp phần tử chủ (shadow host) và một CSS selector để định vị phần tử con.",
  "category" : "Web/Interaction",
  "example" : "// Tìm và tương tác với phần tử input trong Shadow DOM\nWebElement usernameInput = webKeyword.findElementInShadowDom(appContainerObject, \"#username\");\nusernameInput.sendKeys(\"admin@example.com\");\n\n// Tìm và click vào nút trong Shadow DOM\nWebElement submitButton = webKeyword.findElementInShadowDom(loginFormObject, \".submit-button\");\nsubmitButton.click();",
  "returnValue" : "WebElement: Phần tử web được tìm thấy bên trong Shadow DOM",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Trình duyệt hỗ trợ Shadow DOM (Chrome, Firefox mới)", "Phần tử chủ (host) phải tồn tại và có Shadow DOM đính kèm" ],
  "exceptions" : [ "NoSuchElementException: Nếu không tìm thấy phần tử chủ hoặc phần tử con", "StaleElementReferenceException: Nếu phần tử chủ không còn gắn với DOM", "UnsupportedOperationException: Nếu trình duyệt không hỗ trợ Shadow DOM API", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "shadow-dom", "component", "encapsulation", "css", "selector", "find", "element", "web-components" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "findElementInShadowDom",
  "returnType" : "WebElement",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "shadowHostObject",
    "description" : "Phần tử chủ (host) chứa Shadow DOM."
  }, {
    "type" : "String",
    "name" : "cssSelectorInShadow",
    "description" : "Chuỗi CSS selector để tìm phần tử bên trong Shadow DOM."
  } ]
}, {
  "name" : "verifyElementVisibleSoft",
  "description" : "Kiểm tra một phần tử có đang hiển thị trên giao diện hay không. Nếu kiểm tra thất bại, kịch bản sẽ ghi nhận lỗi nhưng vẫn TIẾP TỤC chạy các bước tiếp theo.",
  "category" : "Web/Assert",
  "example" : "// Kiểm tra thông báo thành công hiển thị sau khi lưu\nwebKeyword.click(saveButtonObject);\nwebKeyword.verifyElementVisibleSoft(successMessageObject, true);\n// Kịch bản vẫn tiếp tục ngay cả khi thông báo không hiển thị\n\n// Kiểm tra nhiều phần tử trên trang\nwebKeyword.verifyElementVisibleSoft(headerLogoObject, true);\nwebKeyword.verifyElementVisibleSoft(navigationMenuObject, true);\nwebKeyword.verifyElementVisibleSoft(searchBarObject, true);\nwebKeyword.verifyElementVisibleSoft(footerObject, true);\n\n// Kiểm tra các phần tử tùy chọn\nwebKeyword.verifyElementVisibleSoft(promotionBannerObject, true); // Có thể không hiển thị nhưng kịch bản vẫn tiếp tục\nwebKeyword.click(mainButtonObject); // Thực hiện hành động tiếp theo\n\n// Kiểm tra phần tử không hiển thị sau khi đóng\nwebKeyword.click(closeNotificationObject);\nwebKeyword.verifyElementVisibleSoft(notificationObject, false);\nwebKeyword.click(nextButtonObject); // Tiếp tục ngay cả khi thông báo vẫn còn hiển thị\n\n// Kiểm tra nhiều điều kiện liên quan đến hiển thị\nwebKeyword.verifyElementVisibleSoft(mainContentObject, true);\nwebKeyword.verifyElementVisibleSoft(sidebarObject, true);\nwebKeyword.verifyElementVisibleSoft(advertisementObject, false); // Quảng cáo không nên hiển thị",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần kiểm tra phải tồn tại trong DOM" ],
  "exceptions" : [ "NoSuchElementException: Nếu không tìm thấy phần tử", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "assert", "verify", "soft", "visibility", "display", "element", "visible", "hidden", "validation" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyElementVisibleSoft",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra."
  }, {
    "type" : "boolean",
    "name" : "isVisible",
    "description" : "Trạng thái hiển thị mong đợi (true cho hiển thị, false cho bị ẩn)."
  } ]
}, {
  "name" : "verifyTextMatchesRegexSoft",
  "description" : "Kiểm tra văn bản của một phần tử có khớp với một biểu thức chính quy (regex) hay không. Nếu không khớp, kịch bản sẽ ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Web/Assert",
  "example" : "// Kiểm tra định dạng email hiển thị trên trang\nwebKeyword.verifyTextMatchesRegexSoft(emailFormatObject, \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\nwebKeyword.click(continueButtonObject); // Tiếp tục thực hiện hành động\n\n// Kiểm tra nhiều định dạng khác nhau trên trang thông tin\nwebKeyword.verifyTextMatchesRegexSoft(zipCodeObject, \"^\\d{5}(-\\d{4})?$\"); // Mã bưu điện\nwebKeyword.verifyTextMatchesRegexSoft(taxIdObject, \"^\\d{10}$\"); // Mã số thuế\nwebKeyword.verifyTextMatchesRegexSoft(websiteObject, \"^https?://[\\\\w.-]+\\\\.[a-zA-Z]{2,}(/.*)?$\"); // URL\nwebKeyword.click(saveButtonObject); // Tiếp tục lưu thông tin\n\n// Kiểm tra định dạng thông tin sản phẩm\nwebKeyword.verifyTextMatchesRegexSoft(productWeightObject, \"^\\d+(\\.\\d+)? (kg|g)$\"); // Cân nặng\nwebKeyword.verifyTextMatchesRegexSoft(productDimensionsObject, \"^\\d+x\\d+x\\d+ (cm|mm)$\"); // Kích thước\nwebKeyword.click(addToCartButtonObject); // Tiếp tục thêm vào giỏ hàng\n\n// Kiểm tra định dạng thông tin tài khoản\nwebKeyword.verifyTextMatchesRegexSoft(usernameObject, \"^[a-zA-Z0-9_]{3,20}$\"); // Tên người dùng\nwebKeyword.verifyTextMatchesRegexSoft(memberSinceObject, \"^Thành viên từ: \\d{2}/\\d{2}/\\d{4}$\"); // Ngày tham gia\nwebKeyword.click(editProfileButtonObject); // Tiếp tục chỉnh sửa hồ sơ",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần kiểm tra phải tồn tại trong DOM và có văn bản" ],
  "exceptions" : [ "NoSuchElementException: Nếu không tìm thấy phần tử", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt", "PatternSyntaxException: Nếu biểu thức chính quy không hợp lệ" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "assert", "verify", "soft", "text", "regex", "pattern", "format", "validation", "regular expression" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyTextMatchesRegexSoft",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử chứa văn bản cần kiểm tra."
  }, {
    "type" : "String",
    "name" : "pattern",
    "description" : "Biểu thức chính quy để so khớp."
  } ]
}, {
  "name" : "highlightElement",
  "description" : "Tạm thời vẽ một đường viền màu đỏ xung quanh một phần tử trên trang để dễ dàng nhận biết và gỡ lỗi trong quá trình chạy kịch bản.",
  "category" : "Web/Utility",
  "example" : "// Làm nổi bật các phần tử trong quá trình điền form\nwebKeyword.highlightElement(usernameFieldObject);\nwebKeyword.sendKeys(usernameFieldObject, \"admin@example.com\");\nwebKeyword.highlightElement(passwordFieldObject);\nwebKeyword.sendKeys(passwordFieldObject, \"password123\");\nwebKeyword.highlightElement(loginButtonObject);\nwebKeyword.click(loginButtonObject);\n\n// Làm nổi bật phần tử để gỡ lỗi\nwebKeyword.waitForElementVisible(tableRowObject, 10);\nwebKeyword.highlightElement(tableRowObject);\nwebKeyword.takeElementScreenshot(tableRowObject, \"D:/screenshots/table_row.png\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần làm nổi bật phải tồn tại trong DOM" ],
  "exceptions" : [ "NoSuchElementException: Nếu không tìm thấy phần tử", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "WRITE",
  "stability" : "STABLE",
  "tags" : [ "web", "highlight", "debug", "visual", "element", "utility", "javascript", "style", "border" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "highlightElement",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần làm nổi bật."
  } ]
}, {
  "name" : "doubleClick",
  "description" : "Thực hiện hành động click chuột hai lần (double-click) vào một phần tử.",
  "category" : "Web/Interaction",
  "example" : "// Double-click vào biểu tượng chỉnh sửa\nwebKeyword.doubleClick(editIconObject);\nwebKeyword.waitForElementVisible(editFormObject);\n\n// Double-click để chọn toàn bộ văn bản\nwebKeyword.doubleClick(textParagraphObject);\nwebKeyword.verifyElementAttribute(textParagraphObject, \"class\", \"selected\");\n\n// Double-click vào ô trong bảng để chỉnh sửa\nwebKeyword.doubleClick(tableCellObject);\nwebKeyword.waitForElementVisible(cellEditModeObject);\nwebKeyword.sendKeys(cellEditModeObject, \"Giá trị mới\");\n\n// Double-click để mở file\nwebKeyword.doubleClick(fileIconObject);\nwebKeyword.waitForElementVisible(fileContentObject);\n\n// Double-click để phóng to hình ảnh\nwebKeyword.doubleClick(thumbnailImageObject);\nwebKeyword.waitForElementVisible(enlargedImageObject);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần double-click phải tồn tại trong DOM", "Phần tử phải hiển thị và có thể tương tác được", "Phần tử không bị che khuất bởi các phần tử khác" ],
  "exceptions" : [ "ElementNotVisibleException: Nếu phần tử không hiển thị trên trang", "ElementNotInteractableException: Nếu phần tử không thể tương tác", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "TimeoutException: Nếu phần tử không xuất hiện trong thời gian chờ", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt", "MoveTargetOutOfBoundsException: Nếu phần tử nằm ngoài viewport hiện tại" ],
  "platform" : "WEB",
  "systemImpact" : "WRITE",
  "stability" : "STABLE",
  "tags" : [ "web", "interaction", "double-click", "dblclick", "mouse", "action", "select", "edit", "open" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "doubleClick",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần thực hiện double-click."
  } ]
}, {
  "name" : "acceptSystemDialog",
  "description" : "Tự động tìm và nhấn vào các nút hệ thống có văn bản khẳng định như 'Allow', 'OK', 'Accept', 'While using the app'. Hữu ích để xử lý các hộp thoại cấp quyền hoặc thông báo hệ thống. Phương thức sẽ tìm kiếm các nút phổ biến và nhấn vào nút đầu tiên tìm thấy. Nếu không tìm thấy nút nào, một cảnh báo sẽ được ghi vào log.",
  "category" : "Mobile/System",
  "example" : "// Chấp nhận hộp thoại yêu cầu quyền truy cập vị trí\nmobileKeyword.tap(locationButton);\nmobileKeyword.acceptSystemDialog();\n\n// Chấp nhận thông báo cập nhật ứng dụng\nmobileKeyword.acceptSystemDialog();\n\n// Xử lý nhiều hộp thoại liên tiếp\nfor (int i = 0; i < 3; i++) {\n    mobileKeyword.acceptSystemDialog();\n    Thread.sleep(1000); // Đợi hộp thoại tiếp theo xuất hiện\n}\n\n// Chấp nhận hộp thoại yêu cầu quyền thông báo\nmobileKeyword.tap(notificationSettingsButton);\nmobileKeyword.acceptSystemDialog();",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Hộp thoại hệ thống đang hiển thị trên màn hình", "Hộp thoại chứa ít nhất một nút có văn bản khẳng định được hỗ trợ" ],
  "exceptions" : [ "WebDriverException: Nếu có lỗi khi tương tác với trình điều khiển", "NoSuchElementException: Nếu không tìm thấy nút nào khớp với danh sách văn bản đã cho" ],
  "platform" : "MOBILE",
  "systemImpact" : "MODIFY",
  "stability" : "STABLE",
  "tags" : [ "mobile", "system", "dialog", "permission", "accept", "allow", "popup" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "acceptSystemDialog",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "clickWithJavascript",
  "description" : "Thực hiện click vào một phần tử bằng JavaScript. Hữu ích khi click thông thường không hoạt động.",
  "category" : "Web/Interaction",
  "example" : "// Click vào nút ẩn\nwebKeyword.clickWithJavascript(hiddenButtonObject);\nwebKeyword.waitForElementVisible(confirmationMessageObject);\n\n// Click vào phần tử bị che khuất bởi phần tử khác\nwebKeyword.clickWithJavascript(overlappedElementObject);\n\n// Click vào phần tử không thể tương tác thông thường\ntry {\n    webKeyword.click(disabledButtonObject); // Sẽ thất bại\n} catch (ElementNotInteractableException e) {\n    webKeyword.clickWithJavascript(disabledButtonObject); // Sẽ thành công\n}\n\n// Click vào phần tử nằm ngoài viewport\nwebKeyword.clickWithJavascript(elementOutOfViewportObject);\n\n// Click vào phần tử có sự kiện JavaScript phức tạp\nwebKeyword.clickWithJavascript(customJsButtonObject);\nwebKeyword.waitForElementVisible(customDialogObject);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần click phải tồn tại trong DOM", "Trình duyệt phải hỗ trợ thực thi JavaScript", "Người dùng phải có quyền thực thi JavaScript trên trang" ],
  "exceptions" : [ "JavascriptException: Nếu có lỗi khi thực thi JavaScript", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "TimeoutException: Nếu phần tử không xuất hiện trong thời gian chờ", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt", "NoSuchSessionException: Nếu phiên WebDriver không còn hợp lệ" ],
  "platform" : "WEB",
  "systemImpact" : "WRITE",
  "stability" : "STABLE",
  "tags" : [ "web", "interaction", "javascript", "click", "js", "hidden", "disabled", "bypass", "element", "action" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "clickWithJavascript",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần click."
  } ]
}, {
  "name" : "swipe",
  "description" : "Thực hiện hành động vuốt trên màn hình từ điểm bắt đầu đến điểm kết thúc. Cho phép kiểm soát chính xác tọa độ bắt đầu, kết thúc và tốc độ vuốt. Tọa độ được tính theo pixel từ góc trên bên trái của màn hình (0,0).",
  "category" : "Mobile/Gesture",
  "example" : "// Vuốt từ giữa màn hình xuống dưới (mở notification drawer trên Android)\nmobileKeyword.swipe(500, 100, 500, 1500, 300);\n\n// Vuốt từ phải sang trái (để lật trang hoặc xóa mục trong danh sách)\nmobileKeyword.swipe(900, 500, 100, 500, 200);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium" ],
  "exceptions" : [ "WebDriverException: Nếu không thể thực hiện hành động vuốt", "IllegalArgumentException: Nếu tọa độ nằm ngoài kích thước màn hình" ],
  "platform" : "MOBILE",
  "systemImpact" : "MODIFY",
  "stability" : "STABLE",
  "tags" : [ "mobile", "gesture", "swipe", "touch", "interaction" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "swipe",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "int",
    "name" : "startX",
    "description" : "Tọa độ X điểm bắt đầu vuốt."
  }, {
    "type" : "int",
    "name" : "startY",
    "description" : "Tọa độ Y điểm bắt đầu vuốt."
  }, {
    "type" : "int",
    "name" : "endX",
    "description" : "Tọa độ X điểm kết thúc vuốt."
  }, {
    "type" : "int",
    "name" : "endY",
    "description" : "Tọa độ Y điểm kết thúc vuốt."
  }, {
    "type" : "int",
    "name" : "durationInMs",
    "description" : "Thời gian thực hiện vuốt (ms), giá trị thấp hơn = vuốt nhanh hơn."
  } ]
}, {
  "name" : "executeMobileCommand",
  "description" : "Thực thi một lệnh Appium tùy chỉnh không có sẵn trong các keyword tiêu chuẩn. Cung cấp sự linh hoạt tối đa cho các tình huống đặc thù hoặc các tính năng mới của Appium chưa được bao gồm trong framework. Phương thức này cho phép truyền các tham số phức tạp dưới dạng Map. Lưu ý: Cần hiểu rõ về lệnh Appium cụ thể trước khi sử dụng.",
  "category" : "Mobile/System",
  "example" : "// Xóa dữ liệu của một ứng dụng trên Android mà không cần gỡ cài đặt\nMap<String, Object> args = new HashMap<>();\nargs.put(\"appId\", \"com.example.app\");\nmobileKeyword.executeMobileCommand(\"mobile: clearApp\", args);\n\n// Thực hiện lệnh shell trên Android\nMap<String, Object> shellArgs = new HashMap<>();\nshellArgs.put(\"command\", \"dumpsys battery\");\nObject result = mobileKeyword.executeMobileCommand(\"mobile: shell\", shellArgs);\nSystem.out.println(\"Battery info: \" + result.toString());\n\n// Thực hiện vuốt đặc biệt trên iOS\nMap<String, Object> swipeArgs = new HashMap<>();\nswipeArgs.put(\"direction\", \"up\");\nswipeArgs.put(\"element\", findElement(scrollViewObject).getId());\nmobileKeyword.executeMobileCommand(\"mobile: swipe\", swipeArgs);\n\n// Lấy trạng thái mạng trên iOS\nMap<String, Object> networkArgs = new HashMap<>();\nObject networkStatus = mobileKeyword.executeMobileCommand(\"mobile: getConnectivity\", networkArgs);\n\n// Thực hiện thao tác biometrics (vân tay, Face ID)\nMap<String, Object> bioArgs = new HashMap<>();\nbioArgs.put(\"isEnabled\", true);\nmobileKeyword.executeMobileCommand(\"mobile: enrollBiometric\", bioArgs);\n\n// Thiết lập vị trí GPS giả lập\nMap<String, Object> locationArgs = new HashMap<>();\nlocationArgs.put(\"latitude\", 10.762622);\nlocationArgs.put(\"longitude\", 106.660172);\nmobileKeyword.executeMobileCommand(\"mobile: setLocation\", locationArgs);",
  "returnValue" : "Object: Kết quả trả về từ lệnh Appium, kiểu dữ liệu phụ thuộc vào lệnh được thực thi",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Đang sử dụng AppiumDriver (AndroidDriver hoặc IOSDriver)", "Cần hiểu rõ về lệnh Appium cụ thể và các tham số của nó", "Lệnh phải được hỗ trợ bởi phiên bản Appium và driver đang sử dụng", "Một số lệnh có thể yêu cầu quyền đặc biệt hoặc cấu hình bổ sung" ],
  "exceptions" : [ "WebDriverException: Nếu lệnh không được hỗ trợ hoặc không thể thực thi", "InvalidArgumentException: Nếu tham số không đúng định dạng hoặc thiếu tham số bắt buộc", "UnsupportedCommandException: Nếu lệnh không được hỗ trợ trên nền tảng hiện tại", "SessionNotCreatedException: Nếu phiên Appium không còn hoạt động", "NoSuchContextException: Nếu lệnh yêu cầu context không tồn tại" ],
  "platform" : "MOBILE",
  "systemImpact" : "WRITE",
  "stability" : "EXPERIMENTAL",
  "tags" : [ "mobile", "system", "advanced", "custom", "command", "script", "appium", "native", "extension", "flexible" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "executeMobileCommand",
  "returnType" : "Object",
  "parameters" : [ {
    "type" : "String",
    "name" : "commandName",
    "description" : "Tên lệnh Appium cần thực thi (ví dụ: 'mobile: clearApp', 'mobile: shell')."
  }, {
    "type" : "Map",
    "name" : "commandArgs",
    "description" : "Các tham số của lệnh dưới dạng key-value."
  } ]
}, {
  "name" : "longPress",
  "description" : "Thực hiện hành động chạm và giữ (long press) vào một phần tử trong một khoảng thời gian xác định. Hữu ích cho các thao tác như hiển thị menu ngữ cảnh, kéo thả, hoặc các tương tác đặc biệt yêu cầu nhấn giữ. Phương thức sẽ đợi phần tử hiển thị trước khi thực hiện.",
  "category" : "Mobile/Interaction",
  "example" : "// Chạm và giữ một hình ảnh trong 2 giây để hiển thị menu lưu ảnh\nmobileKeyword.longPress(imageObject, 2);\n\n// Chạm và giữ một mục trong danh sách để hiển thị menu xóa\nmobileKeyword.longPress(listItemObject, 1);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Phần tử UI cần tương tác phải hiển thị trên màn hình" ],
  "exceptions" : [ "ElementNotVisibleException: Nếu phần tử không hiển thị", "NoSuchElementException: Nếu không tìm thấy phần tử", "ElementNotInteractableException: Nếu phần tử không thể tương tác" ],
  "platform" : "MOBILE",
  "systemImpact" : "MODIFY",
  "stability" : "STABLE",
  "tags" : [ "mobile", "interaction", "long-press", "context-menu", "gesture" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "longPress",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần chạm và giữ."
  }, {
    "type" : "int",
    "name" : "durationInSeconds",
    "description" : "Thời gian giữ phần tử, tính bằng giây."
  } ]
}, {
  "name" : "selectByIndex",
  "description" : "Chọn một tùy chọn (option) trong một phần tử dropdown (thẻ select) dựa trên chỉ số của nó (bắt đầu từ 0).",
  "category" : "Web/Interaction",
  "example" : "// Chọn tùy chọn thứ hai trong dropdown quốc gia\nwebKeyword.selectByIndex(countryDropdownObject, 1); // Chỉ số bắt đầu từ 0\nwebKeyword.verifyElementAttribute(selectedCountryObject, \"value\", \"USA\");\n\n// Chọn tùy chọn đầu tiên trong dropdown ngôn ngữ\nwebKeyword.selectByIndex(languageDropdownObject, 0);\nwebKeyword.verifyElementText(selectedLanguageObject, \"English\");\n\n// Chọn tùy chọn cuối cùng trong dropdown\nWebElement dropdown = webKeyword.findElement(categoryDropdownObject);\nSelect select = new Select(dropdown);\nint lastIndex = select.getOptions().size() - 1;\nwebKeyword.selectByIndex(categoryDropdownObject, lastIndex);\n\n// Chọn tùy chọn và kiểm tra sự thay đổi\nwebKeyword.selectByIndex(sortDropdownObject, 2); // Chọn \"Giá: Cao đến thấp\"\nwebKeyword.waitForElementAttributeChange(productListObject, \"data-sort\", \"price-desc\");\n\n// Lặp qua và chọn từng tùy chọn trong dropdown\nWebElement dropdown = webKeyword.findElement(yearDropdownObject);\nSelect select = new Select(dropdown);\nint optionCount = select.getOptions().size();\nfor (int i = 0; i < optionCount; i++) {\n    webKeyword.selectByIndex(yearDropdownObject, i);\n    webKeyword.waitForElementVisible(yearDataObject);\n    // Kiểm tra dữ liệu cho năm đã chọn\n}",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử dropdown phải tồn tại trong DOM", "Phần tử phải là thẻ <select> hợp lệ", "Phần tử phải hiển thị và có thể tương tác được", "Chỉ số phải nằm trong phạm vi hợp lệ (0 đến số lượng tùy chọn - 1)" ],
  "exceptions" : [ "NoSuchElementException: Nếu phần tử dropdown không tồn tại", "ElementNotVisibleException: Nếu phần tử không hiển thị trên trang", "ElementNotInteractableException: Nếu phần tử không thể tương tác", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "IndexOutOfBoundsException: Nếu chỉ số nằm ngoài phạm vi hợp lệ", "UnexpectedTagNameException: Nếu phần tử không phải là thẻ <select>", "TimeoutException: Nếu phần tử không xuất hiện trong thời gian chờ", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "WRITE",
  "stability" : "STABLE",
  "tags" : [ "web", "interaction", "select", "dropdown", "option", "index", "form", "choose", "combobox", "list" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "selectByIndex",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử dropdown (thẻ select)."
  }, {
    "type" : "int",
    "name" : "index",
    "description" : "Chỉ số của tùy chọn cần chọn (ví dụ: 0 cho tùy chọn đầu tiên)."
  } ]
}, {
  "name" : "assertElementEnabled",
  "description" : "Khẳng định rằng một phần tử đang ở trạng thái có thể tương tác (enabled). Nếu phần tử bị vô hiệu hóa (disabled), kịch bản sẽ DỪNG LẠI.",
  "category" : "Web/Assert",
  "example" : "// Kiểm tra nút gửi form đã được kích hoạt sau khi điền đầy đủ thông tin\nwebKeyword.sendKeys(nameInputObject, \"Nguyễn Văn A\");\nwebKeyword.sendKeys(emailInputObject, \"nguyenvana@example.com\");\nwebKeyword.sendKeys(phoneInputObject, \"0123456789\");\nwebKeyword.click(termsCheckboxObject);\nwebKeyword.assertElementEnabled(submitButtonObject);\nwebKeyword.click(submitButtonObject);\n\n// Kiểm tra nút thanh toán đã được kích hoạt sau khi chọn phương thức thanh toán\nwebKeyword.click(creditCardOptionObject);\nwebKeyword.sendKeys(cardNumberInputObject, \"1234567890123456\");\nwebKeyword.sendKeys(cardExpiryInputObject, \"12/25\");\nwebKeyword.sendKeys(cardCvvInputObject, \"123\");\nwebKeyword.assertElementEnabled(payNowButtonObject);\n\n// Kiểm tra nút tiếp tục đã được kích hoạt sau khi hoàn thành bước hiện tại\nwebKeyword.selectByVisibleText(countryDropdownObject, \"Việt Nam\");\nwebKeyword.sendKeys(addressInputObject, \"123 Đường ABC\");\nwebKeyword.sendKeys(cityInputObject, \"Hồ Chí Minh\");\nwebKeyword.assertElementEnabled(nextStepButtonObject);\n\n// Kiểm tra nút tải xuống đã được kích hoạt sau khi chọn tệp\nwebKeyword.click(fileOptionObject);\nwebKeyword.assertElementEnabled(downloadButtonObject);\n\n// Kiểm tra nút đăng ký đã được kích hoạt sau khi đồng ý với điều khoản\nwebKeyword.click(agreeTermsCheckboxObject);\nwebKeyword.assertElementEnabled(registerButtonObject);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần kiểm tra phải tồn tại trong DOM" ],
  "exceptions" : [ "AssertionError: Nếu phần tử đang ở trạng thái disabled", "NoSuchElementException: Nếu không tìm thấy phần tử", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "assert", "verify", "hard", "enabled", "disabled", "state", "interactive", "button", "input" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "assertElementEnabled",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra."
  } ]
}, {
  "name" : "closeSession",
  "description" : "Đóng hoàn toàn phiên làm việc hiện tại (cả trình duyệt web và ứng dụng di động) và giải phóng tài nguyên. Phương thức này nên được gọi ở cuối mỗi test case để đảm bảo tất cả tài nguyên được giải phóng đúng cách.",
  "category" : "Session/Lifecycle",
  "example" : "// Đóng phiên làm việc sau khi hoàn thành test case\ndriverKeyword.closeSession();",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "Đã khởi tạo phiên làm việc trước đó bằng startBrowser hoặc startApplication" ],
  "exceptions" : [ "WebDriverException: Nếu có lỗi khi đóng phiên làm việc" ],
  "platform" : "ALL",
  "systemImpact" : "MODIFY",
  "stability" : "STABLE",
  "tags" : [ "browser", "mobile", "session", "cleanup" ],
  "className" : "com.vtnet.netat.core.keywords.DriverKeyword",
  "methodName" : "closeSession",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "verifyElementAttributeHard",
  "description" : "Kiểm tra giá trị của một thuộc tính (attribute) trên phần tử. Nếu giá trị không khớp, kịch bản sẽ DỪNG LẠI.",
  "category" : "Web/Assert",
  "example" : "// Kiểm tra đường dẫn của liên kết\nwebKeyword.verifyElementAttributeHard(linkObject, \"href\", \"/products/123\");\n\n// Kiểm tra giá trị của trường nhập liệu\nwebKeyword.sendKeys(emailInputObject, \"test@example.com\");\nwebKeyword.verifyElementAttributeHard(emailInputObject, \"value\", \"test@example.com\");\n\n// Kiểm tra trạng thái của checkbox\nwebKeyword.click(termsCheckboxObject);\nwebKeyword.verifyElementAttributeHard(termsCheckboxObject, \"checked\", \"true\");\n\n// Kiểm tra class của phần tử sau khi thay đổi trạng thái\nwebKeyword.click(expandButtonObject);\nwebKeyword.verifyElementAttributeHard(contentPanelObject, \"class\", \"panel-expanded\");\n\n// Kiểm tra thuộc tính data-* tùy chỉnh\nwebKeyword.verifyElementAttributeHard(productCardObject, \"data-product-id\", \"12345\");\n\n// Kiểm tra thuộc tính src của hình ảnh\nwebKeyword.verifyElementAttributeHard(logoImageObject, \"src\", \"https://example.com/logo.png\");\n\n// Kiểm tra thuộc tính disabled của nút\nwebKeyword.verifyElementAttributeHard(submitButtonObject, \"disabled\", \"true\");\nwebKeyword.sendKeys(requiredFieldObject, \"Some value\");\nwebKeyword.verifyElementAttributeHard(submitButtonObject, \"disabled\", null); // Nút không còn bị vô hiệu hóa",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần kiểm tra phải tồn tại trong DOM", "Thuộc tính cần kiểm tra phải tồn tại trên phần tử" ],
  "exceptions" : [ "AssertionError: Nếu giá trị thuộc tính không khớp với giá trị mong đợi", "NoSuchElementException: Nếu không tìm thấy phần tử", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "assert", "verify", "hard", "attribute", "property", "value", "element", "html", "validation" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyElementAttributeHard",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra."
  }, {
    "type" : "String",
    "name" : "attributeName",
    "description" : "Tên của thuộc tính (ví dụ: 'href', 'class', 'value')."
  }, {
    "type" : "String",
    "name" : "expectedValue",
    "description" : "Giá trị mong đợi của thuộc tính."
  } ]
}, {
  "name" : "assertDisabled",
  "description" : "Khẳng định rằng một phần tử đang ở trạng thái không thể tương tác (disabled). Phương thức này kiểm tra thuộc tính 'enabled' của phần tử và ném AssertionError nếu phần tử đang được kích hoạt (enabled). Hữu ích khi cần đảm bảo một nút hoặc trường nhập liệu đã bị vô hiệu hóa trong các trường hợp nhất định.",
  "category" : "Mobile/Assertion",
  "example" : "// Kiểm tra rằng nút đăng nhập bị vô hiệu hóa khi chưa nhập thông tin\nmobileKeyword.assertDisabled(loginButton);\n\n// Xác minh rằng nút tiếp tục bị vô hiệu hóa khi chưa đồng ý điều khoản\nmobileKeyword.assertDisabled(continueButton);\n\n// Kiểm tra rằng trường nhập liệu số tiền bị vô hiệu hóa khi chọn số tiền cố định\nmobileKeyword.tap(fixedAmountOption);\nmobileKeyword.assertDisabled(amountInput);\n\n// Kiểm tra rằng nút xác nhận bị vô hiệu hóa khi thiếu thông tin bắt buộc\nmobileKeyword.assertDisabled(confirmButton);\n\n// Kiểm tra rằng các trường thông tin thẻ tín dụng bị vô hiệu hóa khi chọn phương thức thanh toán khác\nmobileKeyword.tap(paypalOption);\nmobileKeyword.assertDisabled(cardNumberInput);\nmobileKeyword.assertDisabled(expiryDateInput);\n\n// Kiểm tra rằng nút gửi bị vô hiệu hóa sau khi đã gửi thành công\nmobileKeyword.tap(submitButton);\nmobileKeyword.waitForVisible(successMessage, 5);\nmobileKeyword.assertDisabled(submitButton);",
  "returnValue" : "void: Không trả về giá trị, ném AssertionError nếu kiểm tra thất bại",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Phần tử cần kiểm tra phải tồn tại và có thuộc tính 'enabled'", "Phần tử phải là loại có thể được kích hoạt/vô hiệu hóa (button, input, etc.)" ],
  "exceptions" : [ "AssertionError: Nếu phần tử đang ở trạng thái được kích hoạt (enabled)", "NoSuchElementException: Nếu không tìm thấy phần tử", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "WebDriverException: Nếu không thể lấy thuộc tính 'enabled' của phần tử" ],
  "platform" : "MOBILE",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "mobile", "assertion", "disabled", "inactive", "button", "input", "state", "verification" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertDisabled",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra trạng thái."
  } ]
}, {
  "name" : "assertElementNotSelected",
  "description" : "Khẳng định rằng một phần tử (checkbox hoặc radio button) đang ở trạng thái không được chọn. Nếu đang được chọn, kịch bản sẽ DỪNG LẠI.",
  "category" : "Web/Assert",
  "example" : "// Kiểm tra checkbox thông báo chưa được chọn mặc định\nwebKeyword.assertElementNotSelected(newsletterCheckbox);\nwebKeyword.click(newsletterCheckbox); // Chọn để nhận thông báo\n\n// Kiểm tra các tùy chọn bổ sung chưa được chọn\nwebKeyword.assertElementNotSelected(expressShippingRadio);\nwebKeyword.assertElementNotSelected(giftWrappingCheckbox);\nwebKeyword.click(expressShippingRadio); // Chọn vận chuyển nhanh\n\n// Kiểm tra tùy chọn cao cấp chưa được chọn trước khi hiển thị thông tin chi tiết\nwebKeyword.assertElementNotSelected(premiumFeaturesCheckbox);\nwebKeyword.click(premiumFeaturesCheckbox);\nwebKeyword.waitForElementVisible(premiumFeaturesDetailsPanel);\n\n// Kiểm tra radio button phương thức thanh toán chưa được chọn\nwebKeyword.assertElementNotSelected(paypalRadioButton);\nwebKeyword.click(paypalRadioButton);\nwebKeyword.waitForElementVisible(paypalLoginSection);\n\n// Kiểm tra checkbox lưu thông tin thẻ chưa được chọn mặc định\nwebKeyword.assertElementNotSelected(saveCardInfoCheckbox);\nwebKeyword.click(saveCardInfoCheckbox); // Chọn để lưu thông tin thẻ",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần kiểm tra phải tồn tại trong DOM và là checkbox hoặc radio button" ],
  "exceptions" : [ "AssertionError: Nếu phần tử đang ở trạng thái được chọn", "NoSuchElementException: Nếu không tìm thấy phần tử", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt", "IllegalArgumentException: Nếu phần tử không phải là checkbox hoặc radio button" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "assert", "verify", "hard", "selected", "checked", "checkbox", "radio", "state", "input", "unchecked" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "assertElementNotSelected",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử checkbox hoặc radio button cần kiểm tra."
  } ]
}, {
  "name" : "assertAttributeEquals",
  "description" : "Khẳng định rằng một thuộc tính của phần tử có giá trị chính xác như mong đợi. Hữu ích khi cần kiểm tra các thuộc tính đặc biệt như content-desc, resource-id, text, checked, v.v. Phương thức này so sánh chính xác giá trị thuộc tính, phân biệt chữ hoa/thường và khoảng trắng.",
  "category" : "Mobile/Assertion",
  "example" : "// Kiểm tra thuộc tính content-desc của nút\nmobileKeyword.assertAttributeEquals(menuButton, \"content-desc\", \"Menu chính\");\n\n// Xác minh resource-id của một phần tử\nmobileKeyword.assertAttributeEquals(loginButton, \"resource-id\", \"com.example.myapp:id/login_button\");\n\n// Kiểm tra thuộc tính text của nhãn\nmobileKeyword.assertAttributeEquals(statusLabel, \"text\", \"Hoàn thành\");\n\n// Kiểm tra thuộc tính checked của checkbox\nmobileKeyword.tap(rememberMeCheckbox);\nmobileKeyword.assertAttributeEquals(rememberMeCheckbox, \"checked\", \"true\");\n\n// Kiểm tra thuộc tính enabled của nút\nmobileKeyword.assertAttributeEquals(submitButton, \"enabled\", \"true\");\n\n// Kiểm tra thuộc tính selected của tab\nmobileKeyword.tap(profileTab);\nmobileKeyword.assertAttributeEquals(profileTab, \"selected\", \"true\");\n\n// Kiểm tra thuộc tính package để xác minh ứng dụng\nmobileKeyword.assertAttributeEquals(anyElement, \"package\", \"com.example.myapp\");",
  "returnValue" : "void: Không trả về giá trị, ném AssertionError nếu kiểm tra thất bại",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Phần tử cần kiểm tra phải tồn tại", "Thuộc tính cần kiểm tra phải tồn tại trên phần tử", "Cần biết chính xác tên thuộc tính theo nền tảng (Android/iOS có thể khác nhau)" ],
  "exceptions" : [ "AssertionError: Nếu giá trị thuộc tính không khớp với giá trị mong đợi", "NoSuchElementException: Nếu không tìm thấy phần tử", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "WebDriverException: Nếu không thể lấy thuộc tính của phần tử" ],
  "platform" : "MOBILE",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "mobile", "assertion", "attribute", "property", "exact match", "verification", "equality" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertAttributeEquals",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra thuộc tính."
  }, {
    "type" : "String",
    "name" : "attributeName",
    "description" : "Tên thuộc tính cần kiểm tra (ví dụ: 'content-desc', 'text', 'resource-id')."
  }, {
    "type" : "String",
    "name" : "expectedValue",
    "description" : "Giá trị mong đợi của thuộc tính."
  } ]
}, {
  "name" : "click",
  "description" : "Thực hiện hành động click chuột vào một phần tử trên giao diện. Keyword sẽ tự động chờ cho đến khi phần tử sẵn sàng để được click.",
  "category" : "Web/Interaction",
  "example" : "// Click vào nút đăng nhập\nwebKeyword.click(loginButtonObject);\n\n// Click vào liên kết\nwebKeyword.click(registerLinkObject);\n\n// Click vào tab\nwebKeyword.click(productTabObject);\nwebKeyword.waitForElementVisible(productListObject);\n\n// Click vào nút tìm kiếm sau khi nhập từ khóa\nwebKeyword.sendKeys(searchInputObject, \"laptop\");\nwebKeyword.click(searchButtonObject);\n\n// Click để mở dropdown menu\nwebKeyword.click(dropdownMenuObject);\nwebKeyword.waitForElementVisible(dropdownItemsObject);\nwebKeyword.click(dropdownItemObject);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần click phải tồn tại trong DOM", "Phần tử phải hiển thị và có thể tương tác được", "Phần tử không bị che khuất bởi các phần tử khác" ],
  "exceptions" : [ "ElementNotVisibleException: Nếu phần tử không hiển thị trên trang", "ElementClickInterceptedException: Nếu phần tử bị che khuất bởi phần tử khác", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "TimeoutException: Nếu phần tử không xuất hiện trong thời gian chờ", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "WRITE",
  "stability" : "STABLE",
  "tags" : [ "web", "interaction", "click", "button", "link", "element", "action", "mouse", "tap" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "click",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng giao diện (nút bấm, liên kết,...) cần thực hiện hành động click."
  } ]
}, {
  "name" : "waitForElementPresent",
  "description" : "Tạm dừng kịch bản cho đến khi một phần tử tồn tại trong DOM của trang, không nhất thiết phải hiển thị. Hữu ích để chờ các phần tử được tạo ra bởi JavaScript.",
  "category" : "Web/Wait",
  "example" : "// Chờ phần tử động được tạo bởi JavaScript\nwebKeyword.click(loadDynamicContentButton);\nwebKeyword.waitForElementPresent(dynamicContentObject, 10);\nwebKeyword.verifyElementPresent(dynamicContentObject);\n\n// Chờ phần tử trong iframe được tải\nwebKeyword.switchToFrame(iframeObject);\nwebKeyword.waitForElementPresent(iframeContentObject, 15);\nwebKeyword.verifyElementText(iframeContentObject, \"Nội dung trong iframe\");\nwebKeyword.switchToDefaultContent();\n\n// Chờ phần tử được tạo sau khi gọi API\nwebKeyword.click(fetchDataButtonObject);\nwebKeyword.waitForElementPresent(dataContainerObject, 20);\nwebKeyword.verifyElementAttributeValue(dataContainerObject, \"data-loaded\", \"true\");\n\n// Chờ phần tử được tạo sau khi chọn tùy chọn\nwebKeyword.selectByVisibleText(categoryDropdownObject, \"Điện thoại\");\nwebKeyword.waitForElementPresent(subcategoryListObject, 5);\nwebKeyword.verifyElementCount(subcategoryItemObject, 5);\n\n// Chờ phần tử được tạo sau khi tải trang, với timeout dài hơn\nwebKeyword.navigateToUrl(\"https://example.com/heavy-page\");\nwebKeyword.waitForElementPresent(complexWidgetObject, 30);\nwebKeyword.click(widgetButtonObject);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Locator của phần tử phải hợp lệ", "Phần tử sẽ được thêm vào DOM trong khoảng thời gian chờ đã chỉ định" ],
  "exceptions" : [ "TimeoutException: Nếu phần tử không xuất hiện trong DOM trong thời gian chờ đã chỉ định", "InvalidSelectorException: Nếu locator không hợp lệ", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "wait", "synchronization", "present", "dom", "exist", "element", "condition", "timeout", "javascript" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "waitForElementPresent",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần chờ cho đến khi nó tồn tại."
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa (tính bằng giây)."
  } ]
}, {
  "name" : "clickElementByIndex",
  "description" : "Click vào một phần tử cụ thể trong một danh sách các phần tử dựa trên chỉ số (index) của nó (bắt đầu từ 0).",
  "category" : "Web/Interaction",
  "example" : "// Click vào kết quả tìm kiếm thứ 3\nwebKeyword.clickElementByIndex(searchResultLinks, 2); // Index bắt đầu từ 0\nwebKeyword.waitForPageToLoad();\nwebKeyword.verifyElementVisible(productDetailPage);\n\n// Click vào mục đầu tiên trong danh sách\nwebKeyword.clickElementByIndex(menuItems, 0);\nwebKeyword.waitForElementVisible(firstMenuContent);\n\n// Click vào nút xóa của hàng thứ 2 trong bảng\nwebKeyword.clickElementByIndex(deleteButtons, 1);\nwebKeyword.waitForElementVisible(confirmDeleteDialog);\nwebKeyword.click(confirmButton);\n\n// Kiểm tra số lượng phần tử trước khi click\nList<WebElement> items = webKeyword.findElements(listItemsObject);\nif (items.size() > 3) {\n    webKeyword.clickElementByIndex(listItemsObject, 3);\n} else {\n    System.out.println(\"Không đủ phần tử để click vào vị trí thứ 4\");\n}\n\n// Click vào phần tử cuối cùng trong danh sách\nList<WebElement> tabs = webKeyword.findElements(tabsObject);\nwebKeyword.clickElementByIndex(tabsObject, tabs.size() - 1);\nwebKeyword.waitForElementVisible(lastTabContent);",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Danh sách phần tử phải tồn tại trong DOM", "Chỉ số phải nằm trong phạm vi hợp lệ (0 đến số lượng phần tử - 1)", "Phần tử tại chỉ số cần click phải hiển thị và có thể tương tác được" ],
  "exceptions" : [ "IndexOutOfBoundsException: Nếu chỉ số nằm ngoài phạm vi hợp lệ", "ElementNotVisibleException: Nếu phần tử không hiển thị trên trang", "ElementNotInteractableException: Nếu phần tử không thể tương tác", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "TimeoutException: Nếu phần tử không xuất hiện trong thời gian chờ", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt", "NoSuchElementException: Nếu danh sách phần tử không tồn tại" ],
  "platform" : "WEB",
  "systemImpact" : "WRITE",
  "stability" : "STABLE",
  "tags" : [ "web", "interaction", "click", "index", "list", "collection", "array", "element", "position", "multiple" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "clickElementByIndex",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng giao diện đại diện cho danh sách phần tử."
  }, {
    "type" : "int",
    "name" : "index",
    "description" : "Vị trí của phần tử cần click (0 cho phần tử đầu tiên)."
  } ]
}, {
  "name" : "getCookie",
  "description" : "Lấy thông tin của một cookie cụ thể dựa trên tên của nó.",
  "category" : "Web/Storage",
  "example" : "// Kiểm tra cookie phiên làm việc\nCookie sessionCookie = webKeyword.getCookie(\"session_id\");\nif (sessionCookie == null) {\n    logger.info(\"Người dùng chưa đăng nhập\");\n    webKeyword.navigate(\"https://example.com/login\");\n} else {\n    logger.info(\"Phiên làm việc: \" + sessionCookie.getValue());\n}\n\n// Kiểm tra thời hạn cookie\nCookie authCookie = webKeyword.getCookie(\"auth_token\");\nlogger.info(\"Cookie hết hạn vào: \" + authCookie.getExpiry());",
  "returnValue" : "Cookie: Đối tượng Cookie chứa thông tin của cookie được yêu cầu, hoặc null nếu không tìm thấy",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Trang web đã được tải hoàn toàn" ],
  "exceptions" : [ "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "cookie", "session", "get", "browser", "authentication", "storage", "http" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "getCookie",
  "returnType" : "Cookie",
  "parameters" : [ {
    "type" : "String",
    "name" : "cookieName",
    "description" : "Tên của cookie cần lấy."
  } ]
}, {
  "name" : "clearLocalStorage",
  "description" : "Xóa toàn bộ dữ liệu đang được lưu trữ trong Local Storage của trang web hiện tại.",
  "category" : "Web/Storage",
  "example" : "// Đăng xuất và xóa dữ liệu người dùng\nwebKeyword.click(logoutButtonObject);\nwebKeyword.clearLocalStorage();\nwebKeyword.navigate(\"https://example.com/login\");\n\n// Xóa dữ liệu trước khi chạy kiểm thử\nwebKeyword.navigate(\"https://example.com\");\nwebKeyword.clearLocalStorage();\nwebKeyword.refreshPage();",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Trang web đã được tải hoàn toàn", "Trình duyệt hỗ trợ Local Storage" ],
  "exceptions" : [ "JavascriptException: Nếu có lỗi khi thực thi JavaScript", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "WRITE",
  "stability" : "STABLE",
  "tags" : [ "web", "storage", "local-storage", "clear", "reset", "cleanup", "browser", "javascript", "delete" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "clearLocalStorage",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "scrollToTop",
  "description" : "Cuộn lên vị trí cao nhất (đầu trang) của trang web.",
  "category" : "Web/Interaction",
  "example" : "// Cuộn lên đầu trang để truy cập menu chính\nwebKeyword.scrollToTop();\nwebKeyword.verifyElementVisible(mainMenuObject);\nwebKeyword.click(homeMenuItemObject);\n\n// Cuộn xuống để xem sản phẩm, sau đó cuộn lại lên đầu trang\nwebKeyword.scrollToElement(productSectionObject);\nwebKeyword.verifyElementVisible(productItemObject);\nwebKeyword.scrollToTop();\nwebKeyword.verifyElementVisible(headerLogoObject);\n\n// Cuộn lên đầu trang sau khi hoàn thành form dài\nwebKeyword.sendKeys(lastFormFieldObject, \"Test data\");\nwebKeyword.click(submitButtonObject);\nwebKeyword.waitForElementVisible(confirmationMessageObject);\nwebKeyword.scrollToTop();\n\n// Kiểm tra sticky header sau khi cuộn lên đầu trang\nwebKeyword.scrollToBottom();\nwebKeyword.verifyElementAttributeValue(headerObject, \"class\", \"contains\", \"sticky\");\nwebKeyword.scrollToTop();\nwebKeyword.verifyElementAttributeValue(headerObject, \"class\", \"not contains\", \"sticky\");\n\n// Cuộn lên đầu trang để reset trạng thái trang\nwebKeyword.scrollToTop();\nwebKeyword.executeJavaScript(\"return window.pageYOffset\", (yOffset) -> {\n    webKeyword.verifyEqual(yOffset, 0);\n    return null;\n});",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Trình duyệt phải hỗ trợ thực thi JavaScript" ],
  "exceptions" : [ "JavascriptException: Nếu có lỗi khi thực thi JavaScript", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "interaction", "scroll", "top", "page", "navigation", "position", "viewport", "javascript" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "scrollToTop",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "assertNotChecked",
  "description" : "Khẳng định rằng một switch, checkbox hoặc radio button đang ở trạng thái không được chọn/tắt. Phương thức này kiểm tra thuộc tính 'checked' của phần tử và ném AssertionError nếu phần tử đang được chọn. Áp dụng cho các phần tử có thể chọn/bỏ chọn như checkbox, radio button, toggle switch. Lưu ý: Phần tử phải hỗ trợ thuộc tính 'checked', nếu không có thể gây ra lỗi.",
  "category" : "Mobile/Assertion",
  "example" : "// Kiểm tra rằng tùy chọn chưa được chọn ban đầu\nmobileKeyword.assertNotChecked(optionalFeatureCheckbox);\n\n// Kiểm tra rằng công tắc đã được tắt sau khi tap\nmobileKeyword.tap(enabledSwitch); // Giả sử ban đầu đã bật\nmobileKeyword.assertNotChecked(enabledSwitch);\n\n// Xác minh rằng các radio button khác không được chọn\nmobileKeyword.tap(option1RadioButton);\nmobileKeyword.assertChecked(option1RadioButton);\nmobileKeyword.assertNotChecked(option2RadioButton);\nmobileKeyword.assertNotChecked(option3RadioButton);\n\n// Kiểm tra trạng thái mặc định của một tùy chọn nâng cao\nmobileKeyword.assertNotChecked(advancedFeaturesCheckbox);\n\n// Kiểm tra rằng các tùy chọn đã được bỏ chọn sau khi reset\nmobileKeyword.tap(resetButton);\nmobileKeyword.assertNotChecked(option1Checkbox);\nmobileKeyword.assertNotChecked(option2Checkbox);",
  "returnValue" : "void: Không trả về giá trị, ném AssertionError nếu kiểm tra thất bại",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Phần tử cần kiểm tra phải tồn tại và có thuộc tính 'checked'", "Phần tử phải là loại có thể chọn/bỏ chọn (checkbox, radio button, switch)" ],
  "exceptions" : [ "AssertionError: Nếu phần tử đang ở trạng thái được chọn/bật", "NoSuchElementException: Nếu không tìm thấy phần tử", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "WebDriverException: Nếu không thể lấy thuộc tính 'checked' của phần tử" ],
  "platform" : "MOBILE",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "mobile", "assertion", "checkbox", "radio", "switch", "toggle", "state", "unchecked", "off" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertNotChecked",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra trạng thái."
  } ]
}, {
  "name" : "pressKeys",
  "description" : "Gửi một chuỗi ký tự hoặc một tổ hợp phím (ví dụ: Ctrl+C, Enter) tới phần tử đang được focus trên trình duyệt.",
  "category" : "Web/Interaction",
  "example" : "// Gửi tổ hợp phím Ctrl + A để chọn tất cả\nwebKeyword.pressKeys(Keys.CONTROL, \"a\");\n\n// Gửi phím Enter để xác nhận form\nwebKeyword.sendKeys(searchInputObject, \"laptop\");\nwebKeyword.pressKeys(Keys.ENTER);\nwebKeyword.waitForElementVisible(searchResultsObject);\n\n// Gửi phím Tab để di chuyển giữa các trường form\nwebKeyword.sendKeys(usernameInputObject, \"testuser\");\nwebKeyword.pressKeys(Keys.TAB);\nwebKeyword.sendKeys(passwordInputObject, \"password123\");\n\n// Sao chép văn bản đã chọn\nwebKeyword.doubleClick(textObject); // Chọn văn bản\nwebKeyword.pressKeys(Keys.CONTROL, \"c\"); // Sao chép\nwebKeyword.click(anotherInputObject);\nwebKeyword.pressKeys(Keys.CONTROL, \"v\"); // Dán\n\n// Sử dụng phím mũi tên để điều hướng\nwebKeyword.click(listItemObject);\nwebKeyword.pressKeys(Keys.ARROW_DOWN, Keys.ARROW_DOWN); // Di chuyển xuống 2 mục\nwebKeyword.pressKeys(Keys.ENTER); // Chọn mục hiện tại",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần nhận tổ hợp phím phải đang được focus", "Trình duyệt phải hỗ trợ các tổ hợp phím được sử dụng", "Các phím đặc biệt phải được định nghĩa trong org.openqa.selenium.Keys" ],
  "exceptions" : [ "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt", "NoSuchSessionException: Nếu phiên WebDriver không còn hợp lệ", "UnsupportedOperationException: Nếu trình duyệt không hỗ trợ thao tác phím được yêu cầu", "IllegalArgumentException: Nếu tham số keys không hợp lệ" ],
  "platform" : "WEB",
  "systemImpact" : "WRITE",
  "stability" : "STABLE",
  "tags" : [ "web", "interaction", "keyboard", "shortcut", "hotkey", "key", "press", "combination", "input", "action" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "pressKeys",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "CharSequence[]",
    "name" : "keys",
    "description" : "Một hoặc nhiều chuỗi ký tự hoặc phím đặc biệt từ org.openqa.selenium.Keys."
  } ]
}, {
  "name" : "verifyTextHard",
  "description" : "So sánh văn bản của một phần tử với một chuỗi ký tự mong đợi (phải khớp chính xác). Nếu không khớp, kịch bản sẽ DỪNG LẠI.",
  "category" : "Web/Assert",
  "example" : "// Kiểm tra tiêu đề trang chính xác\nwebKeyword.verifyTextHard(pageTitleObject, \"Chào mừng đến với trang chủ\");\n\n// Kiểm tra thông báo lỗi chính xác\nwebKeyword.click(submitButtonObject); // Gửi form không hợp lệ\nwebKeyword.verifyTextHard(emailErrorObject, \"Email không được để trống\");\n\n// Kiểm tra kết quả tính toán\nwebKeyword.sendKeys(number1InputObject, \"5\");\nwebKeyword.sendKeys(number2InputObject, \"7\");\nwebKeyword.click(calculateButtonObject);\nwebKeyword.verifyTextHard(resultObject, \"12\");\n\n// Kiểm tra tên người dùng sau khi đăng nhập\nwebKeyword.sendKeys(usernameInputObject, \"testuser\");\nwebKeyword.sendKeys(passwordInputObject, \"password123\");\nwebKeyword.click(loginButtonObject);\nwebKeyword.waitForElementVisible(welcomeMessageObject);\nwebKeyword.verifyTextHard(userDisplayNameObject, \"Test User\");\n\n// Kiểm tra giá trị được hiển thị sau khi chọn\nwebKeyword.selectByVisibleText(countryDropdownObject, \"Việt Nam\");\nwebKeyword.verifyTextHard(selectedCountryObject, \"Việt Nam\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Phần tử cần kiểm tra phải tồn tại trong DOM và có văn bản" ],
  "exceptions" : [ "AssertionError: Nếu văn bản của phần tử không khớp với giá trị mong đợi", "NoSuchElementException: Nếu không tìm thấy phần tử", "StaleElementReferenceException: Nếu phần tử không còn gắn với DOM", "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "assert", "verify", "hard", "text", "content", "exact", "match", "string", "validation" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyTextHard",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử chứa văn bản cần kiểm tra."
  }, {
    "type" : "String",
    "name" : "expectedText",
    "description" : "Chuỗi văn bản mong đợi."
  } ]
}, {
  "name" : "assertElementNotPresent",
  "description" : "Khẳng định rằng một phần tử KHÔNG tồn tại trong cấu trúc màn hình sau một khoảng thời gian chờ. Hữu ích để xác minh rằng một phần tử đã bị xóa hoặc chưa được tạo. Phương thức sẽ đợi trong khoảng thời gian chỉ định và kiểm tra xem phần tử có xuất hiện không, nếu phần tử xuất hiện trong thời gian đó, một AssertionError sẽ được ném ra.",
  "category" : "Mobile/Assertion",
  "example" : "// Kiểm tra rằng thông báo lỗi không xuất hiện sau khi nhập đúng thông tin\nmobileKeyword.assertElementNotPresent(errorMessage, 3);\n\n// Xác minh rằng màn hình loading đã biến mất sau khi tải xong\nmobileKeyword.assertElementNotPresent(loadingSpinner, 10);\n\n// Kiểm tra rằng popup quảng cáo không xuất hiện sau khi đăng nhập\nmobileKeyword.tap(loginButton);\nmobileKeyword.assertElementNotPresent(advertisementPopup, 5);\n\n// Kiểm tra rằng thông báo hết hàng không xuất hiện\nmobileKeyword.tap(addToCartButton);\nmobileKeyword.assertElementNotPresent(outOfStockMessage, 2);\n\n// Kiểm tra rằng biểu tượng đang tải đã biến mất sau khi hoàn thành\nmobileKeyword.tap(refreshButton);\nmobileKeyword.assertElementNotPresent(loadingIcon, 8);",
  "returnValue" : "void: Không trả về giá trị, ném AssertionError nếu kiểm tra thất bại",
  "prerequisites" : [ "Thiết bị di động đã được kết nối và cấu hình đúng với Appium", "Locator của phần tử cần kiểm tra phải hợp lệ" ],
  "exceptions" : [ "AssertionError: Nếu phần tử xuất hiện trong khoảng thời gian chờ", "WebDriverException: Nếu có lỗi khi tương tác với trình điều khiển" ],
  "platform" : "MOBILE",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "mobile", "assertion", "absence", "verification", "not present", "removed", "hidden", "deleted" ],
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertElementNotPresent",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra sự không tồn tại."
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian tối đa (giây) để đợi và xác nhận phần tử không xuất hiện."
  } ]
}, {
  "name" : "verifyUrlSoft",
  "description" : "So sánh URL của trang hiện tại với một chuỗi mong đợi. Nếu không khớp, kịch bản sẽ ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Web/Assert",
  "example" : "// Kiểm tra URL trong quy trình nhiều bước\nwebKeyword.click(nextButtonObject);\nwebKeyword.waitForPageLoaded(10);\nwebKeyword.verifyUrlSoft(\"https://example.com/checkout/step1\");\nwebKeyword.fillCheckoutForm(); // Tiếp tục quy trình ngay cả khi URL không đúng\n\n// Kiểm tra nhiều điều kiện bao gồm URL\nwebKeyword.verifyElementVisibleSoft(pageHeaderObject, true);\nwebKeyword.verifyUrlSoft(\"https://example.com/products\");\nwebKeyword.verifyTextSoft(categoryTitleObject, \"Danh mục sản phẩm\");\nwebKeyword.click(firstProductObject); // Tiếp tục thực hiện hành động\n\n// Kiểm tra URL sau khi áp dụng bộ lọc\nwebKeyword.click(filterButtonObject);\nwebKeyword.click(priceRangeObject);\nwebKeyword.click(applyFilterButtonObject);\nwebKeyword.waitForPageLoaded(15);\nwebKeyword.verifyUrlSoft(\"https://example.com/products?filter=price&range=1000-2000\");\n\n// Kiểm tra URL sau khi thêm sản phẩm vào giỏ hàng\nwebKeyword.click(addToCartButtonObject);\nwebKeyword.waitForElementVisible(cartConfirmationObject);\nwebKeyword.verifyUrlSoft(\"https://example.com/products?cart=updated\");\nwebKeyword.click(continueShoppingButtonObject); // Tiếp tục mua sắm\n\n// Kiểm tra URL sau khi tìm kiếm\nwebKeyword.sendKeys(searchInputObject, \"laptop\");\nwebKeyword.click(searchButtonObject);\nwebKeyword.waitForPageLoaded(10);\nwebKeyword.verifyUrlSoft(\"https://example.com/search?q=laptop\");",
  "returnValue" : "void: Không trả về giá trị",
  "prerequisites" : [ "WebDriver đã được khởi tạo và đang hoạt động", "Trang web đã hoàn thành quá trình tải" ],
  "exceptions" : [ "WebDriverException: Nếu có lỗi khi tương tác với trình duyệt" ],
  "platform" : "WEB",
  "systemImpact" : "READ",
  "stability" : "STABLE",
  "tags" : [ "web", "assert", "verify", "soft", "url", "address", "location", "navigation", "browser", "validation" ],
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyUrlSoft",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "expectedUrl",
    "description" : "URL đầy đủ mong đợi."
  } ]
} ]