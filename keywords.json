[ {
  "name" : "assertAttributeContains",
  "description" : "Khẳng định rằng giá trị của một thuộc tính có chứa một chuỗi con. Khác với assertAttributeEquals, phương thức này chỉ kiểm tra sự xuất hiện của chuỗi con trong giá trị thuộc tính, không yêu cầu khớp hoàn toàn. Hữu ích khi giá trị thuộc tính có thể thay đổi nhưng vẫn chứa các phần quan trọng cần kiểm tra.",
  "category" : "Mobile",
  "subCategory" : "Assertion",
  "example" : "// Kiểm tra thuộc tính content-desc có chứa từ khóa\nmobileKeyword.assertAttributeContains(productItem, \"content-desc\", \"iPhone\");\n\n// Với custom message\nmobileKeyword.assertAttributeContains(productItem, \"content-desc\", \"iPhone\", \n    \"Content description của sản phẩm phải chứa từ 'iPhone'\");\n\n// Xác minh resource-id có chứa phần nhất định\nmobileKeyword.assertAttributeContains(anyElement, \"resource-id\", \"button_\", \n    \"Resource ID phải chứa prefix 'button_' theo quy ước đặt tên\");\n\n// Kiểm tra class name chứa thông tin cần thiết\nmobileKeyword.assertAttributeContains(inputField, \"class\", \"EditText\", \n    \"Class name phải chứa 'EditText' để xác nhận đây là trường nhập liệu\");\nmobileKeyword.assertAttributeContains(imageView, \"class\", \"ImageView\", \n    \"Class name phải chứa 'ImageView' để xác nhận đây là thành phần hiển thị hình ảnh\");",
  "returnValue" : "void - Không trả về giá trị, ném AssertionError nếu kiểm tra thất bại",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Phần tử cần kiểm tra phải tồn tại, thuộc tính cần kiểm tra phải tồn tại trên phần tử, và cần biết chính xác tên thuộc tính theo nền tảng (Android/iOS có thể khác nhau). Có thể throw AssertionError nếu giá trị thuộc tính không chứa chuỗi con mong đợi, NoSuchElementException nếu không tìm thấy phần tử, StaleElementReferenceException nếu phần tử không còn gắn với DOM, WebDriverException nếu không thể lấy thuộc tính của phần tử, hoặc NullPointerException nếu giá trị thuộc tính là null.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertAttributeContains",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra thuộc tính"
  }, {
    "type" : "String",
    "name" : "attributeName",
    "description" : "Tên thuộc tính cần kiểm tra"
  }, {
    "type" : "String",
    "name" : "partialValue",
    "description" : "Chuỗi con cần tìm trong giá trị thuộc tính"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "switchToWindowByTitle",
  "description" : "Duyệt qua tất cả các cửa sổ hoặc tab đang mở và chuyển sự điều khiển of WebDriver sang cửa sổ/tab có tiêu đề khớp chính xác với chuỗi được cung cấp.",
  "category" : "Web",
  "subCategory" : "Window&Frame",
  "example" : "// Chuyển sang tab chi tiết sản phẩm\nwebKeyword.click(viewDetailsLinkObject); // Mở tab mới\nwebKeyword.switchToWindowByTitle(\"Chi tiết sản phẩm ABC\");\n\n// Chuyển sang tab thanh toán\nwebKeyword.click(checkoutButtonObject);\nwebKeyword.switchToWindowByTitle(\"Thanh toán đơn hàng\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, có ít nhất một cửa sổ/tab đang mở với tiêu đề cần chuyển đến. Có thể throw NoSuchWindowException nếu không tìm thấy cửa sổ nào có tiêu đề được chỉ định, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "switchToWindowByTitle",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "windowTitle",
    "description" : "Tiêu đề chính xác of cửa sổ hoặc tab cần chuyển đến"
  } ]
}, {
  "name" : "assertNotEquals",
  "description" : "Kiểm tra 2 giá trị KHÁC NHAU",
  "category" : "API",
  "subCategory" : "Assertion - General",
  "example" : "verify.assertNotEquals(actualValue, forbiddenValue);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiAssert",
  "methodName" : "assertNotEquals",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "Object",
    "name" : "actual",
    "description" : ""
  }, {
    "type" : "Object",
    "name" : "unexpected",
    "description" : ""
  } ]
}, {
  "name" : "deleteAllCookies",
  "description" : "Xóa tất cả các cookie of phiên làm việc hiện tại trên trình duyệt.",
  "category" : "Web",
  "subCategory" : "Storage",
  "example" : "// Đăng xuất và xóa cookies\nwebKeyword.click(logoutButtonObject);\nwebKeyword.deleteAllCookies();\nwebKeyword.navigate(\"https://example.com/login\");\n\n// Thiết lập lại trạng thái trình duyệt\nwebKeyword.deleteAllCookies();\nwebKeyword.clearLocalStorage();\nwebKeyword.navigate(\"https://example.com\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "deleteAllCookies",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "headerExists",
  "description" : "Kiểm tra header TỒN TẠI",
  "category" : "API",
  "subCategory" : "Assertion - Headers",
  "example" : "verify.headerExists(response, \"Authorization\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiAssert",
  "methodName" : "headerExists",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ApiResponse",
    "name" : "response",
    "description" : ""
  }, {
    "type" : "String",
    "name" : "headerName",
    "description" : ""
  } ]
}, {
  "name" : "clickAndSwitchToNewTab",
  "description" : "Click vào một element (thường is link) và tự động chuyển sự điều khiển sang tab/cửa sổ mới vừa được mở ra.",
  "category" : "Web",
  "subCategory" : "Window&Frame",
  "example" : "// Click vào liên kết mở trong tab mới\nwebKeyword.clickAndSwitchToNewTab(externalLinkObject);\nwebKeyword.waitForPageLoaded();\n\n// Click vào nút xem chi tiết sản phẩm\nwebKeyword.clickAndSwitchToNewTab(viewDetailsButtonObject);\nwebKeyword.verifyElementVisibleHard(productSpecificationsObject, 10);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần click phải tồn tại trong DOM và có khả năng mở tab mới (ví dụ: có thuộc tính target='_blank'). Có thể throw NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, TimeoutException nếu tab mới không mở trong thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "clickAndSwitchToNewTab",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element link cần click"
  } ]
}, {
  "name" : "verifyTextSoft",
  "description" : "So sánh text của một element với một chuỗi ký tự mong đợi (phải khớp chính xác). Nếu không khớp, kịch bản sẽ ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify nhãn trên form đăng nhập\nwebKeyword.verifyTextSoft(usernameLabelObject, \"Tên đăng nhập\");\nwebKeyword.verifyTextSoft(passwordLabelObject, \"Mật khẩu\");\n// Kịch bản tiếp tục ngay cả khi có nhãn không khớp\n\n// Verify nhiều giá trị hiển thị với custom message\nwebKeyword.verifyTextSoft(productNameObject, \"Điện thoại thông minh X1\", \"Tên sản phẩm không đúng\");\nwebKeyword.verifyTextSoft(productPriceObject, \"5.990.000 ₫\", \"Giá sản phẩm hiển thị sai\");\nwebKeyword.click(addToCartButtonObject); // Tiếp tục thực hiện hành động",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và element cần Verify phải tồn tại trong DOM và có text. Có thể throw NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyTextSoft",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element chứa text cần Verify"
  }, {
    "type" : "String",
    "name" : "expectedText",
    "description" : "Chuỗi text mong đợi"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "assertTrue",
  "description" : "Khẳng định rằng một điều kiện có giá trị true. Nếu điều kiện là false, test case sẽ dừng lại và báo lỗi.",
  "category" : "Assertion",
  "subCategory" : "HardAssert",
  "example" : "assertTrue(isElementVisible);\nassertTrue(isLoggedIn, \"Người dùng phải đã đăng nhập\");\nassertTrue(isFormValid, \"Form phải hợp lệ trước khi submit\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Assertion này kiểm tra điều kiện boolean phải là true. Thường được sử dụng để kiểm tra trạng thái hoặc kết quả của các phép so sánh.",
  "className" : "com.vtnet.netat.core.keywords.AssertionKeyword",
  "methodName" : "assertTrue",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "boolean",
    "name" : "condition",
    "description" : "Điều kiện boolean cần kiểm tra (phải là true)"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "verifyOptionSelectedByLabelHard",
  "description" : "Khẳng định rằng option có text hiển thị (label) cụ thể đang được chọn trong dropdown.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify quốc gia đã chọn\nwebKeyword.selectByVisibleText(countryDropdown, \"Việt Nam\");\nwebKeyword.verifyOptionSelectedByLabelHard(countryDropdown, \"Việt Nam\");\n\n// Verify danh mục đã chọn với custom message\nwebKeyword.verifyOptionSelectedByLabelHard(categoryDropdown, \"Điện thoại\", \n    \"Danh mục điện thoại phải được chọn\");\n\n// Verify trạng thái đơn hàng\nwebKeyword.verifyOptionSelectedByLabelHard(statusDropdown, \"Đang xử lý\", \n    \"Trạng thái đơn hàng phải là 'Đang xử lý'\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần Verify phải là thẻ select và tồn tại trong DOM. Có thể throw AssertionError nếu option được chọn không khớp với option mong đợi, NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, WebDriverException nếu có lỗi khi tương tác với trình duyệt, hoặc UnexpectedTagNameException nếu element không phải là thẻ select.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyOptionSelectedByLabelHard",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element dropdown (thẻ select)"
  }, {
    "type" : "String",
    "name" : "expectedLabel",
    "description" : "text hiển thị của option mong đợi"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "addQueryParam",
  "description" : "Thêm query parameter",
  "category" : "API",
  "subCategory" : "Parameters",
  "example" : "api.addQueryParam(\"page\", 1);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiKeyword",
  "methodName" : "addQueryParam",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "paramName",
    "description" : "Tên parameter"
  }, {
    "type" : "Object",
    "name" : "paramValue",
    "description" : "Giá trị parameter"
  } ]
}, {
  "name" : "assertElementPresent",
  "description" : "Khẳng định rằng một phần tử tồn tại trong cấu trúc DOM của màn hình, không nhất thiết phải hiển thị. Phương thức này kiểm tra ngay lập tức (timeout = 0) và ném AssertionError nếu phần tử không tồn tại. Chỉ kiểm tra sự tồn tại, không kiểm tra tính hiển thị của phần tử.",
  "category" : "Mobile",
  "subCategory" : "Assertion",
  "example" : "// Kiểm tra nút đăng nhập tồn tại\nmobileKeyword.assertElementPresent(loginButton);\n\n// Với custom message\nmobileKeyword.assertElementPresent(loginButton, \"Nút đăng nhập phải tồn tại trên màn hình\");\n\n// Kiểm tra nhiều element với custom message\nmobileKeyword.assertElementPresent(usernameField, \"Trường username phải có trong form\");\nmobileKeyword.assertElementPresent(passwordField, \"Trường password phải có trong form\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Đã xác định chính xác phần tử UI cần kiểm tra. Có thể throw AssertionError nếu phần tử không tồn tại trong DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình điều khiển.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertElementPresent",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra sự tồn tại"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "sendText",
  "description" : "Nhập văn bản vào một ô input có thể chỉnh sửa. Chỉ hoạt động với các phần tử có thuộc tính 'editable' là true như TextField, EditText, TextArea, v.v. Không thể sử dụng với các phần tử không cho phép nhập liệu như Button, Label.",
  "category" : "Mobile",
  "subCategory" : "Interaction",
  "example" : "// Nhập tên đăng nhập vào ô username\nmobileKeyword.sendText(usernameInput, \"admin@example.com\");\n\n// Nhập mật khẩu vào ô password\nmobileKeyword.sendText(passwordInput, \"SecurePassword123\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Phần tử UI cần phải là trường nhập liệu có thể chỉnh sửa. Có thể throw ElementNotVisibleException nếu phần tử không hiển thị, NoSuchElementException nếu không tìm thấy phần tử, hoặc ElementNotInteractableException nếu phần tử không thể tương tác hoặc không phải trường nhập liệu.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "sendText",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng đầu vào có thể chỉnh sửa (như TextField, EditText)"
  }, {
    "type" : "String",
    "name" : "text",
    "description" : "Văn bản cần nhập vào phần tử"
  } ]
}, {
  "name" : "uncheck",
  "description" : "Verify và đảm bảo một checkbox đang ở trạng thái không được chọn. Nếu element đang được chọn, keyword sẽ thực hiện click để bỏ chọn nó.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Bỏ chọn checkbox đăng ký nhận bản tin\nwebKeyword.uncheck(newsletterCheckbox);\n\n// Bỏ chọn option gửi hàng nhanh\nwebKeyword.uncheck(expressShippingCheckbox);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần bỏ chọn phải tồn tại trong DOM, phải hiển thị và có thể tương tác được, phải is checkbox (input type=\"checkbox\"), và lưu ý phương thức này chỉ hoạt động với checkbox, không dùng cho radio button. Có thể throw ElementNotVisibleException nếu element không hiển thị trên trang, ElementNotInteractableException nếu element không thể tương tác, StaleElementReferenceException nếu element không còn gắn với DOM, TimeoutException nếu element không xuất hiện trong thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "uncheck",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element checkbox cần bỏ chọn"
  } ]
}, {
  "name" : "executeUpdate",
  "description" : "Thực thi câu lệnh INSERT, UPDATE, DELETE và trả về số lượng rows bị ảnh hưởng",
  "category" : "Database",
  "subCategory" : "Query Execution",
  "example" : "DatabaseKeyword db = new DatabaseKeyword();\n\n// Insert một user mới\nint inserted = db.executeUpdate(\n    \"mysql-dev\",\n    \"INSERT INTO users (name, email, status) VALUES (?, ?, ?)\",\n    \"John Doe\",\n    \"john@test.com\",\n    \"active\"\n);\nSystem.out.println(\"Inserted \" + inserted + \" row(s)\");\n\n// Update user status\nint updated = db.executeUpdate(\n    \"mysql-dev\",\n    \"UPDATE users SET status = ? WHERE email = ?\",\n    \"inactive\",\n    \"john@test.com\"\n);\nSystem.out.println(\"Updated \" + updated + \" row(s)\");\n\n// Delete user\nint deleted = db.executeUpdate(\n    \"mysql-dev\",\n    \"DELETE FROM users WHERE id = ?\",\n    123\n);\nSystem.out.println(\"Deleted \" + deleted + \" row(s)\");\n\n// Update multiple rows\nint batchUpdated = db.executeUpdate(\n    \"mysql-dev\",\n    \"UPDATE users SET last_login = NOW() WHERE status = ?\",\n    \"active\"\n);\nSystem.out.println(\"Updated \" + batchUpdated + \" active users\");",
  "returnValue" : "int - Số lượng rows đã được insert/update/delete",
  "note" : "- Trả về 0 nếu không có row nào bị ảnh hưởng (ví dụ: WHERE condition không match)\n- INSERT thành công thường trả về 1\n- UPDATE/DELETE có thể trả về nhiều hơn 1 nếu WHERE condition match nhiều rows\n- Query sẽ được log với số rows affected\n- Throw DatabaseException nếu có lỗi (duplicate key, foreign key violation, etc.)",
  "className" : "com.vtnet.netat.db.keywords.DatabaseKeyword",
  "methodName" : "executeUpdate",
  "returnType" : "int",
  "parameters" : [ {
    "type" : "String",
    "name" : "profileName",
    "description" : "Tên database profile đã cấu hình"
  }, {
    "type" : "String",
    "name" : "query",
    "description" : "Câu lệnh SQL INSERT/UPDATE/DELETE (có thể chứa ? placeholder)"
  }, {
    "type" : "Object[]",
    "name" : "params",
    "description" : "Các tham số để thay thế cho ? trong query (tùy chọn)"
  } ]
}, {
  "name" : "enableRequestLogging",
  "description" : "Bật/tắt log chi tiết cho requests",
  "category" : "API",
  "subCategory" : "Configuration",
  "example" : "api.enableRequestLogging(true);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiKeyword",
  "methodName" : "enableRequestLogging",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "boolean",
    "name" : "enabled",
    "description" : "true = bật, false = tắt"
  } ]
}, {
  "name" : "assertTextWithOptions",
  "description" : "So sánh văn bản của phần tử với nhiều tùy chọn linh hoạt: có thể bỏ qua sự khác biệt giữa chữ hoa/thường và/hoặc cắt khoảng trắng ở đầu/cuối. Hữu ích khi cần kiểm tra nội dung mà không quan tâm đến định dạng chính xác. Nếu văn bản không khớp theo các tùy chọn đã chọn, một AssertionError sẽ được ném ra.",
  "category" : "Mobile",
  "subCategory" : "Assertion",
  "example" : "// Kiểm tra nội dung chào mừng, bỏ qua chữ hoa/thường và khoảng trắng\nmobileKeyword.assertTextWithOptions(welcomeMessage, \"  xin chào, Người Dùng \", true, true);\n\n// Với custom message\nmobileKeyword.assertTextWithOptions(welcomeMessage, \"  xin chào, Người Dùng \", true, true, \n    \"Thông báo chào mừng phải khớp với nội dung mong đợi (bỏ qua format)\");\n\n// Kiểm tra địa chỉ email không phân biệt chữ hoa/thường\nmobileKeyword.assertTextWithOptions(emailField, \"User@Example.com\", true, true, \n    \"Email hiển thị phải khớp không phân biệt chữ hoa/thường\");\n\n// Kiểm tra title với trim nhưng phân biệt case\nmobileKeyword.assertTextWithOptions(pageTitle, \" Trang Chủ \", false, true, \n    \"Tiêu đề trang phải là 'Trang Chủ' (phân biệt chữ hoa/thường)\");\n// Kiểm tra message với case-sensitive nhưng không trim\nmobileKeyword.assertTextWithOptions(statusMessage, \"  Đang xử lý...  \", false, false, \n    \"Thông báo trạng thái phải khớp chính xác bao gồm cả khoảng trắng\");",
  "returnValue" : "void - Không trả về giá trị, ném AssertionError nếu kiểm tra thất bại",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Phần tử cần kiểm tra phải tồn tại và có thuộc tính văn bản (text), và phải hiển thị trên màn hình để có thể đọc văn bản. Có thể throw AssertionError nếu văn bản không khớp theo các tùy chọn đã chọn, NoSuchElementException nếu không tìm thấy phần tử, StaleElementReferenceException nếu phần tử không còn gắn với DOM, WebDriverException nếu không thể lấy văn bản của phần tử, hoặc NullPointerException nếu văn bản của phần tử là null và expectedText không phải null.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertTextWithOptions",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra văn bản"
  }, {
    "type" : "String",
    "name" : "expectedText",
    "description" : "Chuỗi văn bản mong đợi"
  }, {
    "type" : "boolean",
    "name" : "ignoreCase",
    "description" : "true để bỏ qua sự khác biệt giữa chữ hoa/thường, false để phân biệt"
  }, {
    "type" : "boolean",
    "name" : "trimText",
    "description" : "true để cắt khoảng trắng ở đầu/cuối trước khi so sánh, false để giữ nguyên"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "scrollToBottom",
  "description" : "Cuộn xuống vị trí thấp nhất (cuối trang) of trang web.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Cuộn xuống cuối trang để truy cập chân trang\nwebKeyword.scrollToBottom();\nwebKeyword.verifyElementVisible(footerLinksObject);\n\n// Cuộn xuống cuối trang để tải thêm dữ liệu (infinite scroll)\nwebKeyword.scrollToBottom();\nwebKeyword.waitForElementVisible(loadingIndicatorObject);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và trình duyệt phải hỗ trợ thực thi JavaScript. Có thể throw JavascriptException nếu có lỗi khi thực thi JavaScript, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "scrollToBottom",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "startApplicationByPath",
  "description" : "Cài đặt (nếu cần) và khởi chạy ứng dụng từ một đường dẫn file .apk hoặc .ipa.",
  "category" : "Session",
  "subCategory" : "Lifecycle",
  "example" : "driverKeyword.startApplicationByPath(\"android\", \"C:/builds/app-debug.apk\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Keyword này chỉ dành cho các nền tảng Mobile. Để khởi động trình duyệt web, vui lòng sử dụng 'startBrowser'.",
  "className" : "com.vtnet.netat.core.keywords.DriverKeyword",
  "methodName" : "startApplicationByPath",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "platformName",
    "description" : "Tên nền tảng di động ('android', 'ios')."
  }, {
    "type" : "String",
    "name" : "appPath",
    "description" : "Đường dẫn tuyệt đối đến file ứng dụng."
  } ]
}, {
  "name" : "commitTransaction",
  "description" : "Commit transaction hiện tại, lưu tất cả thay đổi vào database",
  "category" : "Database",
  "subCategory" : "Transaction",
  "example" : "DatabaseKeyword db = new DatabaseKeyword();\n\n// Simple transaction\ndb.beginTransaction(\"mysql-dev\");\ndb.executeUpdate(\n    \"mysql-dev\",\n    \"INSERT INTO orders (user_id, amount) VALUES (?, ?)\",\n    123,\n    99.99\n);\ndb.commitTransaction(\"mysql-dev\");\nSystem.out.println(\"✓ Order created\");\n\n// Transaction with multiple operations\ndb.beginTransaction(\"mysql-dev\");\ntry {\n    // Insert order\n    int orderId = db.executeUpdate(\n        \"mysql-dev\",\n        \"INSERT INTO orders (user_id, total) VALUES (?, ?)\",\n        123, 199.99\n    );\n    \n    // Insert order items\n    db.executeUpdate(\n        \"mysql-dev\",\n        \"INSERT INTO order_items (order_id, product_id, quantity) VALUES (?, ?, ?)\",\n        orderId, 456, 2\n    );\n    \n    // Update inventory\n    db.executeUpdate(\n        \"mysql-dev\",\n        \"UPDATE products SET stock = stock - ? WHERE id = ?\",\n        2, 456\n    );\n    \n    db.commitTransaction(\"mysql-dev\");\n    System.out.println(\"✓ Order and inventory updated\");\n} catch (Exception e) {\n    db.rollbackTransaction(\"mysql-dev\");\n    System.err.println(\"✗ Transaction failed: \" + e.getMessage());\n    throw e;\n}",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "- Tất cả thay đổi trong transaction sẽ được persist vào database\n- Connection sẽ được đóng và remove khỏi ThreadLocal\n- Auto-commit sẽ được bật lại sau khi commit\n- Throw IllegalStateException nếu không có active transaction\n- Transaction duration và operation count sẽ được log",
  "className" : "com.vtnet.netat.db.keywords.DatabaseKeyword",
  "methodName" : "commitTransaction",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "profileName",
    "description" : "Tên database profile đã cấu hình"
  } ]
}, {
  "name" : "dropTable",
  "description" : "Xóa table khỏi database (DROP TABLE IF EXISTS)",
  "category" : "Database",
  "subCategory" : "Table Management",
  "example" : "DatabaseKeyword db = new DatabaseKeyword();\n\n// Drop table an toàn (không throw error nếu không tồn tại)\ndb.dropTable(\"mysql-dev\", \"temp_users\");\nSystem.out.println(\"✓ Table dropped\");\n\n// Drop multiple tables\nString[] tables = {\"test_table1\", \"test_table2\", \"test_table3\"};\nfor (String table : tables) {\n    db.dropTable(\"mysql-dev\", table);\n    System.out.println(\"Dropped: \" + table);\n}\n\n// Drop và verify\ndb.dropTable(\"mysql-dev\", \"old_data\");\nboolean exists = db.tableExists(\"mysql-dev\", \"old_data\");\nif (!exists) {\n    System.out.println(\"✓ Table successfully dropped\");\n}\n\n// Test cleanup - drop all temp tables\nList<Object> tempTables = db.getColumnValues(\n    \"mysql-dev\",\n    \"SELECT table_name FROM information_schema.tables WHERE table_name LIKE 'temp_%'\",\n    \"table_name\"\n);\nfor (Object tableName : tempTables) {\n    db.dropTable(\"mysql-dev\", tableName.toString());\n}",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "- Sử dụng IF EXISTS nên không throw error nếu table không tồn tại\n- Xóa cả structure và data của table\n- Không thể rollback (DDL statement)\n- Cẩn thận khi drop table có foreign key references\n- Thích hợp cho cleanup sau integration tests",
  "className" : "com.vtnet.netat.db.keywords.DatabaseKeyword",
  "methodName" : "dropTable",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "profileName",
    "description" : "Tên database profile đã cấu hình"
  }, {
    "type" : "String",
    "name" : "tableName",
    "description" : "Tên table cần drop"
  } ]
}, {
  "name" : "getText",
  "description" : "Lấy và trả về text of element. Keyword này sẽ tự động thử nhiều cách: 1. Lấy thuộc tính 'value' (cho ô input, textarea). 2. Lấy text hiển thị thông thường. 3. Lấy 'textContent' hoặc 'innerText' nếu 2 cách trên thất bại.",
  "category" : "Web",
  "subCategory" : "Getter",
  "example" : "// Lấy text từ element hiển thị\nString welcomeMessage = webKeyword.getText(welcomeMessageObject);\nwebKeyword.verifyEqual(welcomeMessage, \"Chào mừng bạn!\");\n\n// Lấy giá trị từ ô input\nwebKeyword.sendKeys(usernameInputObject, \"testuser\");\nString username = webKeyword.getText(usernameInputObject);\nwebKeyword.verifyEqual(username, \"testuser\");",
  "returnValue" : "String - text of element hoặc chuỗi rỗng nếu không có text",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và element cần lấy text phải tồn tại trong DOM. Có thể throw NoSuchElementException nếu element không tồn tại, StaleElementReferenceException nếu element không còn gắn với DOM, TimeoutException nếu element không xuất hiện trong thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "getText",
  "returnType" : "String",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element contains text cần lấy"
  } ]
}, {
  "name" : "setRequestBodyFromFile",
  "description" : "Thiết lập body từ file",
  "category" : "API",
  "subCategory" : "Body",
  "example" : "api.setRequestBodyFromFile(\"data/user.json\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiKeyword",
  "methodName" : "setRequestBodyFromFile",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "filePath",
    "description" : "Đường dẫn file"
  } ]
}, {
  "name" : "installApp",
  "description" : "Cài đặt ứng dụng từ một đường dẫn file .apk (Android) hoặc .ipa (iOS) vào thiết bị đang kết nối. Đường dẫn phải trỏ đến một file hợp lệ và có thể truy cập từ máy thực thi test. Trên iOS, file .ipa phải được ký đúng cách để có thể cài đặt. Trên Android, thiết bị phải cho phép cài đặt từ nguồn không xác định.",
  "category" : "Mobile",
  "subCategory" : "AppLifecycle",
  "example" : "// Cài đặt ứng dụng Android từ thư mục local\nmobileKeyword.installApp(\"C:/apps/my-app.apk\");\n\n// Cài đặt ứng dụng iOS từ đường dẫn mạng (cần tải về trước)\nmobileKeyword.installApp(\"/tmp/downloaded-app.ipa\");\n\n// Cài đặt phiên bản mới của ứng dụng để kiểm tra tính năng cập nhật\nmobileKeyword.installApp(\"C:/builds/app-v2.0.apk\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Có quyền cài đặt ứng dụng trên thiết bị. Trên Android: Đã bật 'Cài đặt từ nguồn không xác định'. Trên iOS: File .ipa đã được ký đúng cách. Có thể throw WebDriverException nếu không thể cài đặt ứng dụng, hoặc FileNotFoundException nếu không tìm thấy file ứng dụng.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "installApp",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "appPath",
    "description" : "Đường dẫn tuyệt đối đến file ứng dụng (.apk hoặc .ipa)"
  } ]
}, {
  "name" : "switchToFrame",
  "description" : "Chuyển sự điều khiển of WebDriver vào một element iframe trên trang. Mọi hành động sau đó sẽ được thực hiện trong ngữ cảnh of iframe này.",
  "category" : "Web",
  "subCategory" : "Window&Frame",
  "example" : "// Chuyển vào iframe thanh toán\nwebKeyword.waitForElementVisible(paymentIframeObject);\nwebKeyword.switchToFrame(paymentIframeObject);\nwebKeyword.sendKeys(cardNumberObject, \"4111111111111111\");\n\n// Chuyển vào iframe trình soạn thảo\nwebKeyword.switchToFrame(richTextEditorObject);\nwebKeyword.sendKeys(editorBodyObject, \"Nội dung bài viết\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element iframe cần chuyển vào phải tồn tại trong DOM. Có thể throw NoSuchElementException nếu không tìm thấy element iframe, StaleElementReferenceException nếu element iframe không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "switchToFrame",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng giao diện đại diện cho thẻ iframe cần chuyển vào"
  } ]
}, {
  "name" : "executeQuery",
  "description" : "Thực thi câu lệnh SELECT và trả về kết quả dưới dạng List các Map (mỗi Map đại diện cho 1 row)",
  "category" : "Database",
  "subCategory" : "Query Execution",
  "example" : "// Lấy thông tin user theo email\nDatabaseKeyword db = new DatabaseKeyword();\nList<Map<String, Object>> users = db.executeQuery(\n    \"mysql-dev\",\n    \"SELECT * FROM users WHERE email = ?\",\n    \"john@test.com\"\n);\nSystem.out.println(\"User ID: \" + users.get(0).get(\"id\"));\nSystem.out.println(\"User Name: \" + users.get(0).get(\"name\"));\n\n// Query không có parameter\nList<Map<String, Object>> activeUsers = db.executeQuery(\n    \"mysql-dev\",\n    \"SELECT * FROM users WHERE status = 'active'\"\n);\n\n// Query với nhiều parameters\nList<Map<String, Object>> orders = db.executeQuery(\n    \"mysql-dev\",\n    \"SELECT * FROM orders WHERE user_id = ? AND status = ?\",\n    123,\n    \"completed\"\n);\n\n// Iterate qua tất cả results\nfor (Map<String, Object> order : orders) {\n    System.out.println(\"Order ID: \" + order.get(\"id\"));\n    System.out.println(\"Amount: \" + order.get(\"amount\"));\n}",
  "returnValue" : "List<Map<String, Object>> - Danh sách các row, mỗi row là Map với key=column name, value=column value",
  "note" : "- Query sẽ được log tự động với thời gian thực thi và số lượng rows trả về\n- Dữ liệu nhạy cảm (password, email) sẽ được mask trong log\n- Nếu query chậm hơn threshold (mặc định 1000ms), sẽ có warning log\n- Trả về empty list [] nếu không tìm thấy kết quả\n- Throw DatabaseException nếu có lỗi SQL",
  "className" : "com.vtnet.netat.db.keywords.DatabaseKeyword",
  "methodName" : "executeQuery",
  "returnType" : "List",
  "parameters" : [ {
    "type" : "String",
    "name" : "profileName",
    "description" : "Tên database profile đã cấu hình"
  }, {
    "type" : "String",
    "name" : "query",
    "description" : "Câu lệnh SQL SELECT (có thể chứa ? placeholder)"
  }, {
    "type" : "Object[]",
    "name" : "params",
    "description" : "Các tham số để thay thế cho ? trong query (tùy chọn)"
  } ]
}, {
  "name" : "pressBack",
  "description" : "Mô phỏng hành động nhấn nút 'Back' vật lý của thiết bị. Hữu ích để điều hướng ngược lại màn hình trước đó, đóng dialog, hoặc hủy thao tác hiện tại. Trên iOS, hành động này tương đương với việc nhấn nút quay lại ở góc trên bên trái của nhiều ứng dụng.",
  "category" : "Mobile",
  "subCategory" : "Interaction",
  "example" : "// Quay lại màn hình trước\nmobileKeyword.pressBack();\n\n// Đóng dialog\nmobileKeyword.pressBack();",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Có thể throw WebDriverException nếu không thể thực hiện hành động Back.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "pressBack",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "assertFalse",
  "description" : "Khẳng định rằng một điều kiện có giá trị false. Nếu điều kiện là true, test case sẽ dừng lại và báo lỗi.",
  "category" : "Assertion",
  "subCategory" : "HardAssert",
  "example" : "assertFalse(isElementHidden);\nassertFalse(hasError, \"Không được có lỗi trong quá trình xử lý\");\nassertFalse(isFormSubmitted, \"Form không được submit khi có lỗi validation\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Assertion này kiểm tra điều kiện boolean phải là false. Thường được sử dụng để kiểm tra trạng thái phủ định hoặc kết quả của các phép so sánh.",
  "className" : "com.vtnet.netat.core.keywords.AssertionKeyword",
  "methodName" : "assertFalse",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "boolean",
    "name" : "condition",
    "description" : "Điều kiện boolean cần kiểm tra (phải là false)"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "resetApiContext",
  "description" : "Reset toàn bộ API context về trạng thái ban đầu",
  "category" : "API",
  "subCategory" : "Configuration",
  "example" : "api.resetApiContext();",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiKeyword",
  "methodName" : "resetApiContext",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "assertNotificationText",
  "description" : "Kiểm tra văn bản của một thông báo. Tự động chờ thông báo xuất hiện trước khi kiểm tra. Phương thức này sẽ tìm kiếm thông báo dựa trên một phần văn bản chứa trong đó, sau đó so sánh toàn bộ nội dung với văn bản mong đợi. Hữu ích để xác minh nội dung thông báo push, toast message, hoặc system notification.",
  "category" : "Mobile",
  "subCategory" : "Assertion",
  "example" : "// Kiểm tra thông báo tin nhắn\nmobileKeyword.assertNotificationText(\"Tin nhắn từ A\", \"Bạn có muốn trả lời không?\", 15);\n\n// Với custom message\nmobileKeyword.assertNotificationText(\"Tin nhắn từ A\", \"Bạn có muốn trả lời không?\", 15, \n    \"Nội dung thông báo tin nhắn phải khớp với văn bản mong đợi\");\n\n// Kiểm tra thông báo email\nmobileKeyword.assertNotificationText(\"Email mới\", \"Bạn có 3 email chưa đọc từ work@company.com\", 10, \n    \"Thông báo email phải hiển thị đúng số lượng và người gửi\");\n\n// Kiểm tra thông báo hệ thống\nmobileKeyword.assertNotificationText(\"Cập nhật\", \"Ứng dụng đã được cập nhật thành công lên phiên bản 2.1.0\", 20, \n    \"Thông báo cập nhật phải hiển thị đúng phiên bản mới\");\n// Kiểm tra thông báo lỗi\nmobileKeyword.assertNotificationText(\"Lỗi kết nối\", \"Không thể kết nối đến máy chủ. Vui lòng thử lại sau.\", 5, \n    \"Thông báo lỗi phải hiển thị hướng dẫn rõ ràng cho người dùng\");\n// Kiểm tra thông báo thành công\nmobileKeyword.assertNotificationText(\"Thành công\", \"Giao dịch đã được xử lý thành công. Mã GD: TX123456\", 8, \n    \"Thông báo giao dịch thành công phải bao gồm mã giao dịch\");",
  "returnValue" : "void - Không trả về giá trị, ném AssertionError nếu kiểm tra thất bại",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Hệ thống phải có quyền truy cập vào notification panel hoặc thông báo của ứng dụng. containingText được sử dụng để định vị thông báo, sau đó toàn bộ nội dung sẽ được so sánh với expectedText. Có thể throw AssertionError nếu nội dung thông báo không khớp với văn bản mong đợi, TimeoutException nếu không tìm thấy thông báo chứa containingText trong thời gian chờ, NoSuchElementException nếu thông báo biến mất trước khi đọc được nội dung, hoặc WebDriverException nếu có lỗi khi tương tác với notification panel.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertNotificationText",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "containingText",
    "description" : "Đoạn văn bản dùng để tìm thông báo (có thể là một phần của thông báo)"
  }, {
    "type" : "String",
    "name" : "expectedText",
    "description" : "Văn bản đầy đủ mong đợi của thông báo"
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa (tính bằng giây) để thông báo xuất hiện"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "sendPatchRequest",
  "description" : "Gửi PATCH request",
  "category" : "API",
  "subCategory" : "Requests",
  "example" : "ApiResponse response = api.sendPatchRequest(\"/users/1\");",
  "returnValue" : "ApiResponse - Response object",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiKeyword",
  "methodName" : "sendPatchRequest",
  "returnType" : "ApiResponse",
  "parameters" : [ {
    "type" : "String",
    "name" : "endpoint",
    "description" : "Endpoint URL"
  } ]
}, {
  "name" : "getResponseTime",
  "description" : "Lấy response time (milliseconds)",
  "category" : "API",
  "subCategory" : "Response",
  "example" : "long time = api.getResponseTime(response);",
  "returnValue" : "long - Response time in ms",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiKeyword",
  "methodName" : "getResponseTime",
  "returnType" : "long",
  "parameters" : [ {
    "type" : "ApiResponse",
    "name" : "response",
    "description" : ""
  } ]
}, {
  "name" : "softAssertLessThanOrEqual",
  "description" : "Kiểm tra giá trị thực tế có nhỏ hơn hoặc bằng giá trị so sánh không. Nếu không, ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Assertion",
  "subCategory" : "Soft",
  "example" : "int itemsInCart = Integer.parseInt(web.getText(\"cartCount\"));\nassertion.softAssertLessThanOrEqual(itemsInCart, 10, \"Giỏ hàng không được chứa quá 10 sản phẩm\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Tự động xử lý so sánh giữa số và chuỗi số. Lỗi sẽ được ghi nhận và test vẫn tiếp tục. **Phải gọi `assertAll()` ở cuối** để tổng hợp kết quả.",
  "className" : "com.vtnet.netat.core.keywords.AssertionKeyword",
  "methodName" : "softAssertLessThanOrEqual",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "Object",
    "name" : "actualValue",
    "description" : "Giá trị thực tế"
  }, {
    "type" : "Object",
    "name" : "expectedValue",
    "description" : "Giá trị so sánh"
  }, {
    "type" : "String[]",
    "name" : "message",
    "description" : "Thông điệp tùy chỉnh khi assertion fail"
  } ]
}, {
  "name" : "waitForConnectionAvailable",
  "description" : "Đợi cho đến khi có connection available trong pool (polling với timeout)",
  "category" : "Database",
  "subCategory" : "Connection Management",
  "example" : "DatabaseKeyword db = new DatabaseKeyword();\n\n// Wait for connection với 5 second timeout\ntry {\n    db.waitForConnectionAvailable(\"mysql-dev\", 5000);\n    System.out.println(\"✓ Connection available\");\n    // Proceed với operations\n} catch (DatabaseException e) {\n    System.out.println(\"✗ Timeout: No connections available\");\n}\n\n// Trong high load scenario\nfor (int i = 0; i < 1000; i++) {\n    // Wait before each operation\n    db.waitForConnectionAvailable(\"mysql-dev\", 10000);\n    db.executeQuery(\"mysql-dev\", \"SELECT * FROM users WHERE id = ?\", i);\n}\n\n// Retry logic với exponential backoff\nint maxRetries = 3;\nfor (int retry = 0; retry < maxRetries; retry++) {\n    try {\n        long timeout = (long) (1000 * Math.pow(2, retry)); // 1s, 2s, 4s\n        db.waitForConnectionAvailable(\"mysql-dev\", timeout);\n        // Execute operation\n        break;\n    } catch (DatabaseException e) {\n        if (retry == maxRetries - 1) throw e;\n        System.out.println(\"Retry \" + (retry + 1) + \" failed, waiting...\");\n    }\n}",
  "returnValue" : "void - Không trả về giá trị (throw DatabaseException nếu timeout)",
  "note" : "- Polling mỗi 100ms để check idle connections\n- Throw DatabaseException nếu không có connection available sau timeout\n- Hữu ích để tránh connection timeout errors trong high load\n- Có thể combine với retry logic cho reliability",
  "className" : "com.vtnet.netat.db.keywords.DatabaseKeyword",
  "methodName" : "waitForConnectionAvailable",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "profileName",
    "description" : "Tên database profile đã cấu hình"
  }, {
    "type" : "long",
    "name" : "timeoutMs",
    "description" : "Timeout trong milliseconds"
  } ]
}, {
  "name" : "getElementCount",
  "description" : "Đếm và trả về số lượng phần tử trên màn hình khớp với locator được chỉ định. Hữu ích để kiểm tra số lượng item trong danh sách hoặc grid.",
  "category" : "Mobile",
  "subCategory" : "Getter",
  "example" : "int numberOfItems = mobileKeyword.getElementCount(listItemObject);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "getElementCount",
  "returnType" : "int",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng UI đại diện cho các phần tử cần đếm"
  } ]
}, {
  "name" : "fail",
  "description" : "Force fail test với message (dùng cho conditional logic)",
  "category" : "API",
  "subCategory" : "Assertion - General",
  "example" : "if (someCondition) { verify.fail(\"This should not happen\"); }",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiAssert",
  "methodName" : "fail",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "message",
    "description" : "Thông báo lỗi"
  } ]
}, {
  "name" : "assertEquals",
  "description" : "Khẳng định rằng hai giá trị bằng nhau. Tự động xử lý so sánh giữa các kiểu dữ liệu khác nhau (ví dụ: số 1 và chuỗi \"1\"). Nếu không, kịch bản sẽ DỪNG LẠI.",
  "category" : "Assertion",
  "subCategory" : "HardAssert",
  "example" : "assertEquals(actualTitle, expectedTitle);\nassertEquals(userAge, 25, \"Tuổi người dùng phải là 25\");\nassertEquals(loginStatus, \"success\", \"Trạng thái đăng nhập phải là thành công\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Keyword này so sánh giá trị sau khi đã chuyển đổi chúng sang dạng chuỗi ký tự.",
  "className" : "com.vtnet.netat.core.keywords.AssertionKeyword",
  "methodName" : "assertEquals",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "Object",
    "name" : "actualValue",
    "description" : "Giá trị thực tế (có thể là một biến)"
  }, {
    "type" : "Object",
    "name" : "expectedValue",
    "description" : "Giá trị mong đợi"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "startSessionFromProfile",
  "description" : "Khởi tạo một phiên làm việc (trình duyệt hoặc thiết bị di động) từ một file profile đã được định nghĩa sẵn.",
  "category" : "Driver",
  "subCategory" : "Session",
  "example" : "// Bắt đầu phiên làm việc cho User A trên Chrome từ file profile\ndriver.startSessionFromProfile(\"user_A_chrome\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Đây là phương pháp được khuyên dùng để quản lý các môi trường kiểm thử một cách nhất quán và có thể tái sử dụng.",
  "className" : "com.vtnet.netat.core.keywords.DriverKeyword",
  "methodName" : "startSession",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "profileName",
    "description" : "Tên của file profile (không có đuôi .json) nằm trong thư mục 'browser_profiles' hoặc 'device_profiles'"
  } ]
}, {
  "name" : "switchToParentFrame",
  "description" : "Thoát khỏi ngữ cảnh iframe hiện tại và Switch to parent frame ngay trước nó. Nếu đang ở iframe cấp cao nhất, hành động này sẽ quay về nội dung chính of trang.",
  "category" : "Web",
  "subCategory" : "Window&Frame",
  "example" : "// Thoát khỏi iframe con và Switch to parent frame\nwebKeyword.switchToFrame(mainIframeObject);\nwebKeyword.switchToFrame(nestedIframeObject);\nwebKeyword.switchToParentFrame(); // Switch to parent frame\nwebKeyword.click(nextButtonObject);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, WebDriver đang ở trong ngữ cảnh of một iframe. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "switchToParentFrame",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "setApiBaseUrl",
  "description" : "Thiết lập URL gốc cho API",
  "category" : "API",
  "subCategory" : "Configuration",
  "example" : "api.setApiBaseUrl(\"https://api.example.com\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiKeyword",
  "methodName" : "setApiBaseUrl",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "baseUrl",
    "description" : "URL gốc (VD: https://api.example.com)"
  } ]
}, {
  "name" : "waitForElementVisible",
  "description" : "Chờ đợi một element trở nên visible (hiển thị) trên màn hình trong khoảng thời gian chỉ định. Sử dụng explicit wait để đảm bảo element không chỉ present trong DOM mà còn thực sự hiển thị cho người dùng.",
  "category" : "Mobile",
  "subCategory" : "Wait",
  "example" : "// Chờ button login hiển thị trong 10 giây\nmobileKeyword.waitForElementVisible(loginButton, 10);\n\n// Chờ popup xuất hiện trong 5 giây\nmobileKeyword.waitForElementVisible(popupDialog, 5);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "LƯU Ý: Method này chờ element VISIBLE (display: block, opacity > 0, không bị che khuất), khác với waitForElementPresent chỉ cần element có trong DOM. Sẽ throw TimeoutException nếu vượt quá thời gian chờ.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "waitForElementVisible",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng UI element cần chờ đợi hiển thị"
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa tính bằng giây"
  } ]
}, {
  "name" : "dragAndDrop",
  "description" : "Kéo một phần tử từ vị trí nguồn và thả vào vị trí của phần tử đích. Hữu ích cho các thao tác như sắp xếp lại danh sách, di chuyển các phần tử trong giao diện, hoặc kéo thả vào vùng đích. Phương thức sẽ tự động tính toán tọa độ trung tâm của cả hai phần tử để thực hiện thao tác chính xác.",
  "category" : "Mobile",
  "subCategory" : "Gesture",
  "example" : "// Kéo một mục từ danh sách và thả vào thùng rác\nmobileKeyword.dragAndDrop(listItem, trashBin);\n\n// Sắp xếp lại thứ tự trong danh sách\nmobileKeyword.dragAndDrop(firstItem, thirdItem);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Cả phần tử nguồn và đích phải hiển thị trên màn hình và ứng dụng phải hỗ trợ thao tác kéo thả cho các phần tử này. Có thể throw NoSuchElementException nếu không tìm thấy phần tử nguồn hoặc đích, WebDriverException nếu có lỗi khi thực hiện thao tác kéo thả, hoặc ElementNotInteractableException nếu không thể tương tác với phần tử nguồn hoặc đích.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "dragAndDrop",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "source",
    "description" : "Phần tử nguồn cần kéo"
  }, {
    "type" : "ObjectUI",
    "name" : "destination",
    "description" : "Phần tử đích để thả vào"
  } ]
}, {
  "name" : "waitForElementTextNotToBe",
  "description" : "Chờ đợi text của element KHÔNG có giá trị chỉ định trong khoảng thời gian cho phép. Thực hiện negative exact matching, hữu ích cho validation rằng nội dung đã thay đổi khỏi trạng thái cũ, loading states đã kết thúc.",
  "category" : "Web",
  "subCategory" : "Wait",
  "example" : "// Chờ status thay đổi khỏi 'Pending'\nwebKeyword.waitForElementTextNotToBe(statusLabel, \"Pending\", 15);\n\n// Chờ placeholder biến mất\nwebKeyword.waitForElementTextNotToBe(inputField, \"Enter text...\", 5);\n\n// Chờ loading text thay đổi\nwebKeyword.waitForElementTextNotToBe(loadingDiv, \"Loading...\", 20);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "NEGATIVE EXACT MATCH: Hữu ích khi cần đảm bảo text đã thay đổi khỏi giá trị cũ, loading states kết thúc, hoặc placeholder text được thay thế. Thường dùng sau update actions.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "waitForElementTextNotToBe",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng UI element cần kiểm tra text content"
  }, {
    "type" : "String",
    "name" : "unwantedText",
    "description" : "Text chính xác mà element KHÔNG được có"
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa tính bằng giây"
  } ]
}, {
  "name" : "verifyColumnValue",
  "description" : "Verify giá trị của một column cụ thể trong first row của query result",
  "category" : "Database",
  "subCategory" : "Verification",
  "example" : "DatabaseKeyword db = new DatabaseKeyword();\n\n// Verify user status\nObject[] params1 = {123};\ndb.verifyColumnValue(\n    \"mysql-dev\",\n    \"SELECT status FROM users WHERE id = ?\",\n    params1,\n    \"status\",\n    \"active\"\n);\n\n// Verify order amount\nint orderId = 456;\ndouble expectedAmount = 99.99;\ndb.verifyColumnValue(\n    \"mysql-dev\",\n    \"SELECT total_amount FROM orders WHERE id = ?\",\n    new Object[]{orderId},\n    \"total_amount\",\n    expectedAmount\n);\n\n// Verify counter value\ndb.verifyColumnValue(\n    \"mysql-dev\",\n    \"SELECT COUNT(*) as cnt FROM users\",\n    new Object[]{},\n    \"cnt\",\n    10\n);\n\n// Verify email after update\nString newEmail = \"newemail@test.com\";\ndb.verifyColumnValue(\n    \"mysql-dev\",\n    \"SELECT email FROM users WHERE id = ?\",\n    new Object[]{123},\n    \"email\",\n    newEmail\n);\nSystem.out.println(\"✓ Email updated successfully to: \" + newEmail);",
  "returnValue" : "void - Không trả về giá trị (throw AssertionError nếu value không khớp)",
  "note" : "- Throw AssertionError nếu query không trả về row nào\n- Throw AssertionError nếu column value không khớp với expectedValue\n- Chỉ verify first row nếu query trả về nhiều rows\n- Comparison sử dụng Objects.equals() nên type phải match\n- Nếu cần verify nhiều rows, nên dùng executeQuery và verify manually",
  "className" : "com.vtnet.netat.db.keywords.DatabaseKeyword",
  "methodName" : "verifyColumnValue",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "profileName",
    "description" : "Tên database profile đã cấu hình"
  }, {
    "type" : "String",
    "name" : "query",
    "description" : "Câu lệnh SELECT"
  }, {
    "type" : "Object[]",
    "name" : "params",
    "description" : "Parameters cho query"
  }, {
    "type" : "String",
    "name" : "columnName",
    "description" : "Tên column cần verify"
  }, {
    "type" : "Object",
    "name" : "expectedValue",
    "description" : "Giá trị mong đợi của column"
  } ]
}, {
  "name" : "verifyTitleHard",
  "description" : "Verify tiêu đề (title) của trang web hiện tại. Nếu tiêu đề không khớp chính xác, kịch bản sẽ DỪNG LẠI.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify tiêu đề trang chủ\nwebKeyword.navigateToUrl(\"https://example.com\");\nwebKeyword.waitForPageLoaded(10);\nwebKeyword.verifyTitleHard(\"Trang chủ - Website ABC\");\n\n// Verify tiêu đề sau khi đăng nhập với custom message\nwebKeyword.sendKeys(usernameInputObject, \"testuser\");\nwebKeyword.sendKeys(passwordInputObject, \"password123\");\nwebKeyword.click(loginButtonObject);\nwebKeyword.waitForPageLoaded(15);\nwebKeyword.verifyTitleHard(\"Dashboard - Website ABC\", \"Tiêu đề trang dashboard không chính xác\");\n\n// Verify tiêu đề trang sản phẩm\nwebKeyword.verifyTitleHard(\"Chi tiết sản phẩm - iPhone 15\", \"Tiêu đề trang sản phẩm bị sai\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và trang web đã hoàn thành quá trình tải. Có thể throw AssertionError nếu tiêu đề trang không khớp với tiêu đề mong đợi, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyTitleHard",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "expectedTitle",
    "description" : "Tiêu đề trang mong đợi"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "assertElementNotPresent",
  "description" : "Khẳng định rằng một phần tử KHÔNG tồn tại trong cấu trúc màn hình sau một khoảng thời gian chờ. Hữu ích để xác minh rằng một phần tử đã bị xóa hoặc chưa được tạo. Phương thức sẽ đợi trong khoảng thời gian chỉ định và kiểm tra xem phần tử có xuất hiện không, nếu phần tử xuất hiện trong thời gian đó, một AssertionError sẽ được ném ra.",
  "category" : "Mobile",
  "subCategory" : "Assertion",
  "example" : "// Kiểm tra thông báo lỗi không xuất hiện sau khi nhập đúng thông tin\nmobileKeyword.assertElementNotPresent(errorMessage, 3);\n\n// Với custom message\nmobileKeyword.assertElementNotPresent(errorMessage, 3, \n    \"Thông báo lỗi không được xuất hiện khi nhập thông tin hợp lệ\");\n\n// Xác minh màn hình loading đã biến mất sau khi tải xong\nmobileKeyword.assertElementNotPresent(loadingSpinner, 10, \n    \"Loading spinner phải biến mất sau khi tải dữ liệu hoàn tất\");\n\n// Kiểm tra popup không xuất hiện\nmobileKeyword.assertElementNotPresent(adPopup, 5, \n    \"Popup quảng cáo không được hiển thị trên màn hình chính\");\nmobileKeyword.assertElementNotPresent(updateDialog, 3, \n    \"Dialog cập nhật không được hiển thị khi app đã là phiên bản mới nhất\");",
  "returnValue" : "void - Không trả về giá trị, ném AssertionError nếu kiểm tra thất bại",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Locator của phần tử cần kiểm tra phải hợp lệ. Có thể throw AssertionError nếu phần tử xuất hiện trong khoảng thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình điều khiển.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertElementNotPresent",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra sự không tồn tại"
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian tối đa (giây) để đợi và xác nhận phần tử không xuất hiện"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "getText",
  "description" : "Lấy văn bản hiển thị từ một phần tử. Tự động kiểm tra và trả về giá trị từ các thuộc tính theo thứ tự ưu tiên: `text`, `content-desc`, `label`.",
  "category" : "Mobile",
  "subCategory" : "Getter",
  "example" : "String welcomeText = mobileKeyword.getText(welcomeMessageObject);",
  "returnValue" : "String: Văn bản của phần tử. Trả về chuỗi rỗng nếu không có thuộc tính nào chứa văn bản.",
  "note" : "",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "getText",
  "returnType" : "String",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử UI cần lấy văn bản."
  } ]
}, {
  "name" : "tapByCoordinates",
  "description" : "Thực hiện một hành động chạm (tap) tại một tọa độ (x, y) cụ thể trên màn hình. Hữu ích khi cần tương tác với các phần tử không thể định vị bằng các locator thông thường, hoặc khi cần chạm vào một vị trí tương đối trên màn hình. Tọa độ được tính theo pixel từ góc trên bên trái của màn hình (0,0). Lưu ý: Tọa độ có thể khác nhau trên các thiết bị có kích thước màn hình khác nhau.",
  "category" : "Mobile",
  "subCategory" : "Gesture",
  "example" : "// Chạm vào trung tâm màn hình\nDimension size = DriverManager.getDriver().manage().window().getSize();\nmobileKeyword.tapByCoordinates(size.width / 2, size.height / 2);\n\n// Chạm vào góc trên bên phải để đóng quảng cáo\nmobileKeyword.tapByCoordinates(size.width - 50, 50);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Tọa độ cần nằm trong phạm vi kích thước màn hình của thiết bị. Có thể throw WebDriverException nếu có lỗi khi thực hiện hành động chạm, hoặc IllegalArgumentException nếu tọa độ nằm ngoài kích thước màn hình.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "tapByCoordinates",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "int",
    "name" : "x",
    "description" : "Tọa độ theo trục ngang (pixel)"
  }, {
    "type" : "int",
    "name" : "y",
    "description" : "Tọa độ theo trục dọc (pixel)"
  } ]
}, {
  "name" : "scrollToElement",
  "description" : "Cuộn trang đến khi element được chỉ định nằm trong vùng có thể nhìn thấy of trình duyệt. Rất cần thiết khi cần tương tác với các element ở cuối trang.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Cuộn đến phần chân trang\nwebKeyword.scrollToElement(footerSectionObject);\nwebKeyword.click(privacyPolicyLinkObject);\n\n// Cuộn đến nút gửi ở cuối form\nwebKeyword.scrollToElement(submitButtonObject);\nwebKeyword.click(submitButtonObject);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần cuộn đến phải tồn tại trong DOM, và trình duyệt phải hỗ trợ thực thi JavaScript. Có thể throw NoSuchElementException nếu element không tồn tại, StaleElementReferenceException nếu element không còn gắn với DOM, JavascriptException nếu có lỗi khi thực thi JavaScript, TimeoutException nếu element không xuất hiện trong thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "scrollToElement",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element đích cần cuộn đến"
  } ]
}, {
  "name" : "isElementPresent",
  "description" : "Kiểm tra xem một phần tử có tồn tại trên màn hình hay không trong một khoảng thời gian chờ nhất định. Khác với các phương thức assertion, phương thức này trả về kết quả boolean (true/false) thay vì ném ra ngoại lệ, giúp xử lý các trường hợp phần tử có thể xuất hiện hoặc không. Hữu ích cho các điều kiện rẽ nhánh trong kịch bản test.",
  "category" : "Mobile",
  "subCategory" : "Assertion",
  "example" : "// Kiểm tra thông báo lỗi và xử lý tương ứng\nboolean isErrorVisible = mobileKeyword.isElementPresent(errorMessage, 5);\nif (isErrorVisible) {\n    mobileKeyword.tap(dismissButton);\n} else {\n    mobileKeyword.tap(nextButton);\n}\n\n// Kiểm tra popup và bỏ qua nếu có\nif (mobileKeyword.isElementPresent(rateAppPopup, 3)) {\n    mobileKeyword.tap(remindMeLaterButton);\n}\n\n// Xử lý điều kiện phức tạp với nhiều element\nboolean hasWelcomeScreen = mobileKeyword.isElementPresent(welcomeTitle, 2);\nboolean hasLoginForm = mobileKeyword.isElementPresent(loginForm, 2);\nif (hasWelcomeScreen) {\n    mobileKeyword.tap(getStartedButton);\n} else if (hasLoginForm) {\n    // User đã qua welcome screen, tiến hành đăng nhập\n    mobileKeyword.sendText(usernameInput, \"testuser\");\n}\n\n// Kiểm tra optional elements\nif (mobileKeyword.isElementPresent(tutorialOverlay, 1)) {\n    mobileKeyword.tap(skipTutorialButton);\n}",
  "returnValue" : "boolean - true nếu phần tử tồn tại, false nếu không tìm thấy sau thời gian chờ",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Locator của phần tử cần kiểm tra phải hợp lệ. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình điều khiển. Method này không ném AssertionError, chỉ trả về boolean để xử lý logic.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "isElementPresent",
  "returnType" : "boolean",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần tìm kiếm"
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa (tính bằng giây)"
  } ]
}, {
  "name" : "setApiKey",
  "description" : "Thiết lập API Key (trong header hoặc query)",
  "category" : "API",
  "subCategory" : "Authentication",
  "example" : "api.setApiKey(\"X-API-Key\", \"abc123xyz\", \"HEADER\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiKeyword",
  "methodName" : "setApiKey",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "keyName",
    "description" : "Tên key (VD: X-API-Key, api_key)"
  }, {
    "type" : "String",
    "name" : "keyValue",
    "description" : "Giá trị key"
  }, {
    "type" : "String",
    "name" : "location",
    "description" : "HEADER hoặc QUERY"
  } ]
}, {
  "name" : "tapElementByIndex",
  "description" : "Thực hiện thao tác tap vào một phần tử cụ thể trong danh sách dựa trên chỉ số (index). Chỉ số bắt đầu từ 0. Ném IndexOutOfBoundsException nếu index không hợp lệ.",
  "category" : "Mobile",
  "subCategory" : "Interaction",
  "example" : "mobileKeyword.tapElementByIndex(menuItems, 2,3,1); // Tap vào các phần tử thứ 3,4,2 trong danh sách",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "tapElementByIndex",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng UI đại diện cho danh sách phần tử"
  }, {
    "type" : "int[]",
    "name" : "index",
    "description" : "Các vị trí của phần tử cần tap (bắt đầu từ 0)"
  } ]
}, {
  "name" : "getElementCount",
  "description" : "Đếm và trả về số lượng element trên trang khớp với locator được cung cấp. Hữu ích để Verify số lượng kết quả tìm kiếm, số hàng trong bảng,...",
  "category" : "Web",
  "subCategory" : "Getter",
  "example" : "// Đếm số lượng sản phẩm trong danh sách\nint numberOfProducts = webKeyword.getElementCount(productListItemObject);\nwebKeyword.verifyEqual(numberOfProducts, 10);\n\n// Verify số lượng kết quả tìm kiếm\nwebKeyword.sendKeys(searchInputObject, \"smartphone\");\nwebKeyword.click(searchButtonObject);\nint resultCount = webKeyword.getElementCount(searchResultItemObject);\nSystem.out.println(\"Tìm thấy \" + resultCount + \" kết quả\");",
  "returnValue" : "int - Số lượng element tìm thấy",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và locator of đối tượng giao diện phải hợp lệ. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình duyệt, NoSuchSessionException nếu phiên WebDriver không còn hợp lệ, hoặc InvalidSelectorException nếu locator không hợp lệ.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "getElementCount",
  "returnType" : "int",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng giao diện đại diện cho các element cần đếm"
  } ]
}, {
  "name" : "verifyUrlHard",
  "description" : "So sánh URL của trang hiện tại với một chuỗi mong đợi (phải khớp chính xác). Nếu không khớp, kịch bản sẽ DỪNG LẠI.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify URL sau khi đăng nhập thành công\nwebKeyword.sendKeys(usernameInputObject, \"testuser\");\nwebKeyword.sendKeys(passwordInputObject, \"password123\");\nwebKeyword.click(loginButtonObject);\nwebKeyword.waitForUrlContains(\"/dashboard\", 10);\nwebKeyword.verifyUrlHard(\"https://example.com/dashboard\");\n\n// Verify URL sau khi hoàn thành quy trình với custom message\nwebKeyword.click(completeOrderButtonObject);\nwebKeyword.waitForPageLoaded(20);\nwebKeyword.verifyUrlHard(\"https://example.com/order-confirmation\", \n    \"Sau khi hoàn thành đơn hàng phải chuyển đến trang xác nhận\");\n\n// Verify URL trong quy trình thanh toán\nwebKeyword.verifyUrlHard(\"https://example.com/checkout\", \"URL thanh toán không chính xác\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và trang web đã hoàn thành quá trình tải. Có thể throw AssertionError nếu URL hiện tại không khớp với URL mong đợi, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyUrlHard",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "expectedUrl",
    "description" : "URL đầy đủ mong đợi"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "getStatusCode",
  "description" : "Lấy HTTP status code từ response",
  "category" : "API",
  "subCategory" : "Response",
  "example" : "int code = api.getStatusCode(response);",
  "returnValue" : "int - Status code",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiKeyword",
  "methodName" : "getStatusCode",
  "returnType" : "int",
  "parameters" : [ {
    "type" : "ApiResponse",
    "name" : "response",
    "description" : ""
  } ]
}, {
  "name" : "verifyTextHard",
  "description" : "So sánh text của một element với một chuỗi ký tự mong đợi (phải khớp chính xác). Nếu không khớp, kịch bản sẽ DỪNG LẠI.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify tiêu đề trang chính xác\nwebKeyword.verifyTextHard(pageTitleObject, \"Chào mừng đến với trang chủ\");\n\n// Verify kết quả tính toán với custom message\nwebKeyword.sendKeys(number1InputObject, \"5\");\nwebKeyword.sendKeys(number2InputObject, \"7\");\nwebKeyword.click(calculateButtonObject);\nwebKeyword.verifyTextHard(resultObject, \"12\", \"Kết quả phép cộng không chính xác\");\n\n// Verify thông tin quan trọng\nwebKeyword.verifyTextHard(userNameObject, \"admin\", \"Tên người dùng hiển thị sai\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và element cần Verify phải tồn tại trong DOM và có text. Có thể throw AssertionError nếu text của element không khớp với giá trị mong đợi, NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyTextHard",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element chứa text cần Verify"
  }, {
    "type" : "String",
    "name" : "expectedText",
    "description" : "Chuỗi text mong đợi"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "assertTextContains",
  "description" : "Khẳng định rằng văn bản của một phần tử có chứa một chuỗi con. Khác với assertTextEquals, phương thức này chỉ kiểm tra sự xuất hiện của chuỗi con trong văn bản, không yêu cầu khớp hoàn toàn. Hữu ích khi nội dung có thể thay đổi nhưng vẫn chứa các phần quan trọng cần kiểm tra. Phương thức phân biệt chữ hoa/thường.",
  "category" : "Mobile",
  "subCategory" : "Assertion",
  "example" : "// Kiểm tra thông báo chào mừng có chứa tên người dùng\nmobileKeyword.assertTextContains(welcomeMessage, \"Xin chào\");\n\n// Xác minh thông báo lỗi có chứa thông tin về mật khẩu\nmobileKeyword.assertTextContains(errorMessage, \"mật khẩu không đúng\");",
  "returnValue" : "void - Không trả về giá trị, ném AssertionError nếu kiểm tra thất bại",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Phần tử cần kiểm tra phải tồn tại và có thuộc tính văn bản (text), và phải hiển thị trên màn hình để có thể đọc văn bản. Có thể throw AssertionError nếu văn bản của phần tử không chứa chuỗi con mong đợi, NoSuchElementException nếu không tìm thấy phần tử, hoặc StaleElementReferenceException nếu phần tử không còn gắn với DOM.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertTextContains",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra văn bản"
  }, {
    "type" : "String",
    "name" : "partialText",
    "description" : "Chuỗi con cần tìm trong văn bản của phần tử"
  }, {
    "type" : "String[]",
    "name" : "customMessages",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "removeHeader",
  "description" : "Xóa một header",
  "category" : "API",
  "subCategory" : "Headers",
  "example" : "api.removeHeader(\"X-Custom-Header\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiKeyword",
  "methodName" : "removeHeader",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "headerName",
    "description" : ""
  } ]
}, {
  "name" : "verifyElementVisibleSoft",
  "description" : "Verify một element có đang hiển thị trên giao diện hay không. Nếu Verify thất bại, kịch bản sẽ ghi nhận lỗi nhưng vẫn TIẾP TỤC chạy các bước tiếp theo.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify thông báo thành công hiển thị sau khi lưu\nwebKeyword.click(saveButtonObject);\nwebKeyword.verifyElementVisibleSoft(successMessageObject, true);\n// Kịch bản vẫn tiếp tục ngay cả khi thông báo không hiển thị\n\n// Verify với custom message\nwebKeyword.verifyElementVisibleSoft(headerLogoObject, true, \"Logo phải hiển thị trên header\");\nwebKeyword.verifyElementVisibleSoft(navigationMenuObject, true, \"Menu điều hướng bị thiếu\");\nwebKeyword.click(mainButtonObject); // Thực hiện hành động tiếp theo",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và element cần Verify phải tồn tại trong DOM. Có thể throw NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyElementVisibleSoft",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần Verify"
  }, {
    "type" : "boolean",
    "name" : "isVisible",
    "description" : "Trạng thái hiển thị mong đợi (true cho hiển thị, false cho bị ẩn)"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "startBrowser",
  "description" : "Khởi tạo và mở một phiên trình duyệt WEB mới. Nếu không có tham số, sẽ sử dụng trình duyệt mặc định trong file cấu hình.",
  "category" : "Session",
  "subCategory" : "Lifecycle",
  "example" : "driverKeyword.startBrowser();",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.core.keywords.DriverKeyword",
  "methodName" : "startBrowser",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "sendGetRequest",
  "description" : "Gửi GET request",
  "category" : "API",
  "subCategory" : "Requests",
  "example" : "ApiResponse response = api.sendGetRequest(\"/users/1\");",
  "returnValue" : "ApiResponse - Response object",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiKeyword",
  "methodName" : "sendGetRequest",
  "returnType" : "ApiResponse",
  "parameters" : [ {
    "type" : "String",
    "name" : "endpoint",
    "description" : "Endpoint URL"
  } ]
}, {
  "name" : "getRowCount",
  "description" : "Đếm số lượng rows từ query hoặc table. Tự động wrap với COUNT(*) nếu input là table name",
  "category" : "Database",
  "subCategory" : "Data Retrieval",
  "example" : "DatabaseKeyword db = new DatabaseKeyword();\n\n// Đếm rows từ query\nint activeCount = db.getRowCount(\n    \"mysql-dev\",\n    \"SELECT * FROM users WHERE status = ?\",\n    \"active\"\n);\nSystem.out.println(\"Active users: \" + activeCount);\n\n// Đếm rows từ table name (không cần viết SELECT COUNT)\nint totalUsers = db.getRowCount(\"mysql-dev\", \"users\");\nSystem.out.println(\"Total users in table: \" + totalUsers);\n\n// Đếm với nhiều conditions\nint completedOrders = db.getRowCount(\n    \"mysql-dev\",\n    \"SELECT * FROM orders WHERE user_id = ? AND status = ?\",\n    123,\n    \"completed\"\n);\n\n// So sánh counts\nint before = db.getRowCount(\"mysql-dev\", \"temp_table\");\n// ... perform some operations ...\nint after = db.getRowCount(\"mysql-dev\", \"temp_table\");\nSystem.out.println(\"Added \" + (after - before) + \" rows\");",
  "returnValue" : "int - Số lượng rows. Trả về 0 nếu không có data",
  "note" : "- Nếu input không bắt đầu bằng SELECT, sẽ tự động tạo query COUNT(*) cho table\n- Trả về 0 nếu table/query không có data\n- Hiệu suất tốt hơn so với executeQuery rồi check size\n- Có thể dùng với complex queries có WHERE, JOIN, etc.",
  "className" : "com.vtnet.netat.db.keywords.DatabaseKeyword",
  "methodName" : "getRowCount",
  "returnType" : "int",
  "parameters" : [ {
    "type" : "String",
    "name" : "profileName",
    "description" : "Tên database profile đã cấu hình"
  }, {
    "type" : "String",
    "name" : "queryOrTable",
    "description" : "Câu SELECT query hoặc table name"
  }, {
    "type" : "Object[]",
    "name" : "params",
    "description" : "Parameters cho query nếu có (tùy chọn)"
  } ]
}, {
  "name" : "uploadFile",
  "description" : "Tải lên một file từ máy local bằng cách gửi đường dẫn file vào một element <input type='file'>.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Tải lên ảnh đại diện\nwebKeyword.uploadFile(avatarUploadInput, \"C:/Users/Tester/Pictures/avatar.jpg\");\n\n// Tải lên tài liệu PDF\nwebKeyword.uploadFile(documentUploadInput, \"D:/Documents/report.pdf\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element input phải có thuộc tính type='file', phải tồn tại trong DOM (có thể ẩn nhưng phải tồn tại), file cần tải lên phải tồn tại tại đường dẫn được chỉ định, người dùng thực thi test phải có quyền truy cập vào file, và đường dẫn file phải is đường dẫn tuyệt đối. Có thể throw InvalidArgumentException nếu đường dẫn file không hợp lệ hoặc file không tồn tại, ElementNotInteractableException nếu element không phải is input type='file', StaleElementReferenceException nếu element không còn gắn với DOM, TimeoutException nếu element không xuất hiện trong thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "uploadFile",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element input (type='file') để tải file lên"
  }, {
    "type" : "String",
    "name" : "filePath",
    "description" : "Đường dẫn tuyệt đối đến file cần tải lên trên máy"
  } ]
}, {
  "name" : "pushFile",
  "description" : "Đẩy một file từ máy tính vào một đường dẫn trên thiết bị di động. Hữu ích khi cần chuẩn bị dữ liệu hoặc tài nguyên cho test case. Lưu ý: Đường dẫn trên thiết bị phải là đường dẫn mà ứng dụng có quyền ghi. Trên Android, thường là trong /sdcard/. Trên iOS, cần sử dụng bundle path.",
  "category" : "Mobile",
  "subCategory" : "Utility",
  "example" : "// Đẩy một hình ảnh vào thư mục Downloads của thiết bị Android\nmobileKeyword.pushFile(\"/sdcard/Download/avatar.png\", \"C:/test-data/images/avatar.png\");\n\n// Đẩy file CSV chứa dữ liệu test\nmobileKeyword.pushFile(\"/sdcard/TestData/users.csv\", \"src/test/resources/testdata/users.csv\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. File nguồn phải tồn tại trên máy chạy test và đường dẫn đích trên thiết bị phải có quyền ghi. Trên Android không root, chỉ có thể ghi vào thư mục shared như /sdcard/. Trên iOS, cần sử dụng đường dẫn bundle đúng cú pháp. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình điều khiển, IOException nếu không thể đọc file nguồn, IllegalArgumentException nếu đường dẫn không hợp lệ, hoặc SecurityException nếu không có quyền ghi vào đường dẫn đích.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "pushFile",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "devicePath",
    "description" : "Đường dẫn đích trên thiết bị di động"
  }, {
    "type" : "String",
    "name" : "localFilePath",
    "description" : "Đường dẫn tuyệt đối đến file trên máy tính chạy test"
  } ]
}, {
  "name" : "extractTextByRegex",
  "description" : "Trích xuất một phần của chuỗi văn bản dựa trên một biểu thức chính quy (regex) và một nhóm (group) cụ thể. Phương thức này tìm kiếm sự xuất hiện đầu tiên của mẫu regex trong chuỗi văn bản và trả về giá trị của nhóm được chỉ định.",
  "category" : "Utility",
  "subCategory" : "String",
  "example" : "// Lấy mã đơn hàng '12345' từ chuỗi 'Mã đơn hàng của bạn là DH-12345'\nString orderCode = utilityKeyword.extractTextByRegex(\"Mã đơn hàng của bạn là DH-12345\", \"DH-(\\\\d+)\", 1);\n// orderCode sẽ có giá trị \"12345\"",
  "returnValue" : "String - Chuỗi văn bản được trích xuất từ nhóm được chỉ định, hoặc null nếu không tìm thấy kết quả khớp",
  "note" : "Áp dụng cho tất cả nền tảng. Có thể throw PatternSyntaxException nếu biểu thức chính quy không hợp lệ, hoặc IndexOutOfBoundsException nếu chỉ số nhóm không tồn tại.",
  "className" : "com.vtnet.netat.core.keywords.UtilityKeyword",
  "methodName" : "extractTextByRegex",
  "returnType" : "String",
  "parameters" : [ {
    "type" : "String",
    "name" : "text",
    "description" : "Chuỗi văn bản nguồn cần trích xuất dữ liệu"
  }, {
    "type" : "String",
    "name" : "regex",
    "description" : "Biểu thức chính quy để tìm kiếm mẫu trong chuỗi văn bản"
  }, {
    "type" : "int",
    "name" : "group",
    "description" : "Chỉ số của nhóm cần trích xuất (0 cho toàn bộ kết quả khớp, 1 cho nhóm đầu tiên, v.v.)"
  } ]
}, {
  "name" : "getAttribute",
  "description" : "Lấy và trả về giá trị của một thuộc tính (attribute) cụ thể trên một phần tử.",
  "category" : "Mobile",
  "subCategory" : "Getter",
  "example" : "String description = mobileKeyword.getAttribute(menuButton, \"content-desc\");",
  "returnValue" : "String|Giá trị của thuộc tính dưới dạng chuỗi.",
  "note" : "",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "getAttribute",
  "returnType" : "String",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần lấy thuộc tính."
  }, {
    "type" : "String",
    "name" : "attributeName",
    "description" : "Tên của thuộc tính cần lấy (ví dụ: 'content-desc', 'resource-id', 'checked')."
  } ]
}, {
  "name" : "takeScreenshot",
  "description" : "Chụp ảnh màn hình của thiết bị và lưu vào thư mục screenshots với tên file được chỉ định. Hữu ích khi cần ghi lại trạng thái màn hình tại các điểm quan trọng trong quá trình test, đặc biệt là khi gặp lỗi hoặc cần xác minh giao diện. Ảnh chụp màn hình sẽ được lưu với định dạng .png và tự động đính kèm vào báo cáo Allure nếu được cấu hình.",
  "category" : "Mobile",
  "subCategory" : "System",
  "example" : "// Chụp màn hình tại các bước quan trọng\nmobileKeyword.takeScreenshot(\"login_screen\");\nmobileKeyword.tap(loginButton);\nmobileKeyword.takeScreenshot(\"after_login\");\n\n// Chụp màn hình khi gặp lỗi\ntry {\n    mobileKeyword.tap(submitButton);\n} catch (Exception e) {\n    mobileKeyword.takeScreenshot(\"error_submit_form\");\n    throw e;\n}",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Thư mục screenshots phải tồn tại hoặc có quyền tạo và ứng dụng Appium phải có quyền chụp ảnh màn hình. Có thể throw WebDriverException nếu có lỗi khi chụp ảnh màn hình, IOException nếu không thể lưu ảnh vào thư mục chỉ định, hoặc IllegalArgumentException nếu tên file không hợp lệ.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "takeScreenshot",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "fileName",
    "description" : "Tên file để lưu ảnh (không cần đuôi .png)"
  } ]
}, {
  "name" : "resetApp",
  "description" : "Reset ứng dụng về trạng thái ban đầu, tương đương với việc xóa dữ liệu ứng dụng. Phương thức này giúp đưa ứng dụng về trạng thái như mới cài đặt mà không cần gỡ và cài đặt lại. Phương thức này chỉ reset trạng thái đầu vào (input state) của ứng dụng, không phải toàn bộ dữ liệu. Để xóa hoàn toàn dữ liệu ứng dụng, nên sử dụng executeMobileCommand với 'mobile:clearApp' trên Android hoặc gỡ và cài đặt lại trên iOS.",
  "category" : "Mobile",
  "subCategory" : "AppLifecycle",
  "example" : "// Reset ứng dụng về trạng thái ban đầu trước mỗi test case\nmobileKeyword.resetApp();\n\n// Reset sau khi hoàn thành một luồng test để chuẩn bị cho luồng tiếp theo\nmobileKeyword.completeCheckout();\nmobileKeyword.resetApp();\nmobileKeyword.loginWithCredentials(username, password);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Ứng dụng đã được khởi động trước đó. Có thể throw WebDriverException nếu không thể reset ứng dụng.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "resetApp",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "pause",
  "description" : "Tạm dừng việc thực thi kịch bản trong một khoảng thời gian tĩnh. (Lưu ý: Chỉ nên dùng khi thực sự cần thiết, ưu tiên các keyword chờ động).",
  "category" : "Mobile",
  "subCategory" : "Utility",
  "example" : "// Tạm dừng để đợi animation hoàn thành\nmobileKeyword.pause(3000); // Đợi 3 giây cho quá trình xử lý\n",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Không có điều kiện tiên quyết đặc biệt. Có thể throw InterruptedException nếu luồng thực thi bị gián đoạn trong khi tạm dừng.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "pause",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "int",
    "name" : "milliseconds",
    "description" : "Thời gian cần tạm dừng (tính bằng mili giây)"
  } ]
}, {
  "name" : "stopAllSessions",
  "description" : "Đóng tất cả các trình duyệt và phiên kết nối thiết bị đã được mở bởi các keyword 'startSession'.",
  "category" : "Driver",
  "subCategory" : "Session",
  "example" : "// Đặt ở cuối kịch bản hoặc trong khối @AfterClass để dọn dẹp\ndriver.stopAllSessions();",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Luôn luôn gọi keyword này để đảm bảo không có tiến trình nào bị treo sau khi kiểm thử kết thúc.",
  "className" : "com.vtnet.netat.core.keywords.DriverKeyword",
  "methodName" : "stopAllSessions",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "jsonPathEquals",
  "description" : "Kiểm tra giá trị JSON path bằng với expected value",
  "category" : "API",
  "subCategory" : "Assertion - JSON",
  "example" : "verify.jsonPathEquals(response, \"$.name\", \"John Doe\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiAssert",
  "methodName" : "jsonPathEquals",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ApiResponse",
    "name" : "response",
    "description" : ""
  }, {
    "type" : "String",
    "name" : "jsonPath",
    "description" : "JSON Path (VD: $.user.name)"
  }, {
    "type" : "Object",
    "name" : "expectedValue",
    "description" : "Giá trị mong đợi"
  } ]
}, {
  "name" : "assertNotContains",
  "description" : "Khẳng định rằng một chuỗi văn bản không chứa chuỗi con được chỉ định. Nếu có chứa, test case sẽ dừng lại và báo lỗi.",
  "category" : "Assertion",
  "subCategory" : "HardAssert",
  "example" : "assertNotContains(\"Hello World\", \"Error\");\nassertNotContains(successMessage, \"failed\", \"Thông báo thành công không được chứa từ failed\");\nassertNotContains(userEmail, \"@temp\", \"Email người dùng không được là email tạm thời\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Assertion này kiểm tra xem chuỗi nguồn không được chứa chuỗi con. Phân biệt chữ hoa chữ thường. Sẽ dừng test nếu tìm thấy chuỗi con.",
  "className" : "com.vtnet.netat.core.keywords.AssertionKeyword",
  "methodName" : "assertNotContains",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "sourceText",
    "description" : "Chuỗi văn bản nguồn cần kiểm tra"
  }, {
    "type" : "String",
    "name" : "substring",
    "description" : "Chuỗi con không được phép có trong văn bản nguồn"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "selectByVisibleText",
  "description" : "Chọn một option in dropdown dựa trên text hiển thị of nó.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Chọn quốc gia từ dropdown theo tên hiển thị\nwebKeyword.selectByVisibleText(countryDropdown, \"Việt Nam\");\n\n// Chọn danh mục sản phẩm\nwebKeyword.selectByVisibleText(categoryDropdown, \"Điện thoại & Máy tính bảng\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element dropdown phải tồn tại trong DOM, phải is thẻ <select> hợp lệ, phải hiển thị và có thể tương tác được, phải tồn tại ít nhất một option có text hiển thị khớp chính xác với text cần chọn, và text cần chọn phải khớp chính xác với text hiển thị (phân biệt chữ hoa/thường, khoảng trắng, ký tự đặc biệt). Có thể throw NoSuchElementException nếu không tìm thấy option với text hiển thị chỉ định, ElementNotVisibleException nếu element không hiển thị trên trang, ElementNotInteractableException nếu element không thể tương tác, StaleElementReferenceException nếu element không còn gắn với DOM, UnexpectedTagNameException nếu element không phải is thẻ <select>, TimeoutException nếu element không xuất hiện trong thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "selectByVisibleText",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element dropdown (thẻ select)"
  }, {
    "type" : "String",
    "name" : "text",
    "description" : "text hiển thị of option cần chọn"
  } ]
}, {
  "name" : "sendPutRequest",
  "description" : "Gửi PUT request",
  "category" : "API",
  "subCategory" : "Requests",
  "example" : "ApiResponse response = api.sendPutRequest(\"/users/1\");",
  "returnValue" : "ApiResponse - Response object",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiKeyword",
  "methodName" : "sendPutRequest",
  "returnType" : "ApiResponse",
  "parameters" : [ {
    "type" : "String",
    "name" : "endpoint",
    "description" : "Endpoint URL"
  } ]
}, {
  "name" : "verifyAlertPresent",
  "description" : "Khẳng định rằng một hộp thoại alert đang hiển thị trong một khoảng thời gian chờ.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify alert xuất hiện sau khi xóa\nwebKeyword.click(deleteButtonObject);\nwebKeyword.verifyAlertPresent(5);\nwebKeyword.acceptAlert(); // Xác nhận xóa\n\n// Verify alert xuất hiện khi rời trang có dữ liệu chưa lưu\nwebKeyword.sendKeys(commentField, \"Bình luận mới\");\nwebKeyword.click(backButtonObject);\nwebKeyword.verifyAlertPresent(3);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, trang web có thể hiển thị hộp thoại alert. Có thể throw AssertionError nếu không có hộp thoại alert xuất hiện trong thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyAlertPresent",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa"
  } ]
}, {
  "name" : "getCurrentUrl",
  "description" : "Lấy và trả về URL đầy đủ of trang web hiện tại mà trình duyệt đang hiển thị.",
  "category" : "Web",
  "subCategory" : "Getter",
  "example" : "// Verify URL sau khi điều hướng\nwebKeyword.navigateToUrl(\"https://example.com/products\");\nString currentUrl = webKeyword.getCurrentUrl();\nwebKeyword.verifyEqual(currentUrl, \"https://example.com/products\");\n\n// Verify URL sau khi gửi form\nwebKeyword.click(submitButtonObject);\nString resultUrl = webKeyword.getCurrentUrl();\nwebKeyword.verifyContains(resultUrl, \"success=true\");",
  "returnValue" : "String - URL đầy đủ of trang web hiện tại",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình duyệt, hoặc NoSuchSessionException nếu phiên WebDriver không còn hợp lệ.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "getCurrentUrl",
  "returnType" : "String",
  "parameters" : [ ]
}, {
  "name" : "assertElementCount",
  "description" : "Khẳng định rằng số lượng phần tử tìm thấy khớp với một con số mong đợi. Hữu ích khi cần kiểm tra số lượng các mục trong danh sách, số lượng tùy chọn, hoặc xác minh rằng một nhóm phần tử có số lượng chính xác. Phương thức này tìm tất cả các phần tử khớp với locator và so sánh số lượng với giá trị mong đợi.",
  "category" : "Mobile",
  "subCategory" : "Assertion",
  "example" : "// Kiểm tra số lượng sản phẩm trong giỏ hàng\nmobileKeyword.assertElementCount(cartItems, 3);\n\n// Với custom message\nmobileKeyword.assertElementCount(cartItems, 3, \n    \"Giỏ hàng phải chứa đúng 3 sản phẩm sau khi thêm\");\n\n// Xác minh danh sách rỗng sau khi xóa\nmobileKeyword.tap(clearAllButton);\nmobileKeyword.assertElementCount(listItems, 0, \n    \"Danh sách phải rỗng sau khi nhấn nút xóa tất cả\");\n\n// Kiểm tra số lượng menu items\nmobileKeyword.assertElementCount(menuItems, 5, \n    \"Menu chính phải có đúng 5 mục theo thiết kế\");\n// Kiểm tra số lượng notification\nmobileKeyword.assertElementCount(notifications, 2, \n    \"Phải có đúng 2 thông báo chưa đọc\");\n// Kiểm tra số lượng tabs\nmobileKeyword.assertElementCount(tabButtons, 4, \n    \"Bottom navigation phải có đúng 4 tab\");",
  "returnValue" : "void - Không trả về giá trị, ném AssertionError nếu kiểm tra thất bại",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Locator của phần tử phải hợp lệ và có thể tìm thấy nhiều phần tử. Nếu mong đợi không tìm thấy phần tử nào (count = 0), locator vẫn phải hợp lệ. Có thể throw AssertionError nếu số lượng phần tử tìm thấy không khớp với số lượng mong đợi, WebDriverException nếu có lỗi khi tương tác với trình điều khiển, hoặc InvalidSelectorException nếu locator không hợp lệ.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertElementCount",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Locator để tìm các phần tử"
  }, {
    "type" : "int",
    "name" : "expectedCount",
    "description" : "Số lượng phần tử mong đợi"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "arrayContains",
  "description" : "Kiểm tra array chứa giá trị cụ thể",
  "category" : "API",
  "subCategory" : "Assertion - Arrays",
  "example" : "verify.arrayContains(response, \"$.roles\", \"admin\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiAssert",
  "methodName" : "arrayContains",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ApiResponse",
    "name" : "response",
    "description" : ""
  }, {
    "type" : "String",
    "name" : "jsonPath",
    "description" : ""
  }, {
    "type" : "Object",
    "name" : "expectedValue",
    "description" : ""
  } ]
}, {
  "name" : "setLocalStorage",
  "description" : "Ghi một cặp khóa-giá trị vào Local Storage of trình duyệt. Hữu ích để thiết lập trạng thái ứng dụng hoặc token.",
  "category" : "Web",
  "subCategory" : "Storage",
  "example" : "// Thiết lập token xác thực người dùng\nwebKeyword.setLocalStorage(\"user_token\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\");\nwebKeyword.navigate(\"https://example.com/dashboard\");\n\n// Lưu trạng thái giỏ hàng\nwebKeyword.setLocalStorage(\"cart_items\", \"[{\\\"id\\\":123,\\\"quantity\\\":2}]\");\nwebKeyword.refreshPage();",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, trang web đã được tải hoàn toàn, trình duyệt hỗ trợ Local Storage. Có thể throw JavascriptException nếu có lỗi khi thực thi JavaScript, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "setLocalStorage",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "key",
    "description" : "Khóa (key) để lưu trữ"
  }, {
    "type" : "String",
    "name" : "value",
    "description" : "Giá trị (value) tương ứng"
  } ]
}, {
  "name" : "setBasicAuth",
  "description" : "Thiết lập Basic Authentication",
  "category" : "API",
  "subCategory" : "Authentication",
  "example" : "api.setBasicAuth(\"admin\", \"password123\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiKeyword",
  "methodName" : "setBasicAuth",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "username",
    "description" : "Username"
  }, {
    "type" : "String",
    "name" : "password",
    "description" : "Password"
  } ]
}, {
  "name" : "assertTrue",
  "description" : "Kiểm tra điều kiện là TRUE",
  "category" : "API",
  "subCategory" : "Assertion - General",
  "example" : "verify.assertTrue(isValid, \"Should be valid\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiAssert",
  "methodName" : "assertTrue",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "boolean",
    "name" : "condition",
    "description" : "Điều kiện cần kiểm tra"
  }, {
    "type" : "String[]",
    "name" : "message",
    "description" : "Thông báo khi fail"
  } ]
}, {
  "name" : "swipeUp",
  "description" : "Thực hiện hành động vuốt lên trên màn hình, tương đương với thao tác cuộn xuống để xem nội dung bên dưới. Phương thức này tự động tính toán các tọa độ dựa trên kích thước màn hình thiết bị.",
  "category" : "Mobile",
  "subCategory" : "Gesture",
  "example" : "// Vuốt lên với tốc độ mặc định\nmobileKeyword.swipeUp();\n\n// Vuốt lên với tốc độ chậm hơn\nmobileKeyword.swipeUp(1000);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Có thể throw WebDriverException nếu không thể thực hiện hành động vuốt.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "swipeUp",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "Integer[]",
    "name" : "durationInMs",
    "description" : "(Tùy chọn) Thời gian thực hiện vuốt (ms). Mặc định là 500ms nếu không được chỉ định"
  } ]
}, {
  "name" : "sendKeys",
  "description" : "Nhập một chuỗi text vào một element (thường is ô input hoặc textarea). Keyword sẽ tự động xóa nội dung có sẵn trong ô trước khi Enter text mới.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Nhập tên đăng nhập\nwebKeyword.sendKeys(usernameInputObject, \"my_username\");\n\n// Nhập nội dung tìm kiếm\nwebKeyword.sendKeys(searchInputObject, \"laptop gaming\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần nhập liệu phải tồn tại trong DOM, phải hiển thị và có thể tương tác được, và phải is loại có thể nhập liệu (input, textarea, contenteditable). Có thể throw ElementNotVisibleException nếu element không hiển thị trên trang, ElementNotInteractableException nếu element không thể tương tác, StaleElementReferenceException nếu element không còn gắn với DOM, TimeoutException nếu element không xuất hiện trong thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "sendKeys",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Ô input hoặc textarea cần nhập dữ liệu"
  }, {
    "type" : "String",
    "name" : "text",
    "description" : "Chuỗi text cần nhập vào element"
  } ]
}, {
  "name" : "assertContains",
  "description" : "Khẳng định rằng một chuỗi văn bản chứa chuỗi con được chỉ định. Nếu không chứa, test case sẽ dừng lại và báo lỗi.",
  "category" : "Assertion",
  "subCategory" : "HardAssert",
  "example" : "assertContains(\"Hello World\", \"World\");\nassertContains(pageTitle, \"Dashboard\", \"Tiêu đề trang phải chứa từ Dashboard\");\nassertContains(errorMessage, \"required\", \"Thông báo lỗi phải chứa từ required\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Assertion này kiểm tra xem chuỗi nguồn có chứa chuỗi con hay không. Phân biệt chữ hoa chữ thường. Sẽ dừng test nếu không tìm thấy chuỗi con.",
  "className" : "com.vtnet.netat.core.keywords.AssertionKeyword",
  "methodName" : "assertContains",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "sourceText",
    "description" : "Chuỗi văn bản nguồn cần kiểm tra"
  }, {
    "type" : "String",
    "name" : "substring",
    "description" : "Chuỗi con cần tìm trong văn bản nguồn"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "waitForRowCount",
  "description" : "Đợi cho đến khi row count đạt expected value (polling với timeout) - hữu ích cho async operations",
  "category" : "Database",
  "subCategory" : "Utility",
  "example" : "DatabaseKeyword db = new DatabaseKeyword();\n\n// Đợi async insert hoàn thành\n// Trigger async operation\ntriggerAsyncDataImport();\n\n// Wait for 100 records to be inserted\ndb.waitForRowCount(\n    \"mysql-dev\",\n    \"SELECT * FROM imported_data\",\n    100,\n    30000 // 30 second timeout\n);\nSystem.out.println(\"✓ All records imported\");\n\n// Wait for queue to be processed\ndb.waitForRowCount(\n    \"mysql-dev\",\n    \"SELECT * FROM queue WHERE status = ?\",\n    0, // Wait until queue is empty\n    60000,\n    \"pending\"\n);\nSystem.out.println(\"✓ Queue processed\");\n\n// Wait for specific user's orders\nint userId = 123;\ndb.waitForRowCount(\n    \"mysql-dev\",\n    \"SELECT * FROM orders WHERE user_id = ? AND status = ?\",\n    5,\n    10000,\n    userId,\n    \"completed\"\n);\n\n// With error handling\ntry {\n    db.waitForRowCount(\n        \"mysql-dev\",\n        \"SELECT * FROM async_results\",\n        10,\n        5000\n    );\n} catch (AssertionError e) {\n    System.out.println(\"Timeout: Expected count not reached\");\n}",
  "returnValue" : "void - Không trả về giá trị (throw AssertionError nếu timeout)",
  "note" : "- Polling mỗi 500ms để check row count\n- Throw AssertionError nếu không đạt expected count sau timeout\n- Hữu ích cho testing async operations, message queues, background jobs\n- Có thể dùng expectedCount = 0 để wait until empty",
  "className" : "com.vtnet.netat.db.keywords.DatabaseKeyword",
  "methodName" : "waitForRowCount",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "profileName",
    "description" : "Tên database profile đã cấu hình"
  }, {
    "type" : "String",
    "name" : "query",
    "description" : "Câu SELECT query"
  }, {
    "type" : "int",
    "name" : "expectedCount",
    "description" : "Số lượng rows mong đợi"
  }, {
    "type" : "long",
    "name" : "timeoutMs",
    "description" : "Timeout trong milliseconds"
  }, {
    "type" : "Object[]",
    "name" : "params",
    "description" : "Parameters cho query (tùy chọn)"
  } ]
}, {
  "name" : "pullFile",
  "description" : "Kéo một file từ thiết bị về máy tính và trả về nội dung dưới dạng chuỗi (đã được giải mã Base64). Hữu ích khi cần lấy các file log, dữ liệu hoặc tài nguyên từ thiết bị để phân tích hoặc xác minh. Lưu ý: Đường dẫn phải trỏ đến một file có thể truy cập được từ ứng dụng (với quyền thích hợp). Trên Android không root, thường chỉ có thể truy cập các file trong thư mục ứng dụng.",
  "category" : "Mobile",
  "subCategory" : "Utility",
  "example" : "// Lấy nội dung file log để kiểm tra\nString logContent = mobileKeyword.pullFile(\"/sdcard/Download/app.log\");\nassert logContent.contains(\"Transaction completed\");\n\n// Lấy file cấu hình để xác minh thiết lập\nString configContent = mobileKeyword.pullFile(\"/data/data/com.example.myapp/files/config.json\");\nJSONObject config = new JSONObject(configContent);\nassert config.getBoolean(\"darkMode\");",
  "returnValue" : "String - Nội dung của file được trả về dưới dạng chuỗi (đã giải mã Base64)",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. File cần lấy phải tồn tại trên thiết bị và ứng dụng phải có quyền đọc file đó. Trên Android không root, chỉ có thể đọc file từ thư mục ứng dụng hoặc thư mục shared. Trên iOS, cần sử dụng đường dẫn bundle đúng cú pháp. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình điều khiển, NoSuchFileException nếu file không tồn tại trên thiết bị, SecurityException nếu không có quyền đọc file, hoặc IllegalArgumentException nếu đường dẫn không hợp lệ.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "pullFile",
  "returnType" : "String",
  "parameters" : [ {
    "type" : "String",
    "name" : "devicePath",
    "description" : "Đường dẫn đến file trên thiết bị"
  } ]
}, {
  "name" : "bodyNotContains",
  "description" : "Kiểm tra body KHÔNG CHỨA substring",
  "category" : "API",
  "subCategory" : "Assertion - Body",
  "example" : "verify.bodyNotContains(response, \"error\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiAssert",
  "methodName" : "bodyNotContains",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ApiResponse",
    "name" : "response",
    "description" : ""
  }, {
    "type" : "String",
    "name" : "substring",
    "description" : ""
  } ]
}, {
  "name" : "waitForNotVisible",
  "description" : "Chờ cho đến khi một phần tử biến mất khỏi màn hình hoặc cho đến khi hết thời gian chờ. Phần tử được coi là không hiển thị khi nó không tồn tại trong DOM hoặc không thể nhìn thấy được (invisible). Hữu ích khi cần đảm bảo một phần tử đã biến mất (như màn hình loading) trước khi tiếp tục. Nếu phần tử vẫn hiển thị sau khi hết thời gian chờ, một TimeoutException sẽ được ném ra.",
  "category" : "Mobile",
  "subCategory" : "Wait",
  "example" : "// Chờ màn hình loading biến mất\nmobileKeyword.waitForNotVisible(loadingSpinner, 15);\n\n// Chờ dialog đóng\nmobileKeyword.waitForNotVisible(dialog, 3);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Đã xác định chính xác phần tử UI cần chờ đợi. Có thể throw TimeoutException nếu phần tử vẫn hiển thị sau khi hết thời gian chờ, hoặc StaleElementReferenceException nếu phần tử không còn gắn với DOM.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "waitForNotVisible",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần chờ biến mất"
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian tối đa (giây) để chờ phần tử biến mất"
  } ]
}, {
  "name" : "verifyElementAttributeSoft",
  "description" : "Verify giá trị của một thuộc tính (attribute) trên element. Nếu giá trị không khớp, kịch bản sẽ ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify nhiều thuộc tính của một element\nwebKeyword.verifyElementAttributeSoft(buttonObject, \"type\", \"submit\");\nwebKeyword.verifyElementAttributeSoft(buttonObject, \"class\", \"btn-primary\");\nwebKeyword.click(buttonObject); // Tiếp tục thực hiện hành động\n\n// Verify thuộc tính của nhiều element với custom message\nwebKeyword.verifyElementAttributeSoft(usernameInputObject, \"placeholder\", \"Nhập tên đăng nhập\", \n    \"Placeholder của username input không đúng\");\nwebKeyword.verifyElementAttributeSoft(passwordInputObject, \"type\", \"password\", \n    \"Input password phải có type là 'password'\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần Verify phải tồn tại trong DOM, và thuộc tính cần Verify phải tồn tại trên element. Có thể throw NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyElementAttributeSoft",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần Verify"
  }, {
    "type" : "String",
    "name" : "attributeName",
    "description" : "Tên của thuộc tính (ví dụ: 'href', 'class', 'value')"
  }, {
    "type" : "String",
    "name" : "expectedValue",
    "description" : "Giá trị mong đợi của thuộc tính"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "getScalarValue",
  "description" : "Lấy một giá trị scalar (single value) từ query - thường dùng cho COUNT, MAX, MIN, SUM, AVG",
  "category" : "Database",
  "subCategory" : "Data Retrieval",
  "example" : "DatabaseKeyword db = new DatabaseKeyword();\n\n// Đếm số lượng users\nObject countObj = db.getScalarValue(\n    \"mysql-dev\",\n    \"SELECT COUNT(*) FROM users\"\n);\nint totalUsers = ((Number) countObj).intValue();\nSystem.out.println(\"Total users: \" + totalUsers);\n\n// Lấy tên user theo ID\nString userName = (String) db.getScalarValue(\n    \"mysql-dev\",\n    \"SELECT name FROM users WHERE id = ?\",\n    123\n);\nSystem.out.println(\"User name: \" + userName);\n\n// Lấy max order amount\nObject maxAmountObj = db.getScalarValue(\n    \"mysql-dev\",\n    \"SELECT MAX(amount) FROM orders WHERE user_id = ?\",\n    123\n);\ndouble maxAmount = ((Number) maxAmountObj).doubleValue();\nSystem.out.println(\"Max order amount: $\" + maxAmount);\n\n// Lấy average rating\nObject avgObj = db.getScalarValue(\n    \"mysql-dev\",\n    \"SELECT AVG(rating) FROM reviews WHERE product_id = ?\",\n    456\n);\nif (avgObj != null) {\n    double avgRating = ((Number) avgObj).doubleValue();\n    System.out.println(\"Average rating: \" + String.format(\"%.2f\", avgRating));\n}",
  "returnValue" : "Object - Giá trị scalar (có thể là Integer, String, Date, etc. tùy query). Trả về null nếu không có result",
  "note" : "- Trả về giá trị của column đầu tiên trong row đầu tiên\n- Trả về null nếu query không có result\n- Thích hợp cho aggregate functions (COUNT, SUM, AVG, MAX, MIN)\n- Nếu query trả về nhiều columns, chỉ lấy column đầu tiên\n- Type của return value tùy thuộc vào column type trong database\n- Cần cast về đúng type khi sử dụng (Integer, String, Double, etc.)",
  "className" : "com.vtnet.netat.db.keywords.DatabaseKeyword",
  "methodName" : "getScalarValue",
  "returnType" : "Object",
  "parameters" : [ {
    "type" : "String",
    "name" : "profileName",
    "description" : "Tên database profile đã cấu hình"
  }, {
    "type" : "String",
    "name" : "query",
    "description" : "Câu lệnh SELECT trả về 1 giá trị"
  }, {
    "type" : "Object[]",
    "name" : "params",
    "description" : "Parameters cho query (tùy chọn)"
  } ]
}, {
  "name" : "isElementPresent",
  "description" : "Verify xem một element có tồn tại trong DOM hay không trong một khoảng thời gian chờ nhất định. Trả về true nếu tìm thấy, false nếu không tìm thấy và không ném ra exception.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify thông báo lỗi có xuất hiện không\nboolean isErrorVisible = webKeyword.isElementPresent(errorMessageObject, 5);\nif (isErrorVisible) {\n    // Xử lý khi có lỗi\n}\n\n// Verify element option có tồn tại không\nif (webKeyword.isElementPresent(optionalElementObject, 2)) {\n    webKeyword.click(optionalElementObject);\n}",
  "returnValue" : "boolean - true nếu element tồn tại, false nếu không tồn tại",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "isElementPresent",
  "returnType" : "boolean",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần tìm kiếm"
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa (tính bằng seconds)"
  } ]
}, {
  "name" : "check",
  "description" : "Verify và đảm bảo một checkbox hoặc radio button đang ở trạng thái được chọn. Nếu element is not selected, keyword sẽ thực hiện click để chọn nó.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Đảm bảo checkbox Điều khoản và Điều kiện is selected\nwebKeyword.check(termsAndConditionsCheckbox);\n\n// Chọn phương thức thanh toán\nwebKeyword.check(creditCardRadioButton);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần chọn phải tồn tại trong DOM, phải hiển thị và có thể tương tác được, và phải is checkbox hoặc radio button (input type=\"checkbox\" hoặc type=\"radio\"). Có thể throw ElementNotVisibleException nếu element không hiển thị trên trang, ElementNotInteractableException nếu element không thể tương tác, StaleElementReferenceException nếu element không còn gắn với DOM, TimeoutException nếu element không xuất hiện trong thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "check",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element checkbox hoặc radio button cần Verify và chọn"
  } ]
}, {
  "name" : "uninstallApp",
  "description" : "Gỡ cài đặt một ứng dụng khỏi thiết bị dựa trên định danh của ứng dụng. Trên Android, đây là package name (ví dụ: com.example.myapp). Trên iOS, đây là bundle ID (ví dụ: com.example.MyApp). Một số ứng dụng hệ thống không thể gỡ cài đặt ngay cả khi có quyền root/jailbreak.",
  "category" : "Mobile",
  "subCategory" : "AppLifecycle",
  "example" : "// Gỡ cài đặt ứng dụng Android\nmobileKeyword.uninstallApp(\"com.example.myapp\");\n\n// Gỡ cài đặt ứng dụng iOS\nmobileKeyword.uninstallApp(\"com.example.MyApp\");\n\n// Gỡ cài đặt để chuẩn bị cho test case cài đặt mới\nmobileKeyword.uninstallApp(\"com.banking.app\");\nmobileKeyword.installApp(\"C:/apps/banking-app.apk\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Có quyền gỡ cài đặt ứng dụng trên thiết bị. Có thể throw WebDriverException nếu không thể gỡ cài đặt ứng dụng, hoặc IllegalArgumentException nếu appId không hợp lệ.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "uninstallApp",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "appId",
    "description" : "AppPackage (Android) hoặc BundleID (iOS) của ứng dụng cần gỡ cài đặt"
  } ]
}, {
  "name" : "openUrl",
  "description" : "Điều hướng trình duyệt đến một địa chỉ web (URL) cụ thể.",
  "category" : "Web",
  "subCategory" : "Browser",
  "example" : "// Mở trang chủ Google\nwebKeyword.openUrl(\"https://www.google.com\");\n\n// Mở trang đăng nhập\nwebKeyword.openUrl(\"https://example.com/login\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, URL phải is một địa chỉ hợp lệ và có thể truy cập được, và kết nối mạng phải hoạt động. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình duyệt, InvalidArgumentException nếu URL không hợp lệ, hoặc TimeoutException nếu trang không tải thành công trong thời gian chờ mặc định.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "openUrl",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "url",
    "description" : "Địa chỉ trang web đầy đủ cần mở (ví dụ: 'https://www.google.com')"
  } ]
}, {
  "name" : "assertNotNull",
  "description" : "Kiểm tra giá trị KHÔNG NULL",
  "category" : "API",
  "subCategory" : "Assertion - General",
  "example" : "verify.assertNotNull(userId);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiAssert",
  "methodName" : "assertNotNull",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "Object",
    "name" : "object",
    "description" : ""
  } ]
}, {
  "name" : "executeScript",
  "description" : "Thực thi một SQL script chứa nhiều statements (phân cách bằng dấu ;)",
  "category" : "Database",
  "subCategory" : "Query Execution",
  "example" : "DatabaseKeyword db = new DatabaseKeyword();\n\n// Execute script để tạo và populate table\nString script = \n    \"CREATE TABLE IF NOT EXISTS test_users (\" +\n    \"    id INT PRIMARY KEY AUTO_INCREMENT,\" +\n    \"    name VARCHAR(100),\" +\n    \"    email VARCHAR(100)\" +\n    \");\" +\n    \"INSERT INTO test_users (name, email) VALUES ('John', 'john@test.com');\" +\n    \"INSERT INTO test_users (name, email) VALUES ('Jane', 'jane@test.com');\";\n\ndb.executeScript(\"mysql-dev\", script);\n\n// Execute setup script từ file\nString setupSql = new String(Files.readAllBytes(\n    Paths.get(\"src/test/resources/setup.sql\")\n));\ndb.executeScript(\"mysql-dev\", setupSql);\n\n// Multi-line script với StringBuilder\nStringBuilder sb = new StringBuilder();\nsb.append(\"DROP TABLE IF EXISTS temp_table;\");\nsb.append(\"CREATE TABLE temp_table (id INT, value VARCHAR(50));\");\nsb.append(\"INSERT INTO temp_table VALUES (1, 'test');\");\ndb.executeScript(\"mysql-dev\", sb.toString());",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "- Script sẽ được split theo dấu ; và execute từng statement riêng biệt\n- Nếu 1 statement fail, các statement sau sẽ không được execute\n- Thích hợp cho database setup/teardown scripts\n- Empty statements (chỉ có whitespace) sẽ bị bỏ qua\n- Throw DatabaseException nếu có bất kỳ statement nào fail",
  "className" : "com.vtnet.netat.db.keywords.DatabaseKeyword",
  "methodName" : "executeScript",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "profileName",
    "description" : "Tên database profile đã cấu hình"
  }, {
    "type" : "String",
    "name" : "script",
    "description" : "SQL script với nhiều statements, phân cách bằng dấu ;"
  } ]
}, {
  "name" : "hideKeyboard",
  "description" : "Ẩn bàn phím ảo nếu nó đang hiển thị trên màn hình. Hữu ích khi cần giải phóng không gian màn hình sau khi nhập liệu hoặc trước khi thực hiện các thao tác khác. Nếu bàn phím không hiển thị, phương thức này có thể gây ra lỗi trên một số thiết bị.",
  "category" : "Mobile",
  "subCategory" : "Interaction",
  "example" : "// Ẩn bàn phím sau khi nhập văn bản\nmobileKeyword.sendText(searchInput, \"điện thoại\");\nmobileKeyword.hideKeyboard();",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Có thể throw WebDriverException nếu không thể ẩn bàn phím hoặc bàn phím không hiển thị.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "hideKeyboard",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "getColumnValues",
  "description" : "Lấy tất cả giá trị của một column cụ thể dưới dạng List",
  "category" : "Database",
  "subCategory" : "Data Retrieval",
  "example" : "DatabaseKeyword db = new DatabaseKeyword();\n\n// Lấy danh sách email của active users\nList<Object> emails = db.getColumnValues(\n    \"mysql-dev\",\n    \"SELECT email FROM users WHERE status = ?\",\n    \"email\",\n    \"active\"\n);\nfor (Object email : emails) {\n    System.out.println(\"Email: \" + email);\n}\n\n// Lấy danh sách IDs\nList<Object> orderIds = db.getColumnValues(\n    \"mysql-dev\",\n    \"SELECT id FROM orders WHERE user_id = ?\",\n    \"id\",\n    123\n);\nSystem.out.println(\"Found \" + orderIds.size() + \" orders\");\n\n// Lấy danh sách product names\nList<Object> productNames = db.getColumnValues(\n    \"mysql-dev\",\n    \"SELECT name FROM products WHERE category = ?\",\n    \"name\",\n    \"Electronics\"\n);\n\n// Check if list contains specific value\nif (emails.contains(\"john@test.com\")) {\n    System.out.println(\"✓ John's email found in active users\");\n}",
  "returnValue" : "List<Object> - List các giá trị của column (có thể chứa null). Empty list nếu không có results",
  "note" : "- Trả về List chứa giá trị của column từ tất cả rows\n- Trả về empty list [] nếu query không có result\n- List có thể chứa null values nếu column cho phép NULL\n- List có thể chứa duplicate values\n- Thứ tự trong list giống thứ tự rows trả về từ query",
  "className" : "com.vtnet.netat.db.keywords.DatabaseKeyword",
  "methodName" : "getColumnValues",
  "returnType" : "List",
  "parameters" : [ {
    "type" : "String",
    "name" : "profileName",
    "description" : "Tên database profile đã cấu hình"
  }, {
    "type" : "String",
    "name" : "query",
    "description" : "Câu lệnh SELECT"
  }, {
    "type" : "String",
    "name" : "columnName",
    "description" : "Tên column cần lấy giá trị"
  }, {
    "type" : "Object[]",
    "name" : "params",
    "description" : "Parameters cho query (tùy chọn)"
  } ]
}, {
  "name" : "assertElementNotSelected",
  "description" : "Khẳng định rằng một element (checkbox hoặc radio button) đang ở trạng thái không được chọn. Nếu đang được chọn, kịch bản sẽ DỪNG LẠI.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify checkbox thông báo không được chọn mặc định\nwebKeyword.assertElementNotSelected(newsletterCheckbox);\nwebKeyword.click(newsletterCheckbox); // Chọn để nhận thông báo\n\n// Verify các tùy chọn bổ sung không được chọn với custom message\nwebKeyword.assertElementNotSelected(expressShippingRadio, \n    \"Vận chuyển nhanh không nên được chọn mặc định\");\nwebKeyword.assertElementNotSelected(giftWrappingCheckbox, \n    \"Gói quà không nên được chọn mặc định\");\nwebKeyword.click(expressShippingRadio); // Chọn vận chuyển nhanh",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần Verify phải tồn tại trong DOM và là checkbox hoặc radio button. Có thể throw AssertionError nếu element đang ở trạng thái được chọn, NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, WebDriverException nếu có lỗi khi tương tác với trình duyệt, hoặc IllegalArgumentException nếu element không phải là checkbox hoặc radio button.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "assertElementNotSelected",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element checkbox hoặc radio button cần Verify"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "getLocalStorage",
  "description" : "Đọc và trả về giá trị từ Local Storage of trình duyệt dựa trên một khóa (key) được cung cấp.",
  "category" : "Web",
  "subCategory" : "Storage",
  "example" : "// Verify token xác thực\nString userToken = webKeyword.getLocalStorage(\"user_token\");\nif (userToken == null || userToken.isEmpty()) {\n    webKeyword.navigate(\"https://example.com/login\");\n}\n\n// Đọc thông tin giỏ hàng\nString cartItems = webKeyword.getLocalStorage(\"cart_items\");\nlogger.info(\"Số lượng sản phẩm trong giỏ: \" + cartItems);",
  "returnValue" : "String - Giá trị được lưu trữ trong Local Storage với khóa đã chỉ định, hoặc null nếu không tìm thấy",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, trang web đã được tải hoàn toàn, trình duyệt hỗ trợ Local Storage. Có thể throw JavascriptException nếu có lỗi khi thực thi JavaScript, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "getLocalStorage",
  "returnType" : "String",
  "parameters" : [ {
    "type" : "String",
    "name" : "key",
    "description" : "Khóa (key) of giá trị cần đọc"
  } ]
}, {
  "name" : "maximizeWindow",
  "description" : "Phóng to cửa sổ trình duyệt hiện tại ra kích thước lớn nhất có thể trên màn hình.",
  "category" : "Web",
  "subCategory" : "Browser",
  "example" : "// Phóng to cửa sổ trình duyệt khi bắt đầu kiểm thử\nwebKeyword.openUrl(\"https://example.com\");\nwebKeyword.maximizeWindow();\n\n// Phóng to cửa sổ trước khi chụp ảnh màn hình\nwebKeyword.maximizeWindow();\nwebKeyword.takeScreenshot(\"full_page\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và trình duyệt phải hỗ trợ thay đổi kích thước cửa sổ. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình duyệt, NoSuchSessionException nếu phiên WebDriver không còn hợp lệ, hoặc UnsupportedOperationException nếu trình duyệt không hỗ trợ thay đổi kích thước.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "maximizeWindow",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "waitForPageLoaded",
  "description" : "Tạm dừng kịch bản cho đến khi trang web tải xong hoàn toàn (trạng thái 'document.readyState' is 'complete').",
  "category" : "Web",
  "subCategory" : "Wait",
  "example" : "// Chờ trang tải xong sau khi điều hướng\nwebKeyword.navigateToUrl(\"https://example.com/dashboard\");\nwebKeyword.waitForPageLoaded(30);\nwebKeyword.verifyElementVisible(dashboardWidgetsObject);\n\n// Chờ trang tải xong sau khi đăng nhập\nwebKeyword.sendKeys(usernameInputObject, \"testuser\");\nwebKeyword.sendKeys(passwordInputObject, \"password123\");\nwebKeyword.click(loginButtonObject);\nwebKeyword.waitForPageLoaded(25);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, trình duyệt phải hỗ trợ thực thi JavaScript, và trang web sẽ hoàn thành quá trình tải trong khoảng thời gian chờ đã chỉ định. Có thể throw TimeoutException nếu trang không tải xong trong thời gian chờ đã chỉ định, JavascriptException nếu có lỗi khi thực thi JavaScript, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "waitForPageLoaded",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa (tính bằng seconds)"
  } ]
}, {
  "name" : "getTextFromElements",
  "description" : "Lấy và trả về một danh sách (List) các chuỗi text từ mỗi element trong một danh sách các element.",
  "category" : "Web",
  "subCategory" : "Getter",
  "example" : "// Lấy danh sách tên sản phẩm\nList<String> productNames = webKeyword.getTextFromElements(productNameObject);\nSystem.out.println(\"Tìm thấy \" + productNames.size() + \" sản phẩm\");\n\n// Verify danh sách giá sản phẩm\nList<String> prices = webKeyword.getTextFromElements(productPriceObject);\nfor (String price : prices) {\n    webKeyword.verifyTrue(price.contains(\"₫\"), \"Giá không đúng định dạng\");\n}",
  "returnValue" : "List<String> - Danh sách các chuỗi text từ các element tìm thấy",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, locator of đối tượng giao diện phải hợp lệ, và các element cần lấy text phải tồn tại trong DOM. Có thể throw NoSuchElementException nếu không tìm thấy element nào khớp với locator, StaleElementReferenceException nếu element không còn gắn với DOM trong quá trình xử lý, TimeoutException nếu các element không xuất hiện trong thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "getTextFromElements",
  "returnType" : "List",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng giao diện đại diện cho các element cần lấy text"
  } ]
}, {
  "name" : "getElementWidth",
  "description" : "Lấy và trả về chiều rộng (width) của một đối tượng (tính bằng pixel).",
  "category" : "Web",
  "subCategory" : "Getter",
  "example" : "// Lấy chiều rộng của một banner quảng cáo\nint bannerWidth = webKeyword.getElementWidth(UiObjectHelper.getObject(\"homePage/adBanner\"));\nassertion.assertEquals(bannerWidth, 900);",
  "returnValue" : "int - Chiều rộng của đối tượng.",
  "note" : "Phần tử phải hiển thị trên trang để có chiều rộng hợp lệ.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "getElementWidth",
  "returnType" : "int",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng cần lấy chiều rộng"
  } ]
}, {
  "name" : "generateRandomIntegerNumber",
  "description" : "Tạo ra một số nguyên ngẫu nhiên trong một khoảng cho trước (bao gồm cả min và max).",
  "category" : "Utility",
  "subCategory" : "Data Generation",
  "example" : "int randomAge = utilityKeyword.generateRandomNumber(18, 65);",
  "returnValue" : "int|Số nguyên ngẫu nhiên đã được tạo ra.",
  "note" : "",
  "className" : "com.vtnet.netat.core.keywords.UtilityKeyword",
  "methodName" : "generateRandomIntegerNumber",
  "returnType" : "int",
  "parameters" : [ {
    "type" : "int",
    "name" : "min",
    "description" : "Giá trị nhỏ nhất của khoảng."
  }, {
    "type" : "int",
    "name" : "max",
    "description" : "Giá trị lớn nhất của khoảng."
  } ]
}, {
  "name" : "clickByCoordinates",
  "description" : "Thực hiện hành động click chuột tại một tọa độ (x, y) cụ thể trên trang. Hữu ích khi cần click vào một vị trí không có locator rõ ràng, ví dụ như trên một canvas hoặc bản đồ.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Click vào vị trí (150, 300) trên trang\nwebKeyword.clickByCoordinates(150, 300);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Tọa độ được tính so với toàn bộ trang, không phải so với viewport hiện tại. Cần đảm bảo tọa độ nằm trong phạm vi hợp lệ.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "clickByCoordinates",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "int",
    "name" : "x",
    "description" : "Tọa độ theo trục ngang (pixel), tính từ góc trên bên trái của trang"
  }, {
    "type" : "int",
    "name" : "y",
    "description" : "Tọa độ theo trục dọc (pixel), tính từ góc trên bên trái của trang"
  } ]
}, {
  "name" : "getElementX",
  "description" : "Lấy và trả về tọa độ theo trục X (ngang) của góc trên bên trái của một đối tượng.",
  "category" : "Web",
  "subCategory" : "Getter",
  "example" : "// Lấy tọa độ X của một nút bấm\nint buttonX = webKeyword.getElementX(UiObjectHelper.getObject(\"loginScreen/loginButton\"));\nSystem.out.println(\"Nút bấm cách lề trái: \" + buttonX + \"px\");",
  "returnValue" : "int - Tọa độ X của đối tượng.",
  "note" : "Tọa độ được tính so với viewport (khung nhìn) hiện tại của trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "getElementX",
  "returnType" : "int",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng cần lấy tọa độ X"
  } ]
}, {
  "name" : "setAcceptHeader",
  "description" : "Thiết lập Accept header",
  "category" : "API",
  "subCategory" : "Headers",
  "example" : "api.setAcceptHeader(\"JSON\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiKeyword",
  "methodName" : "setAcceptHeader",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "acceptType",
    "description" : "JSON, XML, TEXT, hoặc full MIME type"
  } ]
}, {
  "name" : "generateRandomString",
  "description" : "Tạo ra một chuỗi ký tự ngẫu nhiên với độ dài và loại ký tự được chỉ định.",
  "category" : "Utility",
  "subCategory" : "Data Generation",
  "example" : "String randomEmail = utilityKeyword.generateRandomString(10, \"ALPHANUMERIC\") + \"@test.com\";",
  "returnValue" : "String|Chuỗi ngẫu nhiên đã được tạo ra.",
  "note" : "",
  "className" : "com.vtnet.netat.core.keywords.UtilityKeyword",
  "methodName" : "generateRandomString",
  "returnType" : "String",
  "parameters" : [ {
    "type" : "int",
    "name" : "length",
    "description" : "Độ dài mong muốn của chuỗi."
  }, {
    "type" : "String",
    "name" : "type",
    "description" : "Loại ký tự: 'ALPHABETIC' (chỉ chữ), 'NUMERIC' (chỉ số), hoặc 'ALPHANUMERIC' (cả chữ và số)."
  } ]
}, {
  "name" : "assertElementDisabled",
  "description" : "Khẳng định rằng một element đang ở trạng thái không thể tương tác (disabled). Nếu element đang enabled, kịch bản sẽ DỪNG LẠI.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify nút gửi form bị vô hiệu hóa khi chưa điền thông tin bắt buộc\nwebKeyword.navigateToUrl(\"https://example.com/registration\");\nwebKeyword.waitForPageLoaded(10);\nwebKeyword.assertElementDisabled(submitButtonBeforeFillForm);\n\n// Verify nút thanh toán bị vô hiệu hóa với custom message\nwebKeyword.click(checkoutButtonObject);\nwebKeyword.waitForPageLoaded(15);\nwebKeyword.assertElementDisabled(paymentButtonObject, \n    \"Nút thanh toán phải bị vô hiệu hóa khi chưa chọn phương thức\");\n\n// Verify button bị khóa trong trial version\nwebKeyword.assertElementDisabled(premiumFeatureButtonObject, \"Tính năng premium phải bị khóa\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và element cần Verify phải tồn tại trong DOM. Có thể throw AssertionError nếu element đang ở trạng thái enabled, NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "assertElementDisabled",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần Verify"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "getAlertText",
  "description" : "Chờ cho đến khi một hộp thoại alert, prompt, hoặc confirm of trình duyệt xuất hiện và lấy về nội dung text of nó.",
  "category" : "Web",
  "subCategory" : "Alert",
  "example" : "// Lấy và Verify nội dung thông báo xác nhận\nwebKeyword.click(deleteButtonObject);\nString alertMessage = webKeyword.getAlertText();\nif (alertMessage.contains(\"Bạn có chắc chắn muốn xóa?\")) {\n    webKeyword.acceptAlert();\n}\n\n// Lấy thông báo lỗi từ alert\nwebKeyword.click(submitButtonObject);\nString errorMessage = webKeyword.getAlertText();\nlogger.info(\"Error message: \" + errorMessage);",
  "returnValue" : "String - Nội dung text of hộp thoại alert",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, một hộp thoại alert đang hiển thị hoặc sẽ xuất hiện. Có thể throw TimeoutException nếu không có hộp thoại alert xuất hiện trong thời gian chờ, NoAlertPresentException nếu không có hộp thoại alert đang hiển thị, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "getAlertText",
  "returnType" : "String",
  "parameters" : [ ]
}, {
  "name" : "contextClick",
  "description" : "Thực hiện hành động click chuột phải vào một element. Thường dùng để mở các menu ngữ cảnh (context menu).",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Click chuột phải vào biểu tượng file\nwebKeyword.contextClick(fileIconObject);\nwebKeyword.waitForElementVisible(contextMenuObject);\n\n// Click chuột phải vào hình ảnh để tải xuống\nwebKeyword.contextClick(productImageObject);\nwebKeyword.click(saveImageOptionObject);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần click phải tồn tại trong DOM, phải hiển thị và có thể tương tác được, không bị che khuất bởi các element khác, và trình duyệt phải hỗ trợ thao tác chuột phải (một số trình duyệt di động có thể không hỗ trợ). Có thể throw ElementNotVisibleException nếu element không hiển thị trên trang, ElementNotInteractableException nếu element không thể tương tác, StaleElementReferenceException nếu element không còn gắn với DOM, TimeoutException nếu element không xuất hiện trong thời gian chờ, WebDriverException nếu có lỗi khi tương tác với trình duyệt, hoặc MoveTargetOutOfBoundsException nếu element nằm ngoài viewport hiện tại.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "contextClick",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần thực hiện hành động click chuột phải"
  } ]
}, {
  "name" : "bodyContains",
  "description" : "Kiểm tra body CHỨA substring",
  "category" : "API",
  "subCategory" : "Assertion - Body",
  "example" : "verify.bodyContains(response, \"success\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiAssert",
  "methodName" : "bodyContains",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ApiResponse",
    "name" : "response",
    "description" : ""
  }, {
    "type" : "String",
    "name" : "substring",
    "description" : ""
  } ]
}, {
  "name" : "takeScreenshot",
  "description" : "Chụp lại ảnh toàn bộ màn hình (viewport) of trình duyệt và lưu vào một file tại đường dẫn được chỉ định.",
  "category" : "Web",
  "subCategory" : "Utility",
  "example" : "// Chụp ảnh màn hình khi gặp lỗi\ntry {\n    webKeyword.click(submitButtonObject);\n    webKeyword.verifyElementVisibleHard(confirmationMessageObject, 5);\n} catch (Exception e) {\n    webKeyword.takeScreenshot(\"D:/screenshots/error.png\");\n    throw e;\n}\n\n// Chụp ảnh màn hình để lưu trữ trạng thái\nwebKeyword.waitForPageLoaded();\nwebKeyword.takeScreenshot(\"D:/screenshots/homepage.png\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, thư mục đích phải tồn tại hoặc có quyền tạo thư mục. Có thể throw RuntimeException nếu không thể chụp hoặc lưu ảnh màn hình, IOException nếu có lỗi khi ghi file, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "takeScreenshot",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "filePath",
    "description" : "Đường dẫn đầy đủ để lưu file ảnh (ví dụ: 'C:/screenshots/error.png')"
  } ]
}, {
  "name" : "verifyElementEnabledSoft",
  "description" : "Verify một element có đang ở trạng thái enabled hay không. Nếu không, kịch bản sẽ ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify nhiều trường nhập liệu tùy chọn có thể tương tác\nwebKeyword.verifyElementEnabledSoft(optionalFieldObject);\nwebKeyword.verifyElementEnabledSoft(commentFieldObject);\nwebKeyword.sendKeys(commentFieldObject, \"Đây là bình luận của tôi\"); // Tiếp tục ngay cả khi có trường không enabled\n\n// Verify các nút chức năng trong trang quản trị với custom message\nwebKeyword.verifyElementEnabledSoft(addButtonObject, \"Nút thêm mới nên được kích hoạt\");\nwebKeyword.verifyElementEnabledSoft(editButtonObject, \"Nút chỉnh sửa nên hoạt động\");\nwebKeyword.click(addButtonObject); // Tiếp tục thực hiện hành động",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và element cần Verify phải tồn tại trong DOM. Có thể throw NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyElementEnabledSoft",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần Verify"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "verifyRecordNotExists",
  "description" : "Verify rằng KHÔNG có record nào thỏa mãn điều kiện query trong database",
  "category" : "Database",
  "subCategory" : "Verification",
  "example" : "DatabaseKeyword db = new DatabaseKeyword();\n\n// Verify user đã bị delete\ndb.verifyRecordNotExists(\n    \"mysql-dev\",\n    \"SELECT * FROM users WHERE email = ?\",\n    \"deleted@test.com\"\n);\n\n// Verify không có pending orders\ndb.verifyRecordNotExists(\n    \"mysql-dev\",\n    \"SELECT * FROM orders WHERE user_id = ? AND status = ?\",\n    123,\n    \"pending\"\n);\n\n// Verify session đã expire\nString oldToken = \"expired_token_123\";\ndb.verifyRecordNotExists(\n    \"mysql-dev\",\n    \"SELECT * FROM sessions WHERE token = ? AND expires_at > NOW()\",\n    oldToken\n);\n\n// Test cleanup verification\ntry {\n    db.verifyRecordNotExists(\n        \"mysql-dev\",\n        \"SELECT * FROM temp_data WHERE created_at < DATE_SUB(NOW(), INTERVAL 7 DAY)\"\n    );\n    System.out.println(\"✓ Old temp data cleaned up\");\n} catch (AssertionError e) {\n    System.out.println(\"✗ Cleanup incomplete: \" + e.getMessage());\n}",
  "returnValue" : "void - Không trả về giá trị (throw AssertionError nếu tìm thấy record)",
  "note" : "- Throw AssertionError nếu tìm thấy bất kỳ record nào\n- Pass nếu query trả về 0 results\n- Thích hợp cho verification sau khi delete hoặc cleanup\n- Hữu ích để đảm bảo data đã được remove hoàn toàn",
  "className" : "com.vtnet.netat.db.keywords.DatabaseKeyword",
  "methodName" : "verifyRecordNotExists",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "profileName",
    "description" : "Tên database profile đã cấu hình"
  }, {
    "type" : "String",
    "name" : "query",
    "description" : "Câu lệnh SELECT để tìm record"
  }, {
    "type" : "Object[]",
    "name" : "params",
    "description" : "Parameters cho query (tùy chọn)"
  } ]
}, {
  "name" : "exportQueryToCSV",
  "description" : "Export kết quả query ra file CSV - hữu ích cho data extraction và reporting",
  "category" : "Database",
  "subCategory" : "Utility",
  "example" : "DatabaseKeyword db = new DatabaseKeyword();\n\n// Export tất cả users ra CSV\ndb.exportQueryToCSV(\n    \"mysql-dev\",\n    \"SELECT id, name, email, created_at FROM users\",\n    \"/tmp/users_export.csv\"\n);\nSystem.out.println(\"✓ Users exported to CSV\");\n\n// Export với filtering\ndb.exportQueryToCSV(\n    \"mysql-dev\",\n    \"SELECT * FROM orders WHERE created_at >= ?\",\n    \"./reports/orders_2025.csv\",\n    \"2025-01-01\"\n);\n\n// Export aggregated data\ndb.exportQueryToCSV(\n    \"mysql-dev\",\n    \"SELECT category, COUNT(*) as total, AVG(price) as avg_price \" +\n    \"FROM products GROUP BY category\",\n    \"./reports/product_summary.csv\"\n);\n\n// Generate report với timestamp\nString timestamp = new SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(new Date());\nString reportPath = \"./reports/daily_stats_\" + timestamp + \".csv\";\ndb.exportQueryToCSV(\n    \"mysql-dev\",\n    \"SELECT * FROM daily_statistics WHERE date = CURDATE()\",\n    reportPath\n);\nSystem.out.println(\"Report generated: \" + reportPath);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "- File CSV sẽ có header row với column names\n- Values được comma-separated, null values hiển thị là empty string\n- File sẽ bị overwrite nếu đã tồn tại\n- Throw exception nếu không thể write file\n- Hữu ích cho data export, reporting, và data analysis",
  "className" : "com.vtnet.netat.db.keywords.DatabaseKeyword",
  "methodName" : "exportQueryToCSV",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "profileName",
    "description" : "Tên database profile đã cấu hình"
  }, {
    "type" : "String",
    "name" : "query",
    "description" : "Câu SELECT query"
  }, {
    "type" : "String",
    "name" : "filePath",
    "description" : "Đường dẫn file CSV output"
  }, {
    "type" : "Object[]",
    "name" : "params",
    "description" : "Parameters cho query (tùy chọn)"
  } ]
}, {
  "name" : "getHeader",
  "description" : "Lấy giá trị header từ response",
  "category" : "API",
  "subCategory" : "Response - Headers",
  "example" : "String contentType = api.getHeader(response, \"Content-Type\");",
  "returnValue" : "String - Header value",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiKeyword",
  "methodName" : "getHeader",
  "returnType" : "String",
  "parameters" : [ {
    "type" : "ApiResponse",
    "name" : "response",
    "description" : ""
  }, {
    "type" : "String",
    "name" : "headerName",
    "description" : ""
  } ]
}, {
  "name" : "clear",
  "description" : "Xóa văn bản trong một ô input có thể chỉnh sửa. Chỉ áp dụng cho các phần tử có thuộc tính 'editable' là true như TextField, EditText. Không hoạt động với các phần tử không phải là trường nhập liệu.",
  "category" : "Mobile",
  "subCategory" : "Interaction",
  "example" : "// Xóa văn bản trong ô tìm kiếm\nmobileKeyword.clear(searchInput);\n\n// Xóa nội dung trong ô email trước khi nhập giá trị mới\nmobileKeyword.clear(emailInput);\nmobileKeyword.sendText(emailInput, \"new.email@example.com\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Phần tử UI cần phải là trường nhập liệu có thể chỉnh sửa. Có thể throw ElementNotVisibleException nếu phần tử không hiển thị, NoSuchElementException nếu không tìm thấy phần tử, hoặc ElementNotInteractableException nếu phần tử không thể tương tác hoặc không phải trường nhập liệu.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "clear",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử input cần xóa văn bản"
  } ]
}, {
  "name" : "switchToDefaultContent",
  "description" : "Chuyển sự điều khiển of WebDriver ra khỏi tất cả các iframe và quay về nội dung chính, cấp cao nhất of trang web.",
  "category" : "Web",
  "subCategory" : "Window&Frame",
  "example" : "// Thoát khỏi iframe và quay về nội dung chính\nwebKeyword.switchToFrame(paymentIframeObject);\nwebKeyword.sendKeys(cardNumberObject, \"4111111111111111\");\nwebKeyword.switchToDefaultContent(); // Quay về nội dung chính\nwebKeyword.waitForElementVisible(confirmationMessageObject);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "switchToDefaultContent",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "waitForTitleIs",
  "description" : "Tạm dừng kịch bản cho đến khi tiêu đề of trang hiện tại khớp chính xác với chuỗi được chỉ định.",
  "category" : "Web",
  "subCategory" : "Wait",
  "example" : "// Chờ tiêu đề trang sau khi đăng nhập thành công\nwebKeyword.sendKeys(usernameInputObject, \"testuser\");\nwebKeyword.sendKeys(passwordInputObject, \"password123\");\nwebKeyword.click(loginButtonObject);\nwebKeyword.waitForTitleIs(\"Bảng điều khiển người dùng\", 15);\n\n// Chờ tiêu đề trang sau khi chuyển tab\nwebKeyword.click(profileTabObject);\nwebKeyword.waitForTitleIs(\"Thông tin cá nhân\", 10);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và tiêu đề trang sẽ thay đổi thành giá trị mong đợi trong khoảng thời gian chờ. Có thể throw TimeoutException nếu tiêu đề trang không khớp với giá trị mong đợi trong thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "waitForTitleIs",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "expectedTitle",
    "description" : "Tiêu đề trang mong đợi"
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa (tính bằng seconds)"
  } ]
}, {
  "name" : "assertChecked",
  "description" : "Khẳng định rằng một switch, checkbox hoặc radio button đang ở trạng thái được chọn/bật. Phương thức này kiểm tra thuộc tính 'checked' của phần tử và ném AssertionError nếu phần tử không được chọn. Áp dụng cho các phần tử có thể chọn/bỏ chọn như checkbox, radio button, toggle switch. Phần tử phải hỗ trợ thuộc tính 'checked', nếu không có thể gây ra lỗi.",
  "category" : "Mobile",
  "subCategory" : "Assertion",
  "example" : "// Kiểm tra checkbox đã được chọn\nmobileKeyword.tap(agreeToTermsCheckbox);\nmobileKeyword.assertChecked(agreeToTermsCheckbox);\n\n// Với custom message\nmobileKeyword.assertChecked(agreeToTermsCheckbox, \n    \"Checkbox đồng ý điều khoản phải được chọn trước khi đăng ký\");\n\n// Kiểm tra các toggle switches\nmobileKeyword.assertChecked(notificationSwitch, \n    \"Switch thông báo phải được bật theo mặc định\");\nmobileKeyword.assertChecked(darkModeSwitch, \n    \"Chế độ tối phải được kích hoạt sau khi user chọn\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Phần tử UI cần kiểm tra phải là loại có thể chọn/bỏ chọn và hỗ trợ thuộc tính 'checked'. Có thể throw AssertionError nếu phần tử không ở trạng thái được chọn/bật, NoSuchElementException nếu không tìm thấy phần tử, hoặc WebDriverException nếu không thể truy cập thuộc tính 'checked'.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertChecked",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra trạng thái"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "jsonPathNotExists",
  "description" : "Kiểm tra JSON path KHÔNG TỒN TẠI (dùng cho security testing)",
  "category" : "API",
  "subCategory" : "Assertion - JSON",
  "example" : "verify.jsonPathNotExists(response, \"$.user.password\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiAssert",
  "methodName" : "jsonPathNotExists",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ApiResponse",
    "name" : "response",
    "description" : ""
  }, {
    "type" : "String",
    "name" : "jsonPath",
    "description" : ""
  } ]
}, {
  "name" : "assertNotChecked",
  "description" : "Khẳng định rằng một switch, checkbox hoặc radio button đang ở trạng thái không được chọn/tắt. Phương thức này kiểm tra thuộc tính 'checked' của phần tử và ném AssertionError nếu phần tử đang được chọn. Áp dụng cho các phần tử có thể chọn/bỏ chọn như checkbox, radio button, toggle switch. Lưu ý: Phần tử phải hỗ trợ thuộc tính 'checked', nếu không có thể gây ra lỗi.",
  "category" : "Mobile",
  "subCategory" : "Assertion",
  "example" : "// Kiểm tra rằng tùy chọn chưa được chọn ban đầu\nmobileKeyword.assertNotChecked(optionalFeatureCheckbox);\n\n// Với custom message\nmobileKeyword.assertNotChecked(optionalFeatureCheckbox, \n    \"Checkbox tính năng tùy chọn phải ở trạng thái chưa chọn khi khởi tạo\");\n\n// Xác minh các radio button khác không được chọn\nmobileKeyword.tap(option1RadioButton);\nmobileKeyword.assertChecked(option1RadioButton);\nmobileKeyword.assertNotChecked(option2RadioButton, \n    \"Option 2 phải không được chọn khi Option 1 đã được chọn\");\nmobileKeyword.assertNotChecked(option3RadioButton, \n    \"Option 3 phải không được chọn khi Option 1 đã được chọn\");",
  "returnValue" : "void - Không trả về giá trị, ném AssertionError nếu kiểm tra thất bại",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Phần tử cần kiểm tra phải tồn tại và có thuộc tính 'checked', và phải là loại có thể chọn/bỏ chọn (checkbox, radio button, switch). Có thể throw AssertionError nếu phần tử đang ở trạng thái được chọn/bật, NoSuchElementException nếu không tìm thấy phần tử, StaleElementReferenceException nếu phần tử không còn gắn với DOM, hoặc WebDriverException nếu không thể lấy thuộc tính 'checked' của phần tử.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertNotChecked",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra trạng thái"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "getTextFromElements",
  "description" : "Trích xuất và trả về danh sách các chuỗi văn bản từ tất cả phần tử khớp với locator. Mỗi phần tử trong danh sách sẽ được lấy text và thêm vào kết quả trả về.",
  "category" : "Mobile",
  "subCategory" : "Getter",
  "example" : "List<String> itemNames = mobileKeyword.getTextFromElements(itemNameObject);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "getTextFromElements",
  "returnType" : "List",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng UI đại diện cho các phần tử cần lấy văn bản"
  } ]
}, {
  "name" : "verifyElementDisabledSoft",
  "description" : "Verify một element có đang ở trạng thái disabled hay không. Nếu không, kịch bản sẽ ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify các tính năng bị khóa trong phiên bản dùng thử\nwebKeyword.verifyElementDisabledSoft(lockedFeatureButton);\nwebKeyword.verifyElementDisabledSoft(premiumFeatureButton);\nwebKeyword.click(upgradeAccountButton); // Tiếp tục thực hiện hành động\n\n// Verify các trường không thể chỉnh sửa trong chế độ xem với custom message\nwebKeyword.click(viewModeButton);\nwebKeyword.verifyElementDisabledSoft(nameFieldInViewMode, \n    \"Trường tên phải bị vô hiệu hóa trong chế độ xem\");\nwebKeyword.click(editModeButton); // Chuyển sang chế độ chỉnh sửa",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và element cần Verify phải tồn tại trong DOM. Có thể throw NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyElementDisabledSoft",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần Verify"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "getValueFromJson",
  "description" : "Lấy một giá trị từ một chuỗi JSON bằng cách sử dụng cú pháp JSON Pointer. JSON Pointer là một chuỗi bắt đầu bằng dấu gạch chéo (/) và tiếp theo là tên thuộc tính, cho phép truy cập vào các phần tử lồng nhau trong cấu trúc JSON.",
  "category" : "Utility",
  "subCategory" : "String",
  "example" : "// Giả sử có chuỗi JSON: {\"data\":{\"user\":{\"name\":\"John Doe\",\"age\":30}}}\nString userName = utilityKeyword.getValueFromJson(jsonString, \"/data/user/name\");\n// userName sẽ có giá trị \"John Doe\"",
  "returnValue" : "String - Giá trị được truy xuất dưới dạng chuỗi, hoặc null nếu không tìm thấy",
  "note" : "Áp dụng cho tất cả nền tảng. Có thể throw JsonProcessingException nếu chuỗi JSON không hợp lệ, hoặc IllegalArgumentException nếu JSON Pointer không hợp lệ.",
  "className" : "com.vtnet.netat.core.keywords.UtilityKeyword",
  "methodName" : "getValueFromJson",
  "returnType" : "String",
  "parameters" : [ {
    "type" : "String",
    "name" : "jsonString",
    "description" : "Chuỗi JSON nguồn cần truy vấn"
  }, {
    "type" : "String",
    "name" : "jsonPointer",
    "description" : "Đường dẫn đến giá trị cần lấy theo cú pháp JSON Pointer (ví dụ: '/user/name', '/data/0/id')"
  } ]
}, {
  "name" : "verifyElementNotPresentHard",
  "description" : "Khẳng định rằng một element không tồn tại trong DOM sau một khoảng thời gian chờ. Nếu element vẫn tồn tại, kịch bản sẽ DỪNG LẠI.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify element đã bị xóa\nwebKeyword.click(deleteButtonObject);\nwebKeyword.verifyElementNotPresentHard(deletedItemObject, 5);\n\n// Verify thông báo lỗi đã biến mất với custom message\nwebKeyword.sendKeys(emailInput, \"valid@example.com\");\nwebKeyword.verifyElementNotPresentHard(errorMessageObject, 3, \n    \"Thông báo lỗi phải biến mất sau khi nhập email hợp lệ\");\n\n// Verify popup đã đóng\nwebKeyword.click(closePopupButtonObject);\nwebKeyword.verifyElementNotPresentHard(popupModalObject, 10, \n    \"Popup modal phải đóng sau khi click nút đóng\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động. Có thể throw AssertionError nếu element vẫn tồn tại trong DOM sau thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyElementNotPresentHard",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần Verify"
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "softAssertEquals",
  "description" : "Kiểm tra hai giá trị có bằng nhau không. Nếu không, ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Assertion",
  "subCategory" : "Soft",
  "example" : "String pageTitle = web.getPageTitle();\nassertion.softAssertEquals(pageTitle, \"Trang chủ\", \"Tiêu đề trang không đúng\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "So sánh giá trị sau khi chuyển sang dạng chuỗi. Lỗi sẽ được ghi nhận và test vẫn tiếp tục. **Phải gọi `assertAll()` ở cuối** để tổng hợp kết quả.",
  "className" : "com.vtnet.netat.core.keywords.AssertionKeyword",
  "methodName" : "softAssertEquals",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "Object",
    "name" : "actualValue",
    "description" : "Giá trị thực tế"
  }, {
    "type" : "Object",
    "name" : "expectedValue",
    "description" : "Giá trị mong đợi"
  }, {
    "type" : "String[]",
    "name" : "message",
    "description" : "Thông điệp tùy chỉnh khi assertion fail"
  } ]
}, {
  "name" : "verifyCssValueHard",
  "description" : "So sánh giá trị của một thuộc tính CSS trên element. Nếu không khớp, kịch bản sẽ DỪNG LẠI.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify màu của thông báo lỗi\nwebKeyword.click(submitButtonObject); // Gửi form không hợp lệ\nwebKeyword.waitForElementVisible(errorMessageObject);\nwebKeyword.verifyCssValueHard(errorMessageObject, \"color\", \"rgba(255, 0, 0, 1)\");\n\n// Verify background-color của nút đã chọn với custom message\nwebKeyword.click(selectButtonObject);\nwebKeyword.verifyCssValueHard(selectButtonObject, \"background-color\", \"rgba(0, 123, 255, 1)\", \n    \"Màu nền của nút được chọn phải là màu xanh\");\n\n// Verify font-size của tiêu đề\nwebKeyword.verifyCssValueHard(titleObject, \"font-size\", \"24px\", \n    \"Kích thước font của tiêu đề phải là 24px\");\n\n// Verify display property của element ẩn\nwebKeyword.verifyCssValueHard(hiddenElementObject, \"display\", \"none\", \n    \"Element phải được ẩn với display: none\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và element cần Verify phải tồn tại trong DOM. Có thể throw AssertionError nếu giá trị CSS không khớp với giá trị mong đợi, NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyCssValueHard",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần Verify"
  }, {
    "type" : "String",
    "name" : "cssName",
    "description" : "Tên thuộc tính CSS (ví dụ: 'color')"
  }, {
    "type" : "String",
    "name" : "expectedValue",
    "description" : "Giá trị CSS mong đợi (ví dụ: 'rgb(255, 0, 0)')"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "verifyCssValueSoft",
  "description" : "So sánh giá trị của một thuộc tính CSS trên element. Nếu không khớp, kịch bản sẽ ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify độ đậm của tiêu đề\nwebKeyword.verifyCssValueSoft(titleObject, \"font-weight\", \"700\");\nwebKeyword.click(nextButtonObject); // Tiếp tục quy trình\n\n// Verify màu nền của nút với custom message\nwebKeyword.verifyCssValueSoft(buttonObject, \"background-color\", \"rgb(0, 123, 255)\", \n    \"Nút phải có màu xanh theo thiết kế\");\nwebKeyword.click(buttonObject);\n\n// Verify nhiều thuộc tính CSS\nwebKeyword.verifyCssValueSoft(headerObject, \"height\", \"60px\", \"Header phải có chiều cao 60px\");\nwebKeyword.verifyCssValueSoft(menuObject, \"display\", \"flex\", \"Menu phải sử dụng flexbox layout\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và element cần Verify phải tồn tại trong DOM. Có thể throw NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt. Giá trị CSS trả về có thể khác với giá trị trong stylesheet do browser normalization.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyCssValueSoft",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần Verify"
  }, {
    "type" : "String",
    "name" : "cssName",
    "description" : "Tên thuộc tính CSS (ví dụ: 'font-weight')"
  }, {
    "type" : "String",
    "name" : "expectedValue",
    "description" : "Giá trị CSS mong đợi (ví dụ: '700')"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "assertAll",
  "description" : "Thực hiện kiểm tra tất cả các soft assertion đã được thu thập trước đó. Nếu có bất kỳ assertion nào thất bại, phương thức sẽ ném ra ngoại lệ với thông tin chi tiết về các lỗi. Sau khi gọi phương thức này, soft assert sẽ được reset về null. Hãy gọi phương thức này bên trong @Test có sử dụng soft assert",
  "category" : "Assertion",
  "subCategory" : "Soft",
  "example" : "// Sau khi thực hiện nhiều soft assertion\nsoftAssert.assertEquals(actualTitle, expectedTitle, \"Title không khớp\");\nsoftAssert.assertTrue(isElementDisplayed, \"Element không hiển thị\");\n// Thực hiện kiểm tra tất cả các assertion\nassertAll();\n\n// Với custom message\nassertAll(\"Kiểm tra tất cả các assertion trong test case đăng nhập\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.core.keywords.AssertionKeyword",
  "methodName" : "assertAll",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi có assertion thất bại"
  } ]
}, {
  "name" : "verifyTextContainsHard",
  "description" : "Verify text của một element có chứa một chuỗi con hay không. Nếu không chứa, kịch bản sẽ DỪNG LẠI.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify thông báo chào mừng có chứa tên người dùng\nwebKeyword.verifyTextContainsHard(welcomeMessageObject, \"Xin chào\");\n\n// Verify kết quả tìm kiếm có chứa từ khóa đã tìm với custom message\nwebKeyword.sendKeys(searchInputObject, \"laptop\");\nwebKeyword.click(searchButtonObject);\nwebKeyword.waitForElementVisible(searchResultsObject);\nwebKeyword.verifyTextContainsHard(searchResultTitleObject, \"laptop\", \n    \"Kết quả tìm kiếm phải chứa từ khóa 'laptop'\");\n\n// Verify URL chứa thông tin cần thiết\nwebKeyword.verifyTextContainsHard(currentUrlObject, \"/products\", \"URL phải chứa đường dẫn sản phẩm\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và element cần Verify phải tồn tại trong DOM và có text. Có thể throw AssertionError nếu text của element không chứa chuỗi con mong đợi, NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyTextContainsHard",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element chứa text cần Verify"
  }, {
    "type" : "String",
    "name" : "partialText",
    "description" : "Chuỗi text con mong đợi"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "getValueFromXml",
  "description" : "Lấy một giá trị từ một chuỗi XML bằng cách sử dụng một biểu thức XPath. XPath là một ngôn ngữ truy vấn cho phép chọn các nút trong tài liệu XML dựa trên các tiêu chí khác nhau như đường dẫn, thuộc tính, và vị trí.",
  "category" : "Utility",
  "subCategory" : "String",
  "example" : "// Giả sử có chuỗi XML: <books><book id=\"bk101\"><title>XML Developer's Guide</title></book></books>\nString bookTitle = utilityKeyword.getValueFromXml(xmlString, \"//book[@id='bk101']/title/text()\");\n// bookTitle sẽ có giá trị \"XML Developer's Guide\"",
  "returnValue" : "String - Giá trị được truy xuất từ tài liệu XML, hoặc null nếu không tìm thấy",
  "note" : "Áp dụng cho tất cả nền tảng. Có thể throw SAXException nếu chuỗi XML không hợp lệ, hoặc XPathExpressionException nếu biểu thức XPath không hợp lệ.",
  "className" : "com.vtnet.netat.core.keywords.UtilityKeyword",
  "methodName" : "getValueFromXml",
  "returnType" : "String",
  "parameters" : [ {
    "type" : "String",
    "name" : "xmlString",
    "description" : "Chuỗi XML nguồn cần truy vấn"
  }, {
    "type" : "String",
    "name" : "xpathExpression",
    "description" : "Biểu thức XPath để tìm và trích xuất giá trị"
  } ]
}, {
  "name" : "unlockDevice",
  "description" : "Mở khóa màn hình thiết bị. Tự động phát hiện nền tảng (Android/iOS) và thực hiện lệnh mở khóa tương ứng.",
  "category" : "Mobile",
  "subCategory" : "System",
  "example" : "mobileKeyword.unlockDevice();",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "⚠️ QUAN TRỌNG: Chỉ mở khóa cơ bản (wake up screen). Không thể bypass mật khẩu, vân tay, hoặc Face ID. Thiết bị thực có thể vẫn yêu cầu xác thực bổ sung.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "unlockDevice",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "verifyApiCalled",
  "description" : "Verify API được gọi với path và params cụ thể. Fail test nếu không tìm thấy.",
  "category" : "Web",
  "subCategory" : "Network",
  "example" : "web.verifyApiCalled(\"/api/status\", params, 15);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyApiCalled",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "apiPath",
    "description" : "Path của API"
  }, {
    "type" : "Map",
    "name" : "expectedParams",
    "description" : "Query params mong đợi"
  }, {
    "type" : "int",
    "name" : "timeoutSeconds",
    "description" : "Thời gian chờ"
  } ]
}, {
  "name" : "denySystemDialog",
  "description" : "Tự động tìm và nhấn vào các nút hệ thống có văn bản phủ định như 'Deny', 'Cancel', 'Don't allow'. Hữu ích để từ chối các yêu cầu cấp quyền hoặc đóng các thông báo hệ thống không mong muốn. Phương thức sẽ tìm kiếm các nút phổ biến và nhấn vào nút đầu tiên tìm thấy. Nếu không tìm thấy nút nào, một cảnh báo sẽ được ghi vào log.",
  "category" : "Mobile",
  "subCategory" : "System",
  "example" : "// Từ chối yêu cầu quyền truy cập vị trí\nmobileKeyword.tap(locationFeatureButton);\nmobileKeyword.denySystemDialog();\n\n// Từ chối thông báo cập nhật ứng dụng\nmobileKeyword.denySystemDialog();",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Hộp thoại hệ thống đang hiển thị trên màn hình và chứa ít nhất một nút có văn bản phủ định được hỗ trợ. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình điều khiển, hoặc NoSuchElementException nếu không tìm thấy nút nào khớp với danh sách văn bản đã cho.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "denySystemDialog",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "openNewTab",
  "description" : "Mở một tab mới trong trình duyệt và tự động chuyển sự điều khiển sang tab mới đó. Có thể option mở một URL cụ thể trong tab mới.",
  "category" : "Web",
  "subCategory" : "Window&Frame",
  "example" : "// Mở tab mới với URL cụ thể\nwebKeyword.openNewTab(\"https://google.com\");\nwebKeyword.waitForElementVisible(searchBoxObject);\n\n// Mở tab trống và điều hướng sau đó\nwebKeyword.openNewTab(\"\");\nwebKeyword.navigate(\"https://example.com\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, trình duyệt hỗ trợ việc mở tab mới thông qua WebDriver. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình duyệt, hoặc UnsupportedCommandException nếu trình duyệt không hỗ trợ lệnh mở tab mới.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "openNewTab",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "url",
    "description" : "(option) URL để mở trong tab mới. Nếu để trống, sẽ mở tab trống"
  } ]
}, {
  "name" : "clearAllRequestSettings",
  "description" : "Xóa toàn bộ cấu hình request (headers, params, body...)",
  "category" : "API",
  "subCategory" : "Configuration",
  "example" : "api.clearAllRequestSettings();",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiKeyword",
  "methodName" : "clearAllRequestSettings",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "sendPostRequest",
  "description" : "Gửi POST request",
  "category" : "API",
  "subCategory" : "Requests",
  "example" : "ApiResponse response = api.sendPostRequest(\"/users\");",
  "returnValue" : "ApiResponse - Response object",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiKeyword",
  "methodName" : "sendPostRequest",
  "returnType" : "ApiResponse",
  "parameters" : [ {
    "type" : "String",
    "name" : "endpoint",
    "description" : "Endpoint URL"
  } ]
}, {
  "name" : "checkConnection",
  "description" : "Kiểm tra connection có hoạt động không bằng cách thực thi simple query",
  "category" : "Database",
  "subCategory" : "Connection Management",
  "example" : "DatabaseKeyword db = new DatabaseKeyword();\n\n// Check connection trước khi execute queries\nif (db.checkConnection(\"mysql-dev\")) {\n    System.out.println(\"✓ Database connection is healthy\");\n    // Proceed with queries\n} else {\n    System.out.println(\"✗ Database connection failed\");\n    // Handle connection error\n}\n\n// Health check trong loop\nfor (int i = 0; i < 3; i++) {\n    boolean isConnected = db.checkConnection(\"mysql-dev\");\n    System.out.println(\"Attempt \" + (i + 1) + \": \" + (isConnected ? \"OK\" : \"FAILED\"));\n    if (isConnected) break;\n    Thread.sleep(1000); // Wait before retry\n}\n\n// Check multiple profiles\nString[] profiles = {\"mysql-dev\", \"postgres-prod\", \"oracle-test\"};\nfor (String profile : profiles) {\n    boolean status = db.checkConnection(profile);\n    System.out.println(profile + \": \" + (status ? \"✓\" : \"✗\"));\n}",
  "returnValue" : "boolean - true nếu connection hoạt động, false nếu không",
  "note" : "- Thực thi simple query (SELECT 1) để test connection\n- Trả về false nếu có SQLException, không throw exception\n- Hữu ích cho health checks và pre-flight validations\n- Có thể dùng để verify connection sau khi reconnect",
  "className" : "com.vtnet.netat.db.keywords.DatabaseKeyword",
  "methodName" : "checkConnection",
  "returnType" : "boolean",
  "parameters" : [ {
    "type" : "String",
    "name" : "profileName",
    "description" : "Tên database profile đã cấu hình"
  } ]
}, {
  "name" : "highlightElement",
  "description" : "Tạm thời vẽ một đường viền màu đỏ xung quanh một element trên trang để dễ dàng nhận biết và gỡ lỗi trong quá trình chạy kịch bản.",
  "category" : "Web",
  "subCategory" : "Utility",
  "example" : "// Làm nổi bật các element trong quá trình điền form\nwebKeyword.highlightElement(usernameFieldObject);\nwebKeyword.sendKeys(usernameFieldObject, \"admin@example.com\");\nwebKeyword.highlightElement(passwordFieldObject);\nwebKeyword.sendKeys(passwordFieldObject, \"password123\");\n\n// Làm nổi bật element để gỡ lỗi\nwebKeyword.waitForElementVisible(tableRowObject, 10);\nwebKeyword.highlightElement(tableRowObject);\nwebKeyword.takeElementScreenshot(tableRowObject, \"D:/screenshots/table_row.png\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần làm nổi bật phải tồn tại trong DOM. Có thể throw NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "highlightElement",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần làm nổi bật"
  } ]
}, {
  "name" : "clickWithJavascript",
  "description" : "Thực hiện click vào một element bằng JavaScript. Hữu ích khi click thông thường không hoạt động.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Click vào nút ẩn\nwebKeyword.clickWithJavascript(hiddenButtonObject);\n\n// Click vào element bị che khuất bởi element khác\nwebKeyword.clickWithJavascript(overlappedElementObject);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần click phải tồn tại trong DOM, trình duyệt phải hỗ trợ thực thi JavaScript, và người dùng phải có quyền thực thi JavaScript trên trang. Có thể throw JavascriptException nếu có lỗi khi thực thi JavaScript, StaleElementReferenceException nếu element không còn gắn với DOM, TimeoutException nếu element không xuất hiện trong thời gian chờ, WebDriverException nếu có lỗi khi tương tác với trình duyệt, hoặc NoSuchSessionException nếu phiên WebDriver không còn hợp lệ.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "clickWithJavascript",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần click"
  } ]
}, {
  "name" : "clearQueryParams",
  "description" : "Xóa tất cả query parameters",
  "category" : "API",
  "subCategory" : "Parameters",
  "example" : "api.clearQueryParams();",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiKeyword",
  "methodName" : "clearQueryParams",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "executeMobileCommand",
  "description" : "Thực thi một lệnh Appium tùy chỉnh không có sẵn trong các keyword tiêu chuẩn. Cung cấp sự linh hoạt tối đa cho các tình huống đặc thù hoặc các tính năng mới của Appium chưa được bao gồm trong framework. Phương thức này cho phép truyền các tham số phức tạp dưới dạng Map. Lưu ý: Cần hiểu rõ về lệnh Appium cụ thể trước khi sử dụng.",
  "category" : "Mobile",
  "subCategory" : "System",
  "example" : "// Xóa dữ liệu của một ứng dụng trên Android\nMap<String, Object> args = new HashMap<>();\nargs.put(\"appId\", \"com.example.app\");\nmobileKeyword.executeMobileCommand(\"mobile: clearApp\", args);\n\n// Thực hiện lệnh shell trên Android\nMap<String, Object> shellArgs = new HashMap<>();\nshellArgs.put(\"command\", \"dumpsys battery\");\nObject result = mobileKeyword.executeMobileCommand(\"mobile: shell\", shellArgs);",
  "returnValue" : "Object - Kết quả trả về từ lệnh Appium, kiểu dữ liệu phụ thuộc vào lệnh được thực thi",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Đang sử dụng AppiumDriver (AndroidDriver hoặc IOSDriver), cần hiểu rõ về lệnh Appium cụ thể và các tham số của nó, lệnh phải được hỗ trợ bởi phiên bản Appium và driver đang sử dụng, và một số lệnh có thể yêu cầu quyền đặc biệt hoặc cấu hình bổ sung. Có thể throw WebDriverException nếu lệnh không được hỗ trợ hoặc không thể thực thi, InvalidArgumentException nếu tham số không đúng định dạng hoặc thiếu tham số bắt buộc, UnsupportedCommandException nếu lệnh không được hỗ trợ trên nền tảng hiện tại, SessionNotCreatedException nếu phiên Appium không còn hoạt động, hoặc NoSuchContextException nếu lệnh yêu cầu context không tồn tại.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "executeMobileCommand",
  "returnType" : "Object",
  "parameters" : [ {
    "type" : "String",
    "name" : "commandName",
    "description" : "Tên lệnh Appium cần thực thi (ví dụ: 'mobile: clearApp', 'mobile: shell')"
  }, {
    "type" : "Map",
    "name" : "commandArgs",
    "description" : "Các tham số của lệnh dưới dạng key-value"
  } ]
}, {
  "name" : "sendDeleteRequest",
  "description" : "Gửi DELETE request",
  "category" : "API",
  "subCategory" : "Requests",
  "example" : "ApiResponse response = api.sendDeleteRequest(\"/users/1\");",
  "returnValue" : "ApiResponse - Response object",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiKeyword",
  "methodName" : "sendDeleteRequest",
  "returnType" : "ApiResponse",
  "parameters" : [ {
    "type" : "String",
    "name" : "endpoint",
    "description" : "Endpoint URL"
  } ]
}, {
  "name" : "longPress",
  "description" : "Thực hiện hành động chạm và giữ (long press) vào một phần tử trong một khoảng thời gian xác định. Hữu ích cho các thao tác như hiển thị menu ngữ cảnh, kéo thả, hoặc các tương tác đặc biệt yêu cầu nhấn giữ. Phương thức sẽ đợi phần tử hiển thị trước khi thực hiện.",
  "category" : "Mobile",
  "subCategory" : "Interaction",
  "example" : "// Chạm và giữ một hình ảnh trong 2 giây để hiển thị menu lưu ảnh\nmobileKeyword.longPress(imageObject, 2);\n\n// Chạm và giữ một mục trong danh sách để hiển thị menu xóa\nmobileKeyword.longPress(listItemObject, 1);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Phần tử UI cần tương tác phải hiển thị trên màn hình. Có thể throw ElementNotVisibleException nếu phần tử không hiển thị, NoSuchElementException nếu không tìm thấy phần tử, hoặc ElementNotInteractableException nếu phần tử không thể tương tác.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "longPress",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần chạm và giữ"
  }, {
    "type" : "int",
    "name" : "durationInSeconds",
    "description" : "Thời gian giữ phần tử, tính bằng giây"
  } ]
}, {
  "name" : "verifyRecordExists",
  "description" : "Verify rằng ít nhất một record thỏa mãn điều kiện query tồn tại trong database",
  "category" : "Database",
  "subCategory" : "Verification",
  "example" : "DatabaseKeyword db = new DatabaseKeyword();\n\n// Verify user với email cụ thể tồn tại\ndb.verifyRecordExists(\n    \"mysql-dev\",\n    \"SELECT * FROM users WHERE email = ?\",\n    \"john@test.com\"\n);\n\n// Verify order đã được tạo\ndb.verifyRecordExists(\n    \"mysql-dev\",\n    \"SELECT * FROM orders WHERE user_id = ? AND status = ?\",\n    123,\n    \"completed\"\n);\n\n// Verify session còn active\nString sessionToken = \"abc123xyz\";\ndb.verifyRecordExists(\n    \"mysql-dev\",\n    \"SELECT * FROM sessions WHERE token = ? AND expires_at > NOW()\",\n    sessionToken\n);\n\n// Trong test case với try-catch\ntry {\n    db.verifyRecordExists(\n        \"mysql-dev\",\n        \"SELECT * FROM users WHERE id = ?\",\n        999\n    );\n    System.out.println(\"✓ User exists\");\n} catch (AssertionError e) {\n    System.out.println(\"✗ User not found: \" + e.getMessage());\n}",
  "returnValue" : "void - Không trả về giá trị (throw AssertionError nếu không tìm thấy)",
  "note" : "- Throw AssertionError với message rõ ràng nếu không tìm thấy record\n- Pass nếu tìm thấy >= 1 record matching query\n- Thích hợp cho verification sau khi create/update data\n- Query nên được design để return đúng records cần verify",
  "className" : "com.vtnet.netat.db.keywords.DatabaseKeyword",
  "methodName" : "verifyRecordExists",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "profileName",
    "description" : "Tên database profile đã cấu hình"
  }, {
    "type" : "String",
    "name" : "query",
    "description" : "Câu lệnh SELECT để tìm record"
  }, {
    "type" : "Object[]",
    "name" : "params",
    "description" : "Parameters cho query (tùy chọn)"
  } ]
}, {
  "name" : "extractJsonInt",
  "description" : "Trích xuất số nguyên từ JSON",
  "category" : "API",
  "subCategory" : "Response - JSON",
  "example" : "int userId = api.extractJsonInt(response, \"$.id\");",
  "returnValue" : "int",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiKeyword",
  "methodName" : "extractJsonInt",
  "returnType" : "int",
  "parameters" : [ {
    "type" : "ApiResponse",
    "name" : "response",
    "description" : ""
  }, {
    "type" : "String",
    "name" : "jsonPath",
    "description" : ""
  } ]
}, {
  "name" : "closeSession",
  "description" : "Đóng hoàn toàn phiên làm việc hiện tại (cả trình duyệt web và ứng dụng di động) và giải phóng tài nguyên.",
  "category" : "Session",
  "subCategory" : "Lifecycle",
  "example" : "",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.core.keywords.DriverKeyword",
  "methodName" : "closeSession",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "click",
  "description" : "Thực hiện hành động click chuột vào một element trên giao diện. Keyword sẽ tự động chờ cho đến khi element sẵn sàng để được click.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Click vào nút đăng nhập\nwebKeyword.click(loginButtonObject);\n\n// Click vào liên kết\nwebKeyword.click(registerLinkObject);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần click phải tồn tại trong DOM, phải hiển thị và có thể tương tác được, và không bị che khuất bởi các element khác. Có thể throw ElementNotVisibleException nếu element không hiển thị trên trang, ElementClickInterceptedException nếu element bị che khuất bởi element khác, StaleElementReferenceException nếu element không còn gắn với DOM, TimeoutException nếu element không xuất hiện trong thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "click",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng giao diện (nút bấm, liên kết,...) cần thực hiện hành động click"
  } ]
}, {
  "name" : "waitForElementPresent",
  "description" : "Tạm dừng kịch bản cho đến khi một element tồn tại trong DOM of trang, không nhất thiết phải hiển thị. Hữu ích để chờ các element được tạo ra bởi JavaScript.",
  "category" : "Web",
  "subCategory" : "Wait",
  "example" : "// Chờ element động được tạo bởi JavaScript\nwebKeyword.click(loadDynamicContentButton);\nwebKeyword.waitForElementPresent(dynamicContentObject, 10);\nwebKeyword.verifyElementPresent(dynamicContentObject);\n\n// Chờ element được tạo sau khi chọn option\nwebKeyword.selectByVisibleText(categoryDropdownObject, \"Điện thoại\");\nwebKeyword.waitForElementPresent(subcategoryListObject, 5);\nwebKeyword.verifyElementCount(subcategoryItemObject, 5);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, locator of element phải hợp lệ, và element sẽ được thêm vào DOM trong khoảng thời gian chờ đã chỉ định. Có thể throw TimeoutException nếu element không xuất hiện trong DOM trong thời gian chờ đã chỉ định, InvalidSelectorException nếu locator không hợp lệ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "waitForElementPresent",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần chờ cho đến khi nó tồn tại"
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa (tính bằng seconds)"
  } ]
}, {
  "name" : "getProperty",
  "description" : "Lấy giá trị của một thuộc tính cấu hình từ các nguồn đã được hợp nhất (file, tham số hệ thống, CI/CD).",
  "category" : "Utility",
  "subCategory" : "Configuration",
  "example" : "String tenantId = utility.getProperty(\"tenant.id\");",
  "returnValue" : "String|Giá trị của thuộc tính cấu hình dưới dạng chuỗi, hoặc null nếu không tìm thấy.",
  "note" : "Keyword này tuân thủ thứ tự ưu tiên: Tham số CI/CD > File môi trường (config.test.properties) > File mặc định (default.properties) . Chỉ nên sử dụng khi không có keyword nghiệp vụ cấp cao hơn để thực hiện tác vụ.",
  "className" : "com.vtnet.netat.core.keywords.UtilityKeyword",
  "methodName" : "getProperty",
  "returnType" : "String",
  "parameters" : [ {
    "type" : "String",
    "name" : "key",
    "description" : ""
  } ]
}, {
  "name" : "extractJsonBoolean",
  "description" : "Trích xuất boolean từ JSON",
  "category" : "API",
  "subCategory" : "Response - JSON",
  "example" : "boolean isActive = api.extractJsonBoolean(response, \"$.active\");",
  "returnValue" : "boolean",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiKeyword",
  "methodName" : "extractJsonBoolean",
  "returnType" : "boolean",
  "parameters" : [ {
    "type" : "ApiResponse",
    "name" : "response",
    "description" : ""
  }, {
    "type" : "String",
    "name" : "jsonPath",
    "description" : ""
  } ]
}, {
  "name" : "assertElementVisible",
  "description" : "Khẳng định rằng một phần tử đang được hiển thị trên màn hình và người dùng có thể nhìn thấy. Khác với assertElementPresent, phương thức này kiểm tra cả sự tồn tại và tính hiển thị của phần tử. Nếu phần tử không tồn tại hoặc không hiển thị, một AssertionError sẽ được ném ra.",
  "category" : "Mobile",
  "subCategory" : "Assertion",
  "example" : "// Kiểm tra thông báo thành công hiển thị\nmobileKeyword.assertElementVisible(successMessage);\n\n// Với custom message\nmobileKeyword.assertElementVisible(successMessage, \"Thông báo thành công phải hiển thị sau khi đăng nhập\");\n\n// Kiểm tra các element UI hiển thị\nmobileKeyword.assertElementVisible(menuButton, \"Nút menu phải hiển thị trên header\");\nmobileKeyword.assertElementVisible(profileIcon, \"Icon profile phải hiển thị khi đã đăng nhập\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Đã xác định chính xác phần tử UI cần kiểm tra. Có thể throw AssertionError nếu phần tử không tồn tại hoặc không hiển thị, WebDriverException nếu có lỗi khi tương tác với trình điều khiển, hoặc StaleElementReferenceException nếu phần tử không còn gắn với DOM.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertElementVisible",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra tính hiển thị"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "getCookie",
  "description" : "Lấy thông tin of một cookie cụ thể dựa trên tên of nó.",
  "category" : "Web",
  "subCategory" : "Storage",
  "example" : "// Verify cookie phiên làm việc\nCookie sessionCookie = webKeyword.getCookie(\"session_id\");\nif (sessionCookie == null) {\n    webKeyword.navigate(\"https://example.com/login\");\n} else {\n    logger.info(\"Phiên làm việc: \" + sessionCookie.getValue());\n}\n\n// Verify thời hạn cookie\nCookie authCookie = webKeyword.getCookie(\"auth_token\");\nlogger.info(\"Cookie hết hạn vào: \" + authCookie.getExpiry());",
  "returnValue" : "Cookie - Đối tượng Cookie contains thông tin of cookie được yêu cầu, hoặc null nếu không tìm thấy",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, trang web đã được tải hoàn toàn. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "getCookie",
  "returnType" : "Cookie",
  "parameters" : [ {
    "type" : "String",
    "name" : "cookieName",
    "description" : "Tên of cookie cần lấy"
  } ]
}, {
  "name" : "assertLessThan",
  "description" : "Khẳng định rằng giá trị thực tế nhỏ hơn giá trị so sánh. Nếu không thỏa mãn, test case sẽ dừng lại và báo lỗi.",
  "category" : "Assertion",
  "subCategory" : "HardAssert",
  "example" : "assertLessThan(5, 10);\nassertLessThan(responseTime, 3000, \"Thời gian phản hồi phải dưới 3 giây\");\nassertLessThan(errorCount, 5, \"Số lỗi phải ít hơn 5\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Tự động xử lý so sánh giữa số và chuỗi số. Assertion sẽ fail nếu actualValue >= expectedValue.",
  "className" : "com.vtnet.netat.core.keywords.AssertionKeyword",
  "methodName" : "assertLessThan",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "Object",
    "name" : "actualValue",
    "description" : "Giá trị thực tế cần so sánh (số hoặc chuỗi số)"
  }, {
    "type" : "Object",
    "name" : "expectedValue",
    "description" : "Giá trị mong đợi để so sánh (actualValue phải nhỏ hơn giá trị này)"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "startApplication",
  "description" : "Khởi chạy một ứng dụng di động dựa trên các thông số đã được định nghĩa trong file cấu hình (profile).",
  "category" : "Session",
  "subCategory" : "Lifecycle",
  "example" : "driverKeyword.startApplication(\"android\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Đây là keyword tiêu chuẩn để bắt đầu một phiên làm việc mobile với cấu hình đã định sẵn (cấu hình trong default.properties)",
  "className" : "com.vtnet.netat.core.keywords.DriverKeyword",
  "methodName" : "startApplication",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "platformName",
    "description" : "Tên nền tảng di động ('android', 'ios'). Framework sẽ đọc file config tương ứng."
  } ]
}, {
  "name" : "scrollToTop",
  "description" : "Cuộn lên vị trí cao nhất (đầu trang) of trang web.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Cuộn lên đầu trang để truy cập menu chính\nwebKeyword.scrollToTop();\nwebKeyword.verifyElementVisible(mainMenuObject);\n\n// Cuộn lên đầu trang sau khi hoàn thành form dài\nwebKeyword.click(submitButtonObject);\nwebKeyword.scrollToTop();",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và trình duyệt phải hỗ trợ thực thi JavaScript. Có thể throw JavascriptException nếu có lỗi khi thực thi JavaScript, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "scrollToTop",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "statusCode",
  "description" : "Kiểm tra status code bằng giá trị cụ thể",
  "category" : "API",
  "subCategory" : "Assertion - Status",
  "example" : "verify.statusCode(response, 200);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiAssert",
  "methodName" : "statusCode",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ApiResponse",
    "name" : "response",
    "description" : ""
  }, {
    "type" : "int",
    "name" : "expectedCode",
    "description" : "Expected status code"
  } ]
}, {
  "name" : "switchToWindowByIndex",
  "description" : "Chuyển sự điều khiển of WebDriver sang một tab hoặc cửa sổ khác dựa trên chỉ số (index) of nó (bắt đầu từ 0).",
  "category" : "Web",
  "subCategory" : "Window&Frame",
  "example" : "// Mở liên kết trong tab mới và chuyển sang tab đó\nwebKeyword.rightClickAndSelect(productLinkObject, \"Mở trong tab mới\");\nwebKeyword.switchToWindowByIndex(1); // Chuyển sang tab thứ hai\n\n// Quay lại tab chính sau khi hoàn thành\nwebKeyword.switchToWindowByIndex(0);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, có đủ số lượng cửa sổ/tab đang mở để chuyển đến chỉ số được chỉ định. Có thể throw IndexOutOfBoundsException nếu chỉ số nằm ngoài phạm vi of số lượng cửa sổ/tab đang mở, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "switchToWindowByIndex",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "int",
    "name" : "index",
    "description" : "Chỉ số of cửa sổ/tab cần chuyển đến (0 is cửa sổ đầu tiên)"
  } ]
}, {
  "name" : "addHeader",
  "description" : "Thêm HTTP header vào request",
  "category" : "API",
  "subCategory" : "Headers",
  "example" : "api.addHeader(\"X-Request-ID\", \"12345\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiKeyword",
  "methodName" : "addHeader",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "headerName",
    "description" : "Tên header"
  }, {
    "type" : "String",
    "name" : "headerValue",
    "description" : "Giá trị header"
  } ]
}, {
  "name" : "Get Current App Package",
  "description" : "Lấy appPackage (Android) hoặc bundleId (iOS) của ứng dụng hiện tại đang được test",
  "category" : "Mobile",
  "subCategory" : "Applifecycle",
  "example" : "String packageName = getCurrentAppPackage();",
  "returnValue" : "String - Package name của ứng dụng Android hoặc bundle ID của ứng dụng iOS",
  "note" : "Keyword này hoạt động trên cả Android và iOS. Trên Android sẽ trả về package name, trên iOS sẽ trả về bundle ID từ capabilities.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "getCurrentAppPackage",
  "returnType" : "String",
  "parameters" : [ ]
}, {
  "name" : "setContentType",
  "description" : "Thiết lập Content-Type header (shortcut)",
  "category" : "API",
  "subCategory" : "Headers",
  "example" : "api.setContentType(\"JSON\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiKeyword",
  "methodName" : "setContentType",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "contentType",
    "description" : "JSON, XML, FORM, TEXT, hoặc full MIME type"
  } ]
}, {
  "name" : "getDeviceTime",
  "description" : "Lấy thời gian hệ thống hiện tại từ thiết bị và định dạng theo mẫu chỉ định. Sử dụng mobile script execution để đảm bảo tương thích đa nền tảng.",
  "category" : "Mobile",
  "subCategory" : "Getter",
  "example" : "String currentTime = mobileKeyword.getDeviceTime(\"HH:mm:ss\");\nString fullDate = mobileKeyword.getDeviceTime(\"dd/MM/yyyy HH:mm:ss\");",
  "returnValue" : "String: Thời gian thiết bị đã được định dạng theo mẫu yêu cầu.",
  "note" : "DEPRECATED API: AppiumDriver.getDeviceTime() đã bị deprecated. Hiện tại sử dụng executeScript('mobile: getDeviceTime'). Thời gian trả về phụ thuộc vào múi giờ thiết bị, không phải máy chủ test.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "getDeviceTime",
  "returnType" : "String",
  "parameters" : [ {
    "type" : "String",
    "name" : "format",
    "description" : "Mẫu định dạng thời gian (ví dụ: 'dd/MM/yyyy HH:mm:ss', 'HH:mm:ss'). Sử dụng cú pháp Java SimpleDateFormat."
  } ]
}, {
  "name" : "clearText",
  "description" : "Xóa toàn bộ text đang có trong một element có thể nhập liệu như ô input hoặc textarea.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Xóa nội dung trong ô tìm kiếm\nwebKeyword.clearText(searchInputObject);\n\n// Xóa nội dung trước khi nhập dữ liệu mới\nwebKeyword.clearText(usernameInputObject);\nwebKeyword.sendKeys(usernameInputObject, \"new_username\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần xóa nội dung phải tồn tại trong DOM, phải hiển thị và có thể tương tác được, và phải is loại có thể nhập liệu (input, textarea, contenteditable). Có thể throw ElementNotVisibleException nếu element không hiển thị trên trang, ElementNotInteractableException nếu element không thể tương tác, StaleElementReferenceException nếu element không còn gắn với DOM, TimeoutException nếu element không xuất hiện trong thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "clearText",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần xóa nội dung"
  } ]
}, {
  "name" : "getAttribute",
  "description" : "Lấy và trả về giá trị of một thuộc tính (attribute) cụ thể trên một element HTML.",
  "category" : "Web",
  "subCategory" : "Getter",
  "example" : "// Lấy URL từ thẻ liên kết\nString linkUrl = webKeyword.getAttribute(linkObject, \"href\");\nwebKeyword.verifyContains(linkUrl, \"https://example.com\");\n\n// Verify trạng thái of checkbox\nString isChecked = webKeyword.getAttribute(termsCheckboxObject, \"checked\");\nwebKeyword.verifyNotNull(isChecked);",
  "returnValue" : "String - Giá trị of thuộc tính hoặc null nếu thuộc tính không tồn tại",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và element cần lấy thuộc tính phải tồn tại trong DOM. Có thể throw NoSuchElementException nếu element không tồn tại, StaleElementReferenceException nếu element không còn gắn với DOM, TimeoutException nếu element không xuất hiện trong thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "getAttribute",
  "returnType" : "String",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần lấy thuộc tính"
  }, {
    "type" : "String",
    "name" : "attributeName",
    "description" : "Tên of thuộc tính cần lấy giá trị (ví dụ: 'href', 'class', 'value')"
  } ]
}, {
  "name" : "setSliderValue",
  "description" : "Thiết lập giá trị cho một thanh trượt (slider) bằng cách chạm vào vị trí tương ứng. Giá trị từ 0.0 (bên trái) đến 1.0 (bên phải). Phương thức này tự động tính toán tọa độ cần chạm dựa trên kích thước và vị trí của slider. Hữu ích khi cần điều chỉnh các điều khiển như âm lượng, độ sáng, hoặc các giá trị số trong khoảng. Lưu ý: Giá trị phải nằm trong khoảng từ 0.0 đến 1.0, nếu không sẽ gây ra ngoại lệ.",
  "category" : "Mobile",
  "subCategory" : "Interaction",
  "example" : "// Thiết lập thanh âm lượng ở mức 75%\nmobileKeyword.setSliderValue(volumeSlider, 0.75);\n\n// Thiết lập độ sáng màn hình ở mức thấp nhất\nmobileKeyword.setSliderValue(brightnessSlider, 0.0);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Phần tử slider cần điều chỉnh phải tồn tại và hiển thị trên màn hình, phải là loại có thể điều chỉnh bằng cách chạm vào vị trí khác nhau, và phải có chiều ngang đủ lớn để có thể chạm chính xác vào các vị trí khác nhau. Có thể throw IllegalArgumentException nếu giá trị nằm ngoài khoảng từ 0.0 đến 1.0, NoSuchElementException nếu không tìm thấy phần tử slider, StaleElementReferenceException nếu phần tử không còn gắn với DOM, WebDriverException nếu không thể lấy vị trí hoặc kích thước của phần tử, hoặc ElementNotInteractableException nếu không thể tương tác với slider.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "setSliderValue",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử slider cần điều chỉnh"
  }, {
    "type" : "double",
    "name" : "value",
    "description" : "Giá trị cần thiết lập, từ 0.0 (nhỏ nhất/trái) đến 1.0 (lớn nhất/phải)"
  } ]
}, {
  "name" : "verifyTextMatchesRegexHard",
  "description" : "Verify text của một element có khớp với một biểu thức chính quy (regex) hay không. Nếu không khớp, kịch bản sẽ DỪNG LẠI.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify mã đơn hàng có đúng định dạng\nwebKeyword.click(viewOrderButtonObject);\nwebKeyword.waitForElementVisible(orderIdObject);\nwebKeyword.verifyTextMatchesRegexHard(orderIdObject, \"^DH-\\\\d{5}$\"); // Khớp với DH-12345\n\n// Verify số điện thoại có đúng định dạng với custom message\nwebKeyword.verifyTextMatchesRegexHard(phoneNumberObject, \"^(\\\\+84|0)[0-9]{9,10}$\", \n    \"Số điện thoại không đúng định dạng Việt Nam\");\n\n// Verify email có đúng format\nwebKeyword.verifyTextMatchesRegexHard(emailObject, \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\", \n    \"Email không đúng định dạng\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần Verify phải tồn tại trong DOM và có text. Có thể throw AssertionError nếu text không khớp với biểu thức chính quy, NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, WebDriverException nếu có lỗi khi tương tác với trình duyệt, hoặc PatternSyntaxException nếu biểu thức chính quy không hợp lệ.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyTextMatchesRegexHard",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element chứa text cần Verify"
  }, {
    "type" : "String",
    "name" : "pattern",
    "description" : "Biểu thức chính quy để so khớp"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "softAssertNotEquals",
  "description" : "Kiểm tra hai giá trị có khác nhau không. Nếu chúng bằng nhau, ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Assertion",
  "subCategory" : "Soft",
  "example" : "String userStatus = db.getCellValue(\"SELECT status FROM users\");\nassertion.softAssertNotEquals(userStatus, \"INACTIVE\", \"Trạng thái user không được là INACTIVE\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "So sánh giá trị sau khi chuyển sang dạng chuỗi. Lỗi sẽ được ghi nhận và test vẫn tiếp tục. **Phải gọi `assertAll()` ở cuối** để tổng hợp kết quả.",
  "className" : "com.vtnet.netat.core.keywords.AssertionKeyword",
  "methodName" : "softAssertNotEquals",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "Object",
    "name" : "actualValue",
    "description" : "Giá trị thực tế"
  }, {
    "type" : "Object",
    "name" : "unexpectedValue",
    "description" : "Giá trị không mong muốn"
  }, {
    "type" : "String[]",
    "name" : "message",
    "description" : "Thông điệp tùy chỉnh khi assertion fail"
  } ]
}, {
  "name" : "waitForNotification",
  "description" : "Chờ cho đến khi một thông báo chứa đoạn văn bản cụ thể xuất hiện.",
  "category" : "Mobile",
  "subCategory" : "Wait",
  "example" : "mobileKeyword.waitForNotification(\"Bạn có tin nhắn mới\", 15);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "waitForNotification",
  "returnType" : "WebElement",
  "parameters" : [ {
    "type" : "String",
    "name" : "containingText",
    "description" : "Đoạn văn bản (tiêu đề hoặc nội dung) cần có trong thông báo."
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa."
  } ]
}, {
  "name" : "pressKeyCode",
  "description" : "Mô phỏng hành động nhấn các phím vật lý của thiết bị Android như HOME, BACK, VOLUME_UP, v.v. Chỉ hoạt động trên Android, sẽ hiển thị cảnh báo nếu được gọi trên iOS. Tham số keyName phải là một giá trị hợp lệ từ enum AndroidKey. Hữu ích khi cần tương tác với các phím vật lý hoặc phím ảo của thiết bị.",
  "category" : "Mobile",
  "subCategory" : "System",
  "example" : "// Nhấn nút Back để quay lại màn hình trước\nmobileKeyword.pressKeyCode(\"BACK\");\n\n// Nhấn phím Home để quay về màn hình chính\nmobileKeyword.pressKeyCode(\"HOME\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị Android đã được kết nối và cấu hình đúng với Appium. Đang sử dụng AndroidDriver (phương thức không hoạt động trên iOS), và tham số keyName phải là một giá trị hợp lệ từ enum AndroidKey. Có thể throw IllegalArgumentException nếu tên phím không hợp lệ, WebDriverException nếu không thể thực hiện hành động nhấn phím, hoặc UnsupportedCommandException nếu lệnh không được hỗ trợ trên thiết bị hiện tại.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "pressKeyCode",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "keyName",
    "description" : "Tên phím trong AndroidKey enum (ví dụ: 'HOME', 'BACK', 'VOLUME_UP')"
  } ]
}, {
  "name" : "dragAndDropByOffset",
  "description" : "Kéo một element theo một khoảng cách (độ lệch x, y) so với vị trí hiện tại of nó. Rất hữu ích cho các thanh trượt (slider).",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Kéo thanh trượt giá sang phải 100px\nwebKeyword.dragAndDropByOffset(priceSliderHandle, 100, 0);\n\n// Kéo thanh trượt âm lượng xuống 50px\nwebKeyword.dragAndDropByOffset(volumeSliderObject, 0, -50);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần kéo phải tồn tại trong DOM, phải hiển thị và có thể tương tác được, trang web phải hỗ trợ thao tác kéo và thả, và trình duyệt phải hỗ trợ thao tác kéo và thả (một số trình duyệt di động có thể không hỗ trợ đầy đủ). Có thể throw ElementNotVisibleException nếu element không hiển thị trên trang, ElementNotInteractableException nếu element không thể tương tác, StaleElementReferenceException nếu element không còn gắn với DOM, TimeoutException nếu element không xuất hiện trong thời gian chờ, WebDriverException nếu có lỗi khi tương tác với trình duyệt, hoặc MoveTargetOutOfBoundsException nếu vị trí đích nằm ngoài viewport hiện tại.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "dragAndDropByOffset",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần kéo"
  }, {
    "type" : "int",
    "name" : "xOffset",
    "description" : "Độ lệch theo trục ngang (pixel)"
  }, {
    "type" : "int",
    "name" : "yOffset",
    "description" : "Độ lệch theo trục dọc (pixel)"
  } ]
}, {
  "name" : "assertGreaterThanOrEqual",
  "description" : "Khẳng định rằng giá trị thực tế lớn hơn hoặc bằng giá trị so sánh. Nếu không thỏa mãn, test case sẽ dừng lại và báo lỗi.",
  "category" : "Assertion",
  "subCategory" : "HardAssert",
  "example" : "assertGreaterThanOrEqual(10, 10);\nassertGreaterThanOrEqual(score, 60, \"Điểm số phải từ 60 trở lên\");\nassertGreaterThanOrEqual(quantity, 1, \"Số lượng phải ít nhất là 1\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Tự động xử lý so sánh giữa số và chuỗi số. Assertion sẽ fail nếu actualValue < expectedValue.",
  "className" : "com.vtnet.netat.core.keywords.AssertionKeyword",
  "methodName" : "assertGreaterThanOrEqual",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "Object",
    "name" : "actualValue",
    "description" : "Giá trị thực tế cần so sánh (số hoặc chuỗi số)"
  }, {
    "type" : "Object",
    "name" : "expectedValue",
    "description" : "Giá trị mong đợi để so sánh (actualValue phải lớn hơn hoặc bằng giá trị này)"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "waitForUrlContains",
  "description" : "Tạm dừng kịch bản cho đến khi URL of trang hiện tại contains một chuỗi con được chỉ định.",
  "category" : "Web",
  "subCategory" : "Wait",
  "example" : "// Chờ chuyển hướng đến trang dashboard\nwebKeyword.click(loginButtonObject);\nwebKeyword.waitForUrlContains(\"/dashboard\", 15);\nwebKeyword.verifyElementVisible(welcomeMessageObject);\n\n// Chờ chuyển hướng sau khi tìm kiếm\nwebKeyword.sendKeys(searchInputObject, \"laptop\");\nwebKeyword.click(searchButtonObject);\nwebKeyword.waitForUrlContains(\"search=laptop\", 10);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và URL of trang sẽ contains chuỗi con đã chỉ định trong khoảng thời gian chờ. Có thể throw TimeoutException nếu URL không contains chuỗi con đã chỉ định trong thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "waitForUrlContains",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "partialUrl",
    "description" : "Chuỗi con mà URL cần contains"
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa (tính bằng seconds)"
  } ]
}, {
  "name" : "sendKeysToAlert",
  "description" : "Chờ cho đến khi một hộp thoại prompt of trình duyệt xuất hiện và nhập một chuỗi text vào đó.",
  "category" : "Web",
  "subCategory" : "Alert",
  "example" : "// Nhập tên người dùng vào hộp thoại prompt\nwebKeyword.click(loginButtonObject);\nwebKeyword.sendKeysToAlert(\"Nguyễn Văn A\");\nwebKeyword.acceptAlert();\n\n// Nhập lý do hủy đơn hàng\nwebKeyword.click(cancelOrderButtonObject);\nwebKeyword.sendKeysToAlert(\"Thay đổi thông tin giao hàng\");\nwebKeyword.acceptAlert();",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, một hộp thoại prompt đang hiển thị hoặc sẽ xuất hiện. Có thể throw TimeoutException nếu không có hộp thoại alert xuất hiện trong thời gian chờ, NoAlertPresentException nếu không có hộp thoại alert đang hiển thị, ElementNotInteractableException nếu hộp thoại không phải is prompt và không cho phép nhập liệu, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "sendKeysToAlert",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "text",
    "description" : "Chuỗi text cần nhập vào hộp thoại"
  } ]
}, {
  "name" : "Is App Installed",
  "description" : "Kiểm tra xem một ứng dụng có được cài đặt trên thiết bị hay không",
  "category" : "Mobile",
  "subCategory" : "Applifecycle",
  "example" : "boolean isInstalled = isAppInstalled(\"com.example.myapp\");",
  "returnValue" : "boolean - true nếu ứng dụng đã được cài đặt, false nếu chưa được cài đặt",
  "note" : "Keyword này hoạt động trên cả Android và iOS. Trên Android sử dụng package name (vd: com.android.chrome), trên iOS sử dụng bundle ID (vd: com.apple.mobilesafari).",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "isAppInstalled",
  "returnType" : "boolean",
  "parameters" : [ {
    "type" : "String",
    "name" : "appId",
    "description" : "Package name (Android) hoặc bundle ID (iOS) của ứng dụng cần kiểm tra"
  } ]
}, {
  "name" : "arrayIsEmpty",
  "description" : "Kiểm tra array RỖNG",
  "category" : "API",
  "subCategory" : "Assertion - Arrays",
  "example" : "verify.arrayIsEmpty(response, \"$.errors\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiAssert",
  "methodName" : "arrayIsEmpty",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ApiResponse",
    "name" : "response",
    "description" : ""
  }, {
    "type" : "String",
    "name" : "jsonPath",
    "description" : ""
  } ]
}, {
  "name" : "scrollToText",
  "description" : "Tự động cuộn màn hình (vuốt lên) cho đến khi tìm thấy một phần tử chứa văn bản mong muốn. Phương thức này sẽ thực hiện tối đa 10 lần vuốt lên để tìm kiếm. Cách hoạt động khác nhau giữa Android (sử dụng UiScrollable) và iOS (sử dụng vuốt tuần tự). Trả về WebElement nếu tìm thấy, hoặc ném NoSuchElementException nếu không tìm thấy sau khi đã cuộn hết.",
  "category" : "Mobile",
  "subCategory" : "Gesture",
  "example" : "// Cuộn đến khi thấy nút và chạm vào nó\nWebElement registerButton = mobileKeyword.scrollToText(\"Đăng ký\");\nregisterButton.click();",
  "returnValue" : "WebElement - Phần tử chứa văn bản được tìm thấy",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Văn bản cần tìm phải tồn tại trên màn hình (có thể cần cuộn để hiển thị). Trên Android: Phần tử cha chứa nội dung cần cuộn phải có thuộc tính scrollable=true. Có thể throw NoSuchElementException nếu không tìm thấy phần tử chứa văn bản sau khi cuộn hết, WebDriverException nếu có lỗi khi tương tác với trình điều khiển, hoặc IllegalStateException nếu không thể xác định nền tảng hoặc không hỗ trợ.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "scrollToText",
  "returnType" : "WebElement",
  "parameters" : [ {
    "type" : "String",
    "name" : "textToFind",
    "description" : "Văn bản cần tìm kiếm trên màn hình. Có thể là toàn bộ hoặc một phần của văn bản hiển thị"
  } ]
}, {
  "name" : "tapNotificationByText",
  "description" : "Chờ một thông báo xuất hiện và chạm vào nó.",
  "category" : "Mobile",
  "subCategory" : "Interaction",
  "example" : "mobileKeyword.tapNotificationByText(\"Bạn có tin nhắn mới\", 15);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "tapNotificationByText",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "containingText",
    "description" : "Đoạn văn bản dùng để tìm và chạm vào thông báo."
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa."
  } ]
}, {
  "name" : "tapElementWithText",
  "description" : "Cuộn để tìm và chạm vào một phần tử dựa trên văn bản hiển thị. Keyword này tự động tìm kiếm qua các thuộc tính `text`, `content-desc`, và `resource-id` để xác định vị trí phần tử.",
  "category" : "Mobile",
  "subCategory" : "Gesture",
  "example" : "mobileKeyword.tapElementWithText(\"Thanh toán\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "tapElementWithText",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "textToFind",
    "description" : "Văn bản cần tìm trong các thuộc tính của phần tử."
  } ]
}, {
  "name" : "isKeyboardShown",
  "description" : "Kiểm tra trạng thái hiển thị của bàn phím ảo trên màn hình. Tự động phát hiện nền tảng và sử dụng API tương ứng.",
  "category" : "Mobile",
  "subCategory" : "Verification",
  "example" : "boolean keyboardVisible = mobileKeyword.isKeyboardShown();\nif (keyboardVisible) {\n    mobileKeyword.hideKeyboard();\n}",
  "returnValue" : "boolean: Trả về true nếu bàn phím đang hiển thị, false nếu không.",
  "note" : "PLATFORM DEPENDENT: Độ chính xác có thể khác nhau giữa Android và iOS. Android: dựa vào InputMethodManager. iOS: dựa vào keyboard notification. Có thể có false positive với bàn phím bên thứ 3.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "isKeyboardShown",
  "returnType" : "boolean",
  "parameters" : [ ]
}, {
  "name" : "getClipboard",
  "description" : "Lấy và trả về nội dung văn bản hiện tại của clipboard trên thiết bị. Hữu ích khi cần kiểm tra nội dung đã được sao chép hoặc khi cần lấy dữ liệu từ clipboard để sử dụng trong các bước test tiếp theo. Phương thức này trả về một chuỗi chứa nội dung văn bản của clipboard. Lưu ý: Chỉ hỗ trợ nội dung văn bản, không hỗ trợ các loại dữ liệu khác như hình ảnh.",
  "category" : "Mobile",
  "subCategory" : "System",
  "example" : "// Kiểm tra nội dung đã được sao chép đúng\nmobileKeyword.longPress(emailText, 2);\nmobileKeyword.tap(copyOption);\nString copiedText = mobileKeyword.getClipboard();\nassert copiedText.equals(\"user@example.com\");\n\n// Sao chép mã xác minh và sử dụng nó\nmobileKeyword.tap(copyButton);\nString code = mobileKeyword.getClipboard();\nmobileKeyword.sendText(codeInput, code);",
  "returnValue" : "String - Nội dung văn bản hiện có trong clipboard của thiết bị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Ứng dụng phải có quyền truy cập clipboard và clipboard phải chứa nội dung văn bản (không phải hình ảnh hoặc dữ liệu nhị phân). Có thể throw WebDriverException nếu có lỗi khi tương tác với trình điều khiển, UnsupportedOperationException nếu thiết bị không hỗ trợ truy cập clipboard, hoặc SecurityException nếu không có quyền truy cập clipboard.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "getClipboard",
  "returnType" : "String",
  "parameters" : [ ]
}, {
  "name" : "selectByValue",
  "description" : "Chọn một option in dropdown dựa trên giá trị of thuộc tính 'value'.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Chọn thành phố Hà Nội từ dropdown\nwebKeyword.selectByValue(cityDropdown, \"HN\");\n\n// Chọn phương thức vận chuyển\nwebKeyword.selectByValue(shippingMethodDropdown, \"express\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element dropdown phải tồn tại trong DOM, phải is thẻ <select> hợp lệ, phải hiển thị và có thể tương tác được, và phải tồn tại ít nhất một option có thuộc tính value khớp với giá trị cần chọn. Có thể throw NoSuchElementException nếu không tìm thấy option với value chỉ định, ElementNotVisibleException nếu element không hiển thị trên trang, ElementNotInteractableException nếu element không thể tương tác, StaleElementReferenceException nếu element không còn gắn với DOM, UnexpectedTagNameException nếu element không phải is thẻ <select>, TimeoutException nếu element không xuất hiện trong thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "selectByValue",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element dropdown (thẻ select)"
  }, {
    "type" : "String",
    "name" : "value",
    "description" : "Giá trị thuộc tính 'value' of option cần chọn"
  } ]
}, {
  "name" : "verifyRowCount",
  "description" : "Verify số lượng rows trả về từ query bằng đúng expected count",
  "category" : "Database",
  "subCategory" : "Verification",
  "example" : "DatabaseKeyword db = new DatabaseKeyword();\n\n// Verify có đúng 5 active users\ndb.verifyRowCount(\n    \"mysql-dev\",\n    \"SELECT * FROM users WHERE status = ?\",\n    5,\n    \"active\"\n);\n\n// Verify user có đúng 3 orders\ndb.verifyRowCount(\n    \"mysql-dev\",\n    \"SELECT * FROM orders WHERE user_id = ?\",\n    3,\n    123\n);\n\n// Verify không có records (count = 0)\ndb.verifyRowCount(\n    \"mysql-dev\",\n    \"SELECT * FROM temp_table\",\n    0\n);\n\n// Verify batch insert count\nint insertedCount = 10;\ndb.verifyRowCount(\n    \"mysql-dev\",\n    \"SELECT * FROM users WHERE created_at > DATE_SUB(NOW(), INTERVAL 1 MINUTE)\",\n    insertedCount\n);\nSystem.out.println(\"✓ All \" + insertedCount + \" records inserted successfully\");",
  "returnValue" : "void - Không trả về giá trị (throw AssertionError nếu count không khớp)",
  "note" : "- Throw AssertionError với actual vs expected count nếu không khớp\n- Pass nếu số lượng rows = expectedCount\n- Có thể dùng expectedCount = 0 để verify empty result\n- Hữu ích cho batch operation verification",
  "className" : "com.vtnet.netat.db.keywords.DatabaseKeyword",
  "methodName" : "verifyRowCount",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "profileName",
    "description" : "Tên database profile đã cấu hình"
  }, {
    "type" : "String",
    "name" : "query",
    "description" : "Câu lệnh SELECT"
  }, {
    "type" : "int",
    "name" : "expectedCount",
    "description" : "Số lượng rows mong đợi"
  }, {
    "type" : "Object[]",
    "name" : "params",
    "description" : "Parameters cho query (tùy chọn)"
  } ]
}, {
  "name" : "setBearerToken",
  "description" : "Thiết lập Bearer token (JWT)",
  "category" : "API",
  "subCategory" : "Authentication",
  "example" : "api.setBearerToken(\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiKeyword",
  "methodName" : "setBearerToken",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "token",
    "description" : "Access token"
  } ]
}, {
  "name" : "jsonPathNotNull",
  "description" : "Kiểm tra giá trị tại JSON path KHÔNG NULL",
  "category" : "API",
  "subCategory" : "Assertion - JSON",
  "example" : "verify.jsonPathNotNull(response, \"$.user.id\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiAssert",
  "methodName" : "jsonPathNotNull",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ApiResponse",
    "name" : "response",
    "description" : ""
  }, {
    "type" : "String",
    "name" : "jsonPath",
    "description" : ""
  } ]
}, {
  "name" : "compareQueryResults",
  "description" : "So sánh kết quả của 2 queries - kiểm tra cả số lượng rows và content",
  "category" : "Database",
  "subCategory" : "Utility",
  "example" : "DatabaseKeyword db = new DatabaseKeyword();\n\n// So sánh data giữa 2 tables\nboolean isSame = db.compareQueryResults(\n    \"mysql-dev\",\n    \"SELECT * FROM users ORDER BY id\",\n    \"SELECT * FROM users_backup ORDER BY id\"\n);\nif (isSame) {\n    System.out.println(\"✓ Tables are identical\");\n} else {\n    System.out.println(\"✗ Tables differ\");\n}\n\n// Verify data migration\nboolean migrated = db.compareQueryResults(\n    \"mysql-dev\",\n    \"SELECT id, name, email FROM old_schema.users\",\n    \"SELECT id, name, email FROM new_schema.users\"\n);\nSystem.out.println(\"Migration successful: \" + migrated);\n\n// Compare aggregations\nboolean countsMatch = db.compareQueryResults(\n    \"mysql-dev\",\n    \"SELECT status, COUNT(*) as cnt FROM orders GROUP BY status\",\n    \"SELECT status, COUNT(*) as cnt FROM orders_archive GROUP BY status\"\n);\n\n// Assert results match\nif (!db.compareQueryResults(\n    \"mysql-dev\",\n    \"SELECT * FROM expected_results\",\n    \"SELECT * FROM actual_results\"\n)) {\n    throw new AssertionError(\"Query results do not match!\");\n}",
  "returnValue" : "boolean - true nếu kết quả giống nhau, false nếu khác",
  "note" : "- So sánh cả row count và content của từng row\n- Trả về false nếu số lượng rows khác nhau\n- Trả về false nếu bất kỳ row nào khác nhau\n- Queries nên có ORDER BY để đảm bảo consistent ordering\n- Hữu ích cho data migration verification và regression testing",
  "className" : "com.vtnet.netat.db.keywords.DatabaseKeyword",
  "methodName" : "compareQueryResults",
  "returnType" : "boolean",
  "parameters" : [ {
    "type" : "String",
    "name" : "profileName",
    "description" : "Tên database profile đã cấu hình"
  }, {
    "type" : "String",
    "name" : "query1",
    "description" : "Query thứ nhất"
  }, {
    "type" : "String",
    "name" : "query2",
    "description" : "Query thứ hai"
  } ]
}, {
  "name" : "assertEquals",
  "description" : "Kiểm tra 2 giá trị BẰNG NHAU",
  "category" : "API",
  "subCategory" : "Assertion - General",
  "example" : "verify.assertEquals(actualValue, expectedValue);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiAssert",
  "methodName" : "assertEquals",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "Object",
    "name" : "actual",
    "description" : "Giá trị thực tế"
  }, {
    "type" : "Object",
    "name" : "expected",
    "description" : "Giá trị mong đợi"
  } ]
}, {
  "name" : "openNotifications",
  "description" : "Mở thanh thông báo (notification shade) của hệ điều hành.",
  "category" : "Mobile",
  "subCategory" : "System",
  "example" : "mobileKeyword.openNotifications();",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "openNotifications",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "extractJsonValue",
  "description" : "Trích xuất giá trị từ JSON response (JSON Path)",
  "category" : "API",
  "subCategory" : "Response - JSON",
  "example" : "String name = api.extractJsonValue(response, \"$.name\");",
  "returnValue" : "String - Extracted value",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiKeyword",
  "methodName" : "extractJsonValue",
  "returnType" : "String",
  "parameters" : [ {
    "type" : "ApiResponse",
    "name" : "response",
    "description" : ""
  }, {
    "type" : "String",
    "name" : "jsonPath",
    "description" : "JSON Path expression (VD: $.user.name)"
  } ]
}, {
  "name" : "waitForElementAttributeNotContains",
  "description" : "Chờ đợi attribute của element KHÔNG chứa substring chỉ định trong khoảng thời gian cho phép. Hữu ích cho validation rằng partial attribute values đã được remove hoặc thay đổi, như CSS classes bị xóa, error states được clear.",
  "category" : "Web",
  "subCategory" : "Wait",
  "example" : "// Chờ loading class bị remove\nwebKeyword.waitForElementAttributeNotContains(container, \"class\", \"loading\", 15);\n\n// Chờ error class biến mất\nwebKeyword.waitForElementAttributeNotContains(inputField, \"class\", \"error\", 10);\n\n// Chờ style không còn chứa 'display: none'\nwebKeyword.waitForElementAttributeNotContains(modal, \"style\", \"display: none\", 8);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "NEGATIVE PARTIAL MATCH: Thường dùng khi cần đảm bảo CSS classes đã bị remove (như 'loading', 'error'), style properties đã thay đổi, hoặc data attributes đã được cleanup.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "waitForElementAttributeNotContains",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng UI element cần kiểm tra attribute"
  }, {
    "type" : "String",
    "name" : "attributeName",
    "description" : "Tên attribute cần kiểm tra"
  }, {
    "type" : "String",
    "name" : "unwantedPartialValue",
    "description" : "Substring mà attribute KHÔNG được chứa"
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa tính bằng giây"
  } ]
}, {
  "name" : "waitForElementClickable",
  "description" : "Tạm dừng kịch bản cho đến khi một element không chỉ hiển thị mà còn ở trạng thái sẵn sàng để được click (enabled).",
  "category" : "Web",
  "subCategory" : "Wait",
  "example" : "// Chờ nút gửi sẵn sàng để click sau khi điền form\nwebKeyword.sendKeys(emailInputObject, \"test@example.com\");\nwebKeyword.sendKeys(passwordInputObject, \"password123\");\nwebKeyword.waitForElementClickable(submitButtonObject);\nwebKeyword.click(submitButtonObject);\n\n// Chờ nút được kích hoạt sau khi chọn một option\nwebKeyword.click(termsCheckboxObject);\nwebKeyword.waitForElementClickable(continueButtonObject);\nwebKeyword.click(continueButtonObject);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần chờ phải tồn tại trong DOM, và element sẽ trở thành hiển thị và có thể click trong khoảng thời gian chờ. Có thể throw TimeoutException nếu element không trở nên có thể click trong thời gian chờ mặc định, NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "waitForElementClickable",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần chờ để sẵn sàng click"
  } ]
}, {
  "name" : "verifyAttributeContainsHard",
  "description" : "Verify giá trị của một thuộc tính trên element có chứa một chuỗi con hay không. Nếu không chứa, kịch bản sẽ DỪNG LẠI.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify element có class 'active'\nwebKeyword.click(tabButtonObject);\nwebKeyword.verifyAttributeContainsHard(tabButtonObject, \"class\", \"active\");\n\n// Verify đường dẫn hình ảnh chứa tên sản phẩm với custom message\nwebKeyword.verifyAttributeContainsHard(productImageObject, \"src\", \"iphone-13\", \n    \"Hình ảnh sản phẩm phải chứa tên iphone-13\");\n\n// Verify button có class quan trọng\nwebKeyword.verifyAttributeContainsHard(submitButtonObject, \"class\", \"btn-primary\", \n    \"Nút submit phải có class btn-primary\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần Verify phải tồn tại trong DOM, và thuộc tính cần Verify phải tồn tại trên element. Có thể throw AssertionError nếu giá trị thuộc tính không chứa chuỗi con mong đợi, NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyAttributeContainsHard",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần Verify"
  }, {
    "type" : "String",
    "name" : "attribute",
    "description" : "Tên của thuộc tính (ví dụ: 'class')"
  }, {
    "type" : "String",
    "name" : "partialValue",
    "description" : "Chuỗi con mong đợi"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "waitForElementNotVisible",
  "description" : "Tạm dừng kịch bản cho đến khi một element không còn hiển thị trên giao diện. Rất hữu ích để chờ các biểu tượng loading hoặc thông báo tạm thời biến mất.",
  "category" : "Web",
  "subCategory" : "Wait",
  "example" : "// Chờ biểu tượng loading biến mất sau khi gửi form\nwebKeyword.click(submitButtonObject);\nwebKeyword.waitForElementNotVisible(loadingSpinnerObject);\nwebKeyword.verifyElementVisible(successMessageObject);\n\n// Chờ popup đóng sau khi nhấn nút đóng\nwebKeyword.click(closePopupButtonObject);\nwebKeyword.waitForElementNotVisible(popupObject);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần chờ phải tồn tại trong DOM hoặc đã hiển thị trước đó, và element sẽ trở thành không hiển thị trong khoảng thời gian chờ. Có thể throw TimeoutException nếu element vẫn còn hiển thị sau thời gian chờ mặc định, NoSuchElementException nếu không tìm thấy element ban đầu, StaleElementReferenceException nếu element không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "waitForElementNotVisible",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần chờ cho đến khi nó biến mất"
  } ]
}, {
  "name" : "waitForElementNotPresent",
  "description" : "Chờ đợi một element bị xóa hoàn toàn khỏi DOM trong khoảng thời gian chỉ định. Khác với waitForElementNotVisible (chỉ ẩn), method này đảm bảo element không còn tồn tại trong page source. Rất hữu ích cho cleanup testing và dynamic content.",
  "category" : "Web",
  "subCategory" : "Wait",
  "example" : "// Chờ popup dialog bị xóa hoàn toàn sau khi đóng\nwebKeyword.click(closeButton);\nwebKeyword.waitForElementNotPresent(popupDialog, 10);\n\n// Chờ loading spinner biến mất sau AJAX\nwebKeyword.waitForElementNotPresent(loadingSpinner, 15);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "QUAN TRỌNG: waitForElementNotPresent (xóa khỏi DOM) khác với waitForElementNotVisible (chỉ ẩn đi). Sử dụng khi cần đảm bảo element thực sự bị remove, không phải chỉ display:none. Thường dùng sau delete actions hoặc dynamic loading.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "waitForElementNotPresent",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng UI element cần chờ đợi bị xóa khỏi DOM"
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa tính bằng giây"
  } ]
}, {
  "name" : "verifyTextMatchesRegexSoft",
  "description" : "Verify text của một element có khớp với một biểu thức chính quy (regex) hay không. Nếu không khớp, kịch bản sẽ ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify định dạng email hiển thị trên trang\nwebKeyword.verifyTextMatchesRegexSoft(emailFormatObject, \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\nwebKeyword.click(continueButtonObject); // Tiếp tục thực hiện hành động\n\n// Verify nhiều định dạng khác nhau trên trang thông tin với custom message\nwebKeyword.verifyTextMatchesRegexSoft(zipCodeObject, \"^\\\\d{5}(-\\\\d{4})?$\", \n    \"Mã bưu điện không đúng định dạng\"); // Mã bưu điện\nwebKeyword.verifyTextMatchesRegexSoft(taxIdObject, \"^\\\\d{10}$\", \n    \"Mã số thuế phải có 10 chữ số\"); // Mã số thuế\nwebKeyword.click(saveButtonObject); // Tiếp tục lưu thông tin",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần Verify phải tồn tại trong DOM và có text. Có thể throw NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, WebDriverException nếu có lỗi khi tương tác với trình duyệt, hoặc PatternSyntaxException nếu biểu thức chính quy không hợp lệ.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyTextMatchesRegexSoft",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element chứa text cần Verify"
  }, {
    "type" : "String",
    "name" : "pattern",
    "description" : "Biểu thức chính quy để so khớp"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "swipeDown",
  "description" : "Thực hiện hành động vuốt xuống dưới màn hình, tương đương với thao tác cuộn lên để xem nội dung phía trên. Phương thức này tự động tính toán các tọa độ dựa trên kích thước màn hình thiết bị hiện tại.",
  "category" : "Mobile",
  "subCategory" : "Gesture",
  "example" : "// Vuốt xuống với tốc độ mặc định\nmobileKeyword.swipeDown();\n\n// Vuốt xuống với tốc độ chậm hơn\nmobileKeyword.swipeDown(800);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Có thể throw WebDriverException nếu không thể thực hiện hành động vuốt.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "swipeDown",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "Integer[]",
    "name" : "durationInMs",
    "description" : "(Tùy chọn) Thời gian thực hiện vuốt (ms). Mặc định là 500ms nếu không được chỉ định"
  } ]
}, {
  "name" : "goBack",
  "description" : "Thực hiện hành động quay lại trang trước đó trong lịch sử of trình duyệt, tương đương với việc người dùng nhấn nút 'Back'.",
  "category" : "Web",
  "subCategory" : "Browser",
  "example" : "// Quay lại trang trước sau khi đã điều hướng\nwebKeyword.openUrl(\"https://example.com/page1\");\nwebKeyword.openUrl(\"https://example.com/page2\");\nwebKeyword.goBack(); // Quay lại page1\n\n// Quay lại sau khi nhấp vào liên kết\nwebKeyword.click(linkToDetailsPage);\nwebKeyword.goBack();",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và phải có ít nhất một trang đã được truy cập trước đó trong lịch sử of phiên hiện tại. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình duyệt, hoặc NoSuchSessionException nếu phiên WebDriver không còn hợp lệ.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "goBack",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "getArraySize",
  "description" : "Lấy số lượng phần tử trong JSON array",
  "category" : "API",
  "subCategory" : "Response - JSON",
  "example" : "int count = api.getArraySize(response, \"$.users\");",
  "returnValue" : "int - Array size",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiKeyword",
  "methodName" : "getArraySize",
  "returnType" : "int",
  "parameters" : [ {
    "type" : "ApiResponse",
    "name" : "response",
    "description" : ""
  }, {
    "type" : "String",
    "name" : "jsonPath",
    "description" : "Path đến array"
  } ]
}, {
  "name" : "sendPutWithJson",
  "description" : "Gửi PUT với JSON body (shortcut)",
  "category" : "API",
  "subCategory" : "Requests - Shortcuts",
  "example" : "ApiResponse response = api.sendPutWithJson(\"/users/1\", \"{\\\"name\\\":\\\"Jane\\\"}\");",
  "returnValue" : "ApiResponse",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiKeyword",
  "methodName" : "sendPutWithJson",
  "returnType" : "ApiResponse",
  "parameters" : [ {
    "type" : "String",
    "name" : "endpoint",
    "description" : ""
  }, {
    "type" : "String",
    "name" : "jsonBody",
    "description" : ""
  } ]
}, {
  "name" : "responseTimeLessThan",
  "description" : "Kiểm tra response time nhỏ hơn ngưỡng (ms)",
  "category" : "API",
  "subCategory" : "Assertion - Performance",
  "example" : "verify.responseTimeLessThan(response, 2000);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiAssert",
  "methodName" : "responseTimeLessThan",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ApiResponse",
    "name" : "response",
    "description" : ""
  }, {
    "type" : "long",
    "name" : "maxTimeMs",
    "description" : "Thời gian tối đa cho phép (milliseconds)"
  } ]
}, {
  "name" : "dragAndDrop",
  "description" : "Thực hiện thao tác kéo một element (nguồn) và thả nó vào vị trí of một element khác (đích).",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Kéo và thả một mục vào giỏ hàng\nwebKeyword.dragAndDrop(productItemObject, cartDropZoneObject);\n\n// Kéo và thả để sắp xếp lại danh sách\nwebKeyword.dragAndDrop(taskItemObject, topOfListObject);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, cả hai element nguồn và đích phải tồn tại trong DOM, phải hiển thị và có thể tương tác được, trang web phải hỗ trợ thao tác kéo và thả, và trình duyệt phải hỗ trợ thao tác kéo và thả (một số trình duyệt di động có thể không hỗ trợ đầy đủ). Có thể throw ElementNotVisibleException nếu một trong hai element không hiển thị trên trang, ElementNotInteractableException nếu một trong hai element không thể tương tác, StaleElementReferenceException nếu một trong hai element không còn gắn với DOM, TimeoutException nếu một trong hai element không xuất hiện trong thời gian chờ, WebDriverException nếu có lỗi khi tương tác với trình duyệt, hoặc MoveTargetOutOfBoundsException nếu element đích nằm ngoài viewport hiện tại.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "dragAndDrop",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "sourceObject",
    "description" : "element nguồn cần được kéo đi"
  }, {
    "type" : "ObjectUI",
    "name" : "targetObject",
    "description" : "element đích, nơi element nguồn sẽ được thả vào"
  } ]
}, {
  "name" : "startMobileSession",
  "description" : "Khởi tạo nhanh một phiên làm việc trên thiết bị di động bằng cách cung cấp các thông tin cơ bản.",
  "category" : "Driver",
  "subCategory" : "Session",
  "example" : "// Bắt đầu phiên trên thiết bị Android của User A\ndriver.startMobileSession(\"user_A_android\", \"Android\", \"emulator-5554\", \"/path/to/app.apk\", \"http://127.0.0.1:4723/wd/hub\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Đây là cách đơn giản nhất để khởi động một thiết bị di động mà không cần tạo file profile phức tạp.",
  "className" : "com.vtnet.netat.core.keywords.DriverKeyword",
  "methodName" : "startSession",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "sessionName",
    "description" : "Tên định danh duy nhất cho phiên làm việc"
  }, {
    "type" : "String",
    "name" : "platformName",
    "description" : "Nền tảng 'Android' hoặc 'iOS'"
  }, {
    "type" : "String",
    "name" : "udid",
    "description" : "UDID của thiết bị (thật hoặc ảo)"
  }, {
    "type" : "String",
    "name" : "appPath",
    "description" : "Đường dẫn tuyệt đối đến file .apk hoặc .ipa"
  }, {
    "type" : "String",
    "name" : "appiumServerUrl",
    "description" : "URL của Appium Server (ví dụ: 'http://127.0.0.1:4723/wd/hub')"
  }, {
    "type" : "String",
    "name" : "automationName",
    "description" : "Tên của driver sử dụng, với Android thì UiAutomator2, iOS thì XCUITest"
  } ]
}, {
  "name" : "executeCommand",
  "description" : "Thực thi một lệnh trên command line của hệ điều hành và chờ cho đến khi nó hoàn thành. Phương thức này cho phép thực thi các lệnh hệ thống từ trong kịch bản kiểm thử, hữu ích cho các tác vụ như khởi động/dừng dịch vụ, xóa tệp, hoặc các tác vụ hệ thống khác.",
  "category" : "Utility",
  "subCategory" : "Command",
  "example" : "// Dừng tất cả các tiến trình Chrome trên Windows\nutilityKeyword.executeCommand(\"taskkill\", \"/F\", \"/IM\", \"chrome.exe\");\n\n// Liệt kê các tệp trong thư mục hiện tại trên Linux/Mac\nutilityKeyword.executeCommand(\"ls\", \"-la\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho tất cả nền tảng. Cần quyền thực thi lệnh trên hệ điều hành. Có thể throw IOException nếu có lỗi khi thực thi lệnh, hoặc SecurityException nếu không có quyền thực thi lệnh.",
  "className" : "com.vtnet.netat.core.keywords.UtilityKeyword",
  "methodName" : "executeCommand",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String[]",
    "name" : "command",
    "description" : "Lệnh và các tham số của nó, mỗi phần tử trong mảng là một phần riêng biệt của lệnh"
  } ]
}, {
  "name" : "arraySize",
  "description" : "Kiểm tra kích thước array",
  "category" : "API",
  "subCategory" : "Assertion - Arrays",
  "example" : "verify.arraySize(response, \"$.users\", 10);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiAssert",
  "methodName" : "arraySize",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ApiResponse",
    "name" : "response",
    "description" : ""
  }, {
    "type" : "String",
    "name" : "jsonPath",
    "description" : "Path đến array"
  }, {
    "type" : "int",
    "name" : "expectedSize",
    "description" : "Số lượng phần tử mong đợi"
  } ]
}, {
  "name" : "startMobileSession",
  "description" : "Khởi tạo nhanh một phiên làm việc trên thiết bị di động bằng cách cung cấp các thông tin cơ bản.",
  "category" : "Driver",
  "subCategory" : "Session",
  "example" : "// Bắt đầu phiên trên thiết bị Android của User A\ndriver.startMobileSession(\"user_A_android\", \"Android\", \"emulator-5554\", \"/path/to/app.apk\", \"http://127.0.0.1:4723/wd/hub\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Đây là cách đơn giản nhất để khởi động một thiết bị di động mà không cần tạo file profile phức tạp.",
  "className" : "com.vtnet.netat.core.keywords.DriverKeyword",
  "methodName" : "startSession",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "sessionName",
    "description" : ""
  }, {
    "type" : "String",
    "name" : "platformName",
    "description" : ""
  }, {
    "type" : "String",
    "name" : "udid",
    "description" : ""
  }, {
    "type" : "String",
    "name" : "appPackage",
    "description" : ""
  }, {
    "type" : "String",
    "name" : "appActivity",
    "description" : ""
  }, {
    "type" : "String",
    "name" : "appiumServerUrl",
    "description" : ""
  }, {
    "type" : "String",
    "name" : "automationName",
    "description" : ""
  } ]
}, {
  "name" : "waitForElementAttributeContains",
  "description" : "Chờ đợi attribute của element chứa substring chỉ định trong khoảng thời gian cho phép. Rất hữu ích cho validation partial attribute values như CSS classes, composite data attributes, hoặc khi attribute có nhiều giá trị được nối với nhau.",
  "category" : "Web",
  "subCategory" : "Wait",
  "example" : "// Chờ element có class 'active' (trong nhiều classes)\nwebKeyword.waitForElementAttributeContains(menuItem, \"class\", \"active\", 10);\n\n// Chờ style chứa 'display: block'\nwebKeyword.waitForElementAttributeContains(modal, \"style\", \"display: block\", 8);\n\n// Chờ data attribute chứa status\nwebKeyword.waitForElementAttributeContains(item, \"data-info\", \"status:ready\", 15);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "PARTIAL ATTRIBUTE MATCH: Đặc biệt hữu ích cho CSS classes (class attribute thường chứa nhiều classes), data attributes có format phức tạp, hoặc style attributes. Linh hoạt hơn so với exact match.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "waitForElementAttributeContains",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng UI element cần kiểm tra attribute"
  }, {
    "type" : "String",
    "name" : "attributeName",
    "description" : "Tên attribute cần kiểm tra"
  }, {
    "type" : "String",
    "name" : "partialValue",
    "description" : "Substring mà attribute phải chứa"
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa tính bằng giây"
  } ]
}, {
  "name" : "assertLessThanOrEqual",
  "description" : "Khẳng định rằng giá trị thực tế nhỏ hơn hoặc bằng giá trị so sánh. Nếu không thỏa mãn, test case sẽ dừng lại và báo lỗi.",
  "category" : "Assertion",
  "subCategory" : "HardAssert",
  "example" : "assertLessThanOrEqual(10, 10);\nassertLessThanOrEqual(fileSize, maxSize, \"Kích thước file không được vượt quá giới hạn\");\nassertLessThanOrEqual(attempts, 3, \"Số lần thử không được quá 3\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Tự động xử lý so sánh giữa số và chuỗi số. Assertion sẽ fail nếu actualValue > expectedValue.",
  "className" : "com.vtnet.netat.core.keywords.AssertionKeyword",
  "methodName" : "assertLessThanOrEqual",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "Object",
    "name" : "actualValue",
    "description" : "Giá trị thực tế cần so sánh (số hoặc chuỗi số)"
  }, {
    "type" : "Object",
    "name" : "expectedValue",
    "description" : "Giá trị mong đợi để so sánh (actualValue phải nhỏ hơn hoặc bằng giá trị này)"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "activateApp",
  "description" : "Đưa một ứng dụng đã được cài đặt lên foreground (màn hình chính). Hữu ích khi cần chuyển đổi giữa các ứng dụng hoặc kích hoạt lại ứng dụng đang chạy nền. Ứng dụng phải đã được cài đặt trên thiết bị, nếu không sẽ gây ra lỗi. Không giống như startActivity trên Android, phương thức này hoạt động trên cả Android và iOS với cùng một cú pháp.",
  "category" : "Mobile",
  "subCategory" : "AppLifecycle",
  "example" : "// Kích hoạt ứng dụng chính đang test\nmobileKeyword.activateApp(\"com.example.myapp\");\n\n// Chuyển sang ứng dụng cài đặt để thay đổi cấu hình thiết bị\nmobileKeyword.activateApp(\"com.android.settings\"); // Android\n// hoặc\nmobileKeyword.activateApp(\"com.apple.Preferences\"); // iOS\n\n// Quay lại ứng dụng chính sau khi thực hiện thao tác trên ứng dụng khác\nmobileKeyword.activateApp(\"com.example.myapp\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Ứng dụng đã được cài đặt trên thiết bị. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Có thể throw WebDriverException nếu không thể kích hoạt ứng dụng, hoặc NoSuchAppException nếu ứng dụng không được cài đặt trên thiết bị.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "activateApp",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "appId",
    "description" : "AppPackage (Android) hoặc BundleID (iOS) của ứng dụng cần kích hoạt"
  } ]
}, {
  "name" : "scrollToCoordinates",
  "description" : "Cuộn trang web đến một tọa độ (x, y) cụ thể trong viewport.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Cuộn xuống 500px từ đầu trang\nwebKeyword.scrollToCoordinates(0, 500);\n\n// Cuộn đến đầu trang\nwebKeyword.scrollToCoordinates(0, 0);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, trình duyệt phải hỗ trợ thực thi JavaScript, và tọa độ phải nằm trong phạm vi hợp lệ of trang web. Có thể throw JavascriptException nếu có lỗi khi thực thi JavaScript, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "scrollToCoordinates",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "int",
    "name" : "x",
    "description" : "Tọa độ theo trục hoành (pixel)"
  }, {
    "type" : "int",
    "name" : "y",
    "description" : "Tọa độ theo trục tung (pixel)"
  } ]
}, {
  "name" : "verifyOrientation",
  "description" : "Khẳng định rằng màn hình thiết bị đang ở hướng dọc (PORTRAIT) hoặc ngang (LANDSCAPE). Hữu ích để đảm bảo ứng dụng hiển thị đúng hướng trước khi thực hiện các thao tác tiếp theo. Phương thức hoạt động trên cả Android và iOS. Nếu hướng màn hình không khớp với giá trị mong đợi, một AssertionError sẽ được ném ra.",
  "category" : "Mobile",
  "subCategory" : "Assertion",
  "example" : "// Kiểm tra rằng ứng dụng đang ở chế độ dọc trước khi tiếp tục\nmobileKeyword.verifyOrientation(\"PORTRAIT\");\n\n// Xoay thiết bị và xác minh hướng ngang\nrotateDevice();\nmobileKeyword.verifyOrientation(\"LANDSCAPE\");",
  "returnValue" : "void - Không trả về giá trị, ném AssertionError nếu kiểm tra thất bại",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Đang sử dụng AndroidDriver hoặc IOSDriver, và tham số expectedOrientation phải là 'PORTRAIT' hoặc 'LANDSCAPE'. Có thể throw AssertionError nếu hướng màn hình không khớp với giá trị mong đợi, IllegalArgumentException nếu giá trị expectedOrientation không hợp lệ, UnsupportedOperationException nếu loại driver không được hỗ trợ, hoặc WebDriverException nếu không thể lấy thông tin hướng màn hình.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "verifyOrientation",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "expectedOrientation",
    "description" : "Hướng màn hình mong đợi, phải là 'PORTRAIT' hoặc 'LANDSCAPE' (không phân biệt hoa/thường)"
  } ]
}, {
  "name" : "headerContains",
  "description" : "Kiểm tra giá trị header CHỨA substring",
  "category" : "API",
  "subCategory" : "Assertion - Headers",
  "example" : "verify.headerContains(response, \"Content-Type\", \"json\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiAssert",
  "methodName" : "headerContains",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ApiResponse",
    "name" : "response",
    "description" : ""
  }, {
    "type" : "String",
    "name" : "headerName",
    "description" : ""
  }, {
    "type" : "String",
    "name" : "substring",
    "description" : ""
  } ]
}, {
  "name" : "bodyEquals",
  "description" : "Kiểm tra toàn bộ response body bằng với expected string",
  "category" : "API",
  "subCategory" : "Assertion - Body",
  "example" : "verify.bodyEquals(response, \"{\\\"status\\\":\\\"ok\\\"}\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiAssert",
  "methodName" : "bodyEquals",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ApiResponse",
    "name" : "response",
    "description" : ""
  }, {
    "type" : "String",
    "name" : "expectedBody",
    "description" : ""
  } ]
}, {
  "name" : "assertGreaterThan",
  "description" : "Khẳng định rằng giá trị thực tế lớn hơn giá trị so sánh. Nếu không thỏa mãn, test case sẽ dừng lại và báo lỗi.",
  "category" : "Assertion",
  "subCategory" : "HardAssert",
  "example" : "assertGreaterThan(15, 10);\nassertGreaterThan(userAge, 18, \"Tuổi người dùng phải lớn hơn 18\");\nassertGreaterThan(totalAmount, 0, \"Tổng số tiền phải lớn hơn 0\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Tự động xử lý so sánh giữa số và chuỗi số. Assertion sẽ fail nếu actualValue <= expectedValue.",
  "className" : "com.vtnet.netat.core.keywords.AssertionKeyword",
  "methodName" : "assertGreaterThan",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "Object",
    "name" : "actualValue",
    "description" : "Giá trị thực tế cần so sánh (số hoặc chuỗi số)"
  }, {
    "type" : "Object",
    "name" : "expectedValue",
    "description" : "Giá trị mong đợi để so sánh (actualValue phải lớn hơn giá trị này)"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "softAssertGreaterThanOrEqual",
  "description" : "Kiểm tra giá trị thực tế có lớn hơn hoặc bằng giá trị so sánh không. Nếu không, ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Assertion",
  "subCategory" : "Soft",
  "example" : "int stockQuantity = Integer.parseInt(web.getText(\"stockLabel\"));\nassertion.softAssertGreaterThanOrEqual(stockQuantity, 1, \"Số lượng tồn kho phải >= 1\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Tự động xử lý so sánh giữa số và chuỗi số. Lỗi sẽ được ghi nhận và test vẫn tiếp tục. **Phải gọi `assertAll()` ở cuối** để tổng hợp kết quả.",
  "className" : "com.vtnet.netat.core.keywords.AssertionKeyword",
  "methodName" : "softAssertGreaterThanOrEqual",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "Object",
    "name" : "actualValue",
    "description" : "Giá trị thực tế"
  }, {
    "type" : "Object",
    "name" : "expectedValue",
    "description" : "Giá trị so sánh"
  }, {
    "type" : "String[]",
    "name" : "message",
    "description" : "Thông điệp tùy chỉnh khi assertion fail"
  } ]
}, {
  "name" : "verifyTextContainsSoft",
  "description" : "Verify text của một element có chứa một chuỗi con hay không. Nếu không chứa, kịch bản sẽ ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify kết quả tìm kiếm có chứa thông tin số lượng\nwebKeyword.sendKeys(searchInputObject, \"điện thoại\");\nwebKeyword.click(searchButtonObject);\nwebKeyword.verifyTextContainsSoft(searchResultSummary, \"kết quả\");\nwebKeyword.verifyTextContainsSoft(searchResultSummary, \"điện thoại\");\n\n// Verify nhiều thông tin trên trang sản phẩm với custom message\nwebKeyword.verifyTextContainsSoft(productDescriptionObject, \"chống nước\", \"Mô tả thiếu thông tin chống nước\");\nwebKeyword.verifyTextContainsSoft(productDescriptionObject, \"bảo hành\", \"Thông tin bảo hành không được hiển thị\");\nwebKeyword.click(addToCartButtonObject); // Tiếp tục thực hiện hành động",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và element cần Verify phải tồn tại trong DOM và có text. Có thể throw NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyTextContainsSoft",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element chứa text cần Verify"
  }, {
    "type" : "String",
    "name" : "partialText",
    "description" : "Chuỗi text con mong đợi"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "jsonPathNotEquals",
  "description" : "Kiểm tra giá trị JSON path KHÔNG bằng với unexpected value",
  "category" : "API",
  "subCategory" : "Assertion - JSON",
  "example" : "verify.jsonPathNotEquals(response, \"$.status\", \"error\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiAssert",
  "methodName" : "jsonPathNotEquals",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ApiResponse",
    "name" : "response",
    "description" : ""
  }, {
    "type" : "String",
    "name" : "jsonPath",
    "description" : ""
  }, {
    "type" : "Object",
    "name" : "unexpectedValue",
    "description" : ""
  } ]
}, {
  "name" : "truncateTable",
  "description" : "Xóa tất cả data trong table (TRUNCATE) - nhanh hơn DELETE và reset auto-increment",
  "category" : "Database",
  "subCategory" : "Table Management",
  "example" : "DatabaseKeyword db = new DatabaseKeyword();\n\n// Truncate table trước test\ndb.truncateTable(\"mysql-dev\", \"temp_users\");\nSystem.out.println(\"✓ Table truncated\");\n\n// Cleanup multiple tables\nString[] tables = {\"sessions\", \"temp_data\", \"cache\"};\nfor (String table : tables) {\n    db.truncateTable(\"mysql-dev\", table);\n    System.out.println(\"Truncated: \" + table);\n}\n\n// Truncate và verify\ndb.truncateTable(\"mysql-dev\", \"test_orders\");\nint count = db.getRowCount(\"mysql-dev\", \"test_orders\");\nif (count == 0) {\n    System.out.println(\"✓ Table successfully truncated\");\n}\n\n// Trong test teardown\ntry {\n    db.truncateTable(\"mysql-dev\", \"test_results\");\n} catch (DatabaseException e) {\n    System.err.println(\"Warning: Could not truncate table - \" + e.getMessage());\n}",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "- TRUNCATE nhanh hơn DELETE vì không log từng row\n- Auto-increment counter sẽ được reset về 1\n- Không thể rollback trong transaction (DDL statement)\n- Throw exception nếu table có foreign key constraints\n- Thích hợp cho cleanup test data",
  "className" : "com.vtnet.netat.db.keywords.DatabaseKeyword",
  "methodName" : "truncateTable",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "profileName",
    "description" : "Tên database profile đã cấu hình"
  }, {
    "type" : "String",
    "name" : "tableName",
    "description" : "Tên table cần truncate"
  } ]
}, {
  "name" : "shakeDevice",
  "description" : "Mô phỏng hành động lắc thiết bị để kích hoạt các tính năng sử dụng cảm biến gia tốc (accelerometer).",
  "category" : "Mobile",
  "subCategory" : "System",
  "example" : "mobileKeyword.shakeDevice(); // Mô phỏng lắc thiết bị",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "LƯU Ý: Chỉ hoạt động trên thiết bị thật hoặc simulator hỗ trợ sensor. Emulator Android thông thường không hỗ trợ. Một số app có thể có độ trễ trong việc phản hồi shake event.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "shakeDevice",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "waitForJavaScriptReturnsValue",
  "description" : "Chờ đợi JavaScript code thực thi và trả về giá trị mong đợi trong khoảng thời gian chỉ định. Rất hữu ích cho việc chờ đợi AJAX calls hoàn thành, custom conditions, hoặc các trạng thái phức tạp của trang web không thể detect bằng DOM elements.",
  "category" : "Web",
  "subCategory" : "Wait",
  "example" : "// Chờ jQuery AJAX calls hoàn thành\nwebKeyword.waitForJavaScriptReturnsValue(\"return jQuery.active\", 0, 30);\n\n// Chờ custom loading flag\nwebKeyword.waitForJavaScriptReturnsValue(\"return window.isLoading\", false, 20);\n\n// Chờ API response được set\nwebKeyword.waitForJavaScriptReturnsValue(\"return window.apiData !== undefined\", true, 15);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "ADVANCED USE CASE: Thích hợp cho SPA applications, AJAX monitoring, custom loading states. Script có thể return any type (String, Boolean, Number, null). Sử dụng khi standard WebDriver waits không đủ mạnh.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "waitForJavaScriptReturnsValue",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "script",
    "description" : "JavaScript code cần thực thi"
  }, {
    "type" : "Object",
    "name" : "expectedValue",
    "description" : "Giá trị mong đợi từ script (có thể là String, Boolean, Number)"
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa tính bằng giây"
  } ]
}, {
  "name" : "clearAllHeaders",
  "description" : "Xóa tất cả headers",
  "category" : "API",
  "subCategory" : "Headers",
  "example" : "api.clearAllHeaders();",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiKeyword",
  "methodName" : "clearAllHeaders",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "hover",
  "description" : "Di chuyển con trỏ chuột đến vị trí of một element để hiển thị các menu con, tooltip, hoặc các hiệu ứng khác.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Di chuột đến menu chính để hiển thị menu con\nwebKeyword.hover(mainMenuObject);\nwebKeyword.waitForElementVisible(subMenuObject);\n\n// Di chuột đến biểu tượng để hiển thị tooltip\nwebKeyword.hover(infoIconObject);\nwebKeyword.waitForElementVisible(tooltipObject);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần hover phải tồn tại trong DOM, phải hiển thị trên trang, và trình duyệt phải hỗ trợ thao tác di chuột (một số trình duyệt di động có thể không hỗ trợ). Có thể throw ElementNotVisibleException nếu element không hiển thị trên trang, StaleElementReferenceException nếu element không còn gắn với DOM, TimeoutException nếu element không xuất hiện trong thời gian chờ, WebDriverException nếu có lỗi khi tương tác với trình duyệt, hoặc MoveTargetOutOfBoundsException nếu element nằm ngoài viewport hiện tại.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "hover",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần di chuột đến"
  } ]
}, {
  "name" : "addPathParam",
  "description" : "Thêm path parameter",
  "category" : "API",
  "subCategory" : "Parameters",
  "example" : "api.addPathParam(\"userId\", 123);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiKeyword",
  "methodName" : "addPathParam",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "paramName",
    "description" : "Tên parameter"
  }, {
    "type" : "Object",
    "name" : "paramValue",
    "description" : "Giá trị parameter"
  } ]
}, {
  "name" : "waitForElementAttributeToBe",
  "description" : "Chờ đợi attribute của element có giá trị chính xác như mong đợi trong khoảng thời gian chỉ định. Rất hữu ích cho validation các thay đổi attribute động như status, state, data-attributes, class names, hoặc các thuộc tính được cập nhật qua JavaScript.",
  "category" : "Web",
  "subCategory" : "Wait",
  "example" : "// Chờ button chuyển sang disabled state\nwebKeyword.waitForElementAttributeToBe(submitBtn, \"disabled\", \"true\", 10);\n\n// Chờ element có class 'active'\nwebKeyword.waitForElementAttributeToBe(menuItem, \"class\", \"menu-item active\", 8);\n\n// Chờ data attribute cập nhật\nwebKeyword.waitForElementAttributeToBe(statusDiv, \"data-status\", \"completed\", 15);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "COMMON ATTRIBUTES: class, data-*, disabled, checked, selected, aria-*, style, value. Đặc biệt hữu ích cho SPA applications khi attributes thay đổi theo state. Lưu ý: attribute value khác với property value.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "waitForElementAttributeToBe",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng UI element cần kiểm tra attribute"
  }, {
    "type" : "String",
    "name" : "attributeName",
    "description" : "Tên attribute cần kiểm tra (vd: class, data-status, disabled)"
  }, {
    "type" : "String",
    "name" : "expectedValue",
    "description" : "Giá trị mong đợi của attribute"
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa tính bằng giây"
  } ]
}, {
  "name" : "longPressByCoordinates",
  "description" : "Thực hiện hành động chạm và giữ tại một tọa độ (x, y) trong một khoảng thời gian xác định. Hữu ích khi cần thực hiện các thao tác đặc biệt như hiển thị menu ngữ cảnh tại một vị trí cụ thể, hoặc khi tương tác với các phần tử không thể định vị bằng locator. Tọa độ được tính theo pixel từ góc trên bên trái của màn hình (0,0).",
  "category" : "Mobile",
  "subCategory" : "Gesture",
  "example" : "// Chạm và giữ tại trung tâm màn hình trong 2 giây\nDimension size = DriverManager.getDriver().manage().window().getSize();\nmobileKeyword.longPressByCoordinates(size.width / 2, size.height / 2, 2);\n\n// Chạm và giữ tại một vị trí trên bản đồ để thả ghim\nmobileKeyword.longPressByCoordinates(450, 800, 1);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Tọa độ cần nằm trong phạm vi kích thước màn hình của thiết bị và ứng dụng phải hỗ trợ thao tác chạm và giữ tại vị trí đó. Có thể throw WebDriverException nếu có lỗi khi thực hiện hành động chạm và giữ, hoặc IllegalArgumentException nếu tọa độ nằm ngoài kích thước màn hình hoặc thời gian giữ không hợp lệ.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "longPressByCoordinates",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "int",
    "name" : "x",
    "description" : "Tọa độ theo trục ngang (pixel)"
  }, {
    "type" : "int",
    "name" : "y",
    "description" : "Tọa độ theo trục dọc (pixel)"
  }, {
    "type" : "int",
    "name" : "durationInSeconds",
    "description" : "Thời gian giữ (tính bằng giây)"
  } ]
}, {
  "name" : "getElementHeight",
  "description" : "Lấy và trả về chiều cao của một phần tử (tính bằng pixel). Hữu ích khi cần tính toán vị trí tương đối hoặc kiểm tra kích thước hiển thị của phần tử. Phương thức này trả về giá trị số nguyên đại diện cho chiều cao theo pixel của phần tử. Lưu ý: Phần tử phải hiển thị trên màn hình để có thể lấy được kích thước chính xác.",
  "category" : "Mobile",
  "subCategory" : "Getter",
  "example" : "// Lấy chiều cao của một hình ảnh\nint imageHeight = mobileKeyword.getElementHeight(productImage);\n\n// Kiểm tra xem phần tử có kích thước đúng không\nint cardHeight = mobileKeyword.getElementHeight(cardElement);\nassert cardHeight > 200 : \"Card height is too small\";",
  "returnValue" : "int - Chiều cao của phần tử tính bằng pixel",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Phần tử cần đo phải tồn tại và hiển thị trên màn hình, và phải có kích thước xác định (không phải phần tử ẩn hoặc có kích thước 0). Có thể throw NoSuchElementException nếu không tìm thấy phần tử, StaleElementReferenceException nếu phần tử không còn gắn với DOM, hoặc WebDriverException nếu không thể lấy kích thước của phần tử.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "getElementHeight",
  "returnType" : "int",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần lấy chiều cao"
  } ]
}, {
  "name" : "softAssertTrue",
  "description" : "Kiểm tra một điều kiện là true. Nếu là false, ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Assertion",
  "subCategory" : "Soft",
  "example" : "boolean isVisible = web.isElementPresent(\"myElement\", 5);\nassertion.softAssertTrue(isVisible, \"Element 'myElement' phải hiển thị.\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Lỗi sẽ được ghi nhận và test vẫn tiếp tục. **Phải gọi `assertAll()` ở cuối** để tổng hợp kết quả.",
  "className" : "com.vtnet.netat.core.keywords.AssertionKeyword",
  "methodName" : "softAssertTrue",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "boolean",
    "name" : "condition",
    "description" : "Điều kiện cần kiểm tra"
  }, {
    "type" : "String[]",
    "name" : "message",
    "description" : "Thông điệp tùy chỉnh khi assertion fail"
  } ]
}, {
  "name" : "getCurrentActivity",
  "description" : "Lấy tên Activity hiện tại đang được hiển thị trên màn hình Android",
  "category" : "Mobile",
  "subCategory" : "AppLifecycle",
  "example" : "String activityName = getCurrentActivity();",
  "returnValue" : "String - Tên của Activity hiện tại, null nếu không phải Android",
  "note" : "Keyword này chỉ hoạt động trên Android. Trên iOS sẽ trả về null và ghi log cảnh báo. Activity name thường có định dạng như 'com.example.MainActivity'.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "getCurrentActivity",
  "returnType" : "String",
  "parameters" : [ ]
}, {
  "name" : "waitForVisible",
  "description" : "Chờ cho đến khi một phần tử hiển thị trên màn hình hoặc cho đến khi hết thời gian chờ. Phần tử được coi là hiển thị khi nó tồn tại trong DOM và có thể nhìn thấy được (visible). Hữu ích khi cần đảm bảo một phần tử đã xuất hiện trước khi tương tác với nó. Nếu phần tử không hiển thị sau khi hết thời gian chờ, một TimeoutException sẽ được ném ra.",
  "category" : "Mobile",
  "subCategory" : "Wait",
  "example" : "// Chờ nút đăng nhập hiển thị\nmobileKeyword.waitForVisible(loginButton, 5);\nmobileKeyword.tap(loginButton);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Đã xác định chính xác phần tử UI cần chờ đợi. Có thể throw TimeoutException nếu phần tử không hiển thị trong thời gian chờ đợi, StaleElementReferenceException nếu phần tử không còn gắn với DOM, hoặc NoSuchElementException nếu không tìm thấy phần tử trong DOM.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "waitForVisible",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần chờ hiển thị"
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian tối đa (giây) để chờ phần tử hiển thị"
  } ]
}, {
  "name" : "verifyElementAttributeHard",
  "description" : "Verify giá trị của một thuộc tính (attribute) trên element. Nếu giá trị không khớp, kịch bản sẽ DỪNG LẠI.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify đường dẫn của liên kết\nwebKeyword.verifyElementAttributeHard(linkObject, \"href\", \"/products/123\");\n\n// Verify trạng thái của checkbox với custom message\nwebKeyword.click(termsCheckboxObject);\nwebKeyword.verifyElementAttributeHard(termsCheckboxObject, \"checked\", \"true\", \n    \"Checkbox điều khoản phải được chọn\");\n\n// Verify thuộc tính quan trọng của form\nwebKeyword.verifyElementAttributeHard(formObject, \"method\", \"POST\", \"Form phải sử dụng method POST\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần Verify phải tồn tại trong DOM, và thuộc tính cần Verify phải tồn tại trên element. Có thể throw AssertionError nếu giá trị thuộc tính không khớp với giá trị mong đợi, NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyElementAttributeHard",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần Verify"
  }, {
    "type" : "String",
    "name" : "attributeName",
    "description" : "Tên của thuộc tính (ví dụ: 'href', 'class', 'value')"
  }, {
    "type" : "String",
    "name" : "expectedValue",
    "description" : "Giá trị mong đợi của thuộc tính"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "statusServerError",
  "description" : "Kiểm tra status code là 5xx (server error)",
  "category" : "API",
  "subCategory" : "Assertion - Status",
  "example" : "verify.statusServerError(response);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiAssert",
  "methodName" : "statusServerError",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ApiResponse",
    "name" : "response",
    "description" : ""
  } ]
}, {
  "name" : "pause",
  "description" : "Tạm dừng việc thực thi kịch bản trong một khoảng thời gian tĩnh. (Lưu ý: Chỉ nên dùng khi thực sự cần thiết, ưu tiên các keyword chờ động).",
  "category" : "Web",
  "subCategory" : "Utility",
  "example" : "// Tạm dừng để đợi animation hoàn thành\nwebKeyword.click(expandMenuButtonObject);\nwebKeyword.pause(1000); // Đợi 1 seconds cho animation menu mở ra\nwebKeyword.click(menuItemObject);\n\n// Tạm dừng để đợi dữ liệu được xử lý\nwebKeyword.click(generateReportButtonObject);\nwebKeyword.pause(3000); // Đợi 3 seconds cho quá trình xử lý\nwebKeyword.verifyElementVisibleHard(reportResultObject, 10);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. Không có điều kiện tiên quyết đặc biệt. Có thể throw InterruptedException nếu luồng thực thi bị gián đoạn trong khi tạm dừng.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "pause",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "int",
    "name" : "milliseconds",
    "description" : "Thời gian cần tạm dừng (tính bằng mili seconds)"
  } ]
}, {
  "name" : "verifyElementVisibleWithText",
  "description" : "Xác minh một phần tử chứa văn bản chỉ định đang hiển thị trên màn hình. Tự động cuộn để tìm kiếm qua các thuộc tính `text`, `content-desc`, và `resource-id`.",
  "category" : "Mobile",
  "subCategory" : "Assertion",
  "example" : "mobileKeyword.verifyElementVisibleWithText(\"Đăng nhập thành công\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "verifyElementVisibleWithText",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "textToFind",
    "description" : "Văn bản cần xác minh sự tồn tại trên màn hình."
  } ]
}, {
  "name" : "verifyTitleSoft",
  "description" : "So sánh tiêu đề của trang hiện tại với một chuỗi mong đợi. Nếu không khớp, kịch bản sẽ ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify tiêu đề trang giỏ hàng sau khi thêm sản phẩm\nwebKeyword.click(addToCartButtonObject);\nwebKeyword.click(viewCartButtonObject);\nwebKeyword.waitForPageLoaded(10);\nwebKeyword.verifyTitleSoft(\"Giỏ hàng (1 sản phẩm)\");\nwebKeyword.click(checkoutButtonObject); // Tiếp tục quy trình thanh toán\n\n// Verify nhiều điều kiện trong quy trình đặt hàng với custom message\nwebKeyword.verifyTitleSoft(\"Thanh toán - Bước 1: Thông tin giao hàng\", \n    \"Tiêu đề bước thanh toán không đúng\");\nwebKeyword.verifyElementVisibleSoft(shippingFormObject, true);\nwebKeyword.fillShippingForm(); // Tiếp tục điền form",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và trang web đã hoàn thành quá trình tải. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyTitleSoft",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "expectedTitle",
    "description" : "Tiêu đề trang mong đợi"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "waitForElementTextToBe",
  "description" : "Chờ đợi text của element có giá trị chính xác như mong đợi trong khoảng thời gian chỉ định. Thực hiện exact matching, hữu ích cho validation chính xác nội dung, status messages, hoặc khi cần đảm bảo text hoàn toàn khớp.",
  "category" : "Web",
  "subCategory" : "Wait",
  "example" : "// Chờ status chính xác\nwebKeyword.waitForElementTextToBe(statusLabel, \"Completed\", 10);\n\n// Chờ counter có giá trị exact\nwebKeyword.waitForElementTextToBe(itemCount, \"5 items\", 8);\n\n// Validation button text\nwebKeyword.waitForElementTextToBe(submitButton, \"Submit\", 5);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "EXACT MATCH: Khác với waitForElementTextContains (partial), method này yêu cầu text phải hoàn toàn khớp. Sử dụng cho validation chính xác status, labels, hoặc khi text có format cố định.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "waitForElementTextToBe",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng UI element cần kiểm tra text content"
  }, {
    "type" : "String",
    "name" : "expectedText",
    "description" : "Text chính xác mà element phải có"
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa tính bằng giây"
  } ]
}, {
  "name" : "waitForElementTextContains",
  "description" : "Chờ đợi text của element chứa substring chỉ định trong khoảng thời gian cho phép. Thực hiện partial matching, rất hữu ích cho validation nội dung động, messages, notifications hoặc khi text có thể thay đổi nhưng vẫn chứa keyword quan trọng.",
  "category" : "Web",
  "subCategory" : "Wait",
  "example" : "// Chờ success message chứa 'thành công'\nwebKeyword.waitForElementTextContains(successMessage, \"thành công\", 10);\n\n// Chờ counter chứa số lượng items\nwebKeyword.waitForElementTextContains(itemCounter, \"items\", 8);\n\n// Validation error message\nwebKeyword.waitForElementTextContains(errorMsg, \"Invalid\", 5);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "USE CASE: Lý tưởng cho validation messages động, notifications, counters, hoặc content được load từ API. Khác với waitForElementTextToBe (exact match), method này linh hoạt hơn với partial matching.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "waitForElementTextContains",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng UI element cần kiểm tra text content"
  }, {
    "type" : "String",
    "name" : "expectedText",
    "description" : "Substring mà text của element phải chứa"
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa tính bằng giây"
  } ]
}, {
  "name" : "jsonPathExists",
  "description" : "Kiểm tra JSON path TỒN TẠI trong response",
  "category" : "API",
  "subCategory" : "Assertion - JSON",
  "example" : "verify.jsonPathExists(response, \"$.user.email\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiAssert",
  "methodName" : "jsonPathExists",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ApiResponse",
    "name" : "response",
    "description" : ""
  }, {
    "type" : "String",
    "name" : "jsonPath",
    "description" : ""
  } ]
}, {
  "name" : "arrayNotEmpty",
  "description" : "Kiểm tra array KHÔNG RỖNG",
  "category" : "API",
  "subCategory" : "Assertion - Arrays",
  "example" : "verify.arrayNotEmpty(response, \"$.users\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiAssert",
  "methodName" : "arrayNotEmpty",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ApiResponse",
    "name" : "response",
    "description" : ""
  }, {
    "type" : "String",
    "name" : "jsonPath",
    "description" : ""
  } ]
}, {
  "name" : "terminateApp",
  "description" : "Buộc dừng (kill) một tiến trình ứng dụng đang chạy. Khác với việc chỉ đưa ứng dụng về background, phương thức này thực sự kết thúc tiến trình của ứng dụng. Hữu ích khi cần kiểm tra khả năng khôi phục trạng thái của ứng dụng sau khi bị buộc dừng, hoặc để đảm bảo ứng dụng bắt đầu từ trạng thái sạch. Trả về true nếu ứng dụng đã được dừng thành công, false nếu ứng dụng không chạy.",
  "category" : "Mobile",
  "subCategory" : "AppLifecycle",
  "example" : "// Dừng ứng dụng đang test\nmobileKeyword.terminateApp(\"com.example.myapp\");\n\n// Dừng ứng dụng và khởi động lại để kiểm tra tính năng khôi phục\nmobileKeyword.terminateApp(\"com.example.myapp\");\nmobileKeyword.activateApp(\"com.example.myapp\");\n\n// Kiểm tra xử lý lỗi khi ứng dụng bị crash\nmobileKeyword.tap(crashButton); // Gây ra crash\nmobileKeyword.terminateApp(\"com.example.myapp\"); // Đảm bảo ứng dụng đã dừng\nmobileKeyword.activateApp(\"com.example.myapp\"); // Khởi động lại",
  "returnValue" : "boolean - True nếu ứng dụng đã được dừng thành công, false nếu ứng dụng không chạy",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Có thể throw WebDriverException nếu không thể dừng ứng dụng, hoặc IllegalArgumentException nếu appId không hợp lệ.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "terminateApp",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "appId",
    "description" : "AppPackage (Android) hoặc BundleID (iOS) của ứng dụng cần dừng"
  } ]
}, {
  "name" : "isApiCalled",
  "description" : "Kiểm tra xem API có được gọi hay không bằng JavaScript injection. Hỗ trợ check params linh hoạt: exact match, ignore ('*'), hoặc check not null ('?')",
  "category" : "Web",
  "subCategory" : "Network",
  "example" : "// Check với timestamp động\nMap<String, String> params = new HashMap<>();\nparams.put(\"start\", \"?\");  // Check not null\nparams.put(\"end\", \"?\");    // Check not null\nparams.put(\"service\", \"tv360\"); // Exact match\nweb.isApiCalled(\"/service-stats\", params, 15);",
  "returnValue" : "boolean - true nếu API được gọi, false nếu không",
  "note" : "Hoạt động với mọi browser. Giá trị đặc biệt: '*'=ignore, '?'=not null",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "isApiCalled",
  "returnType" : "boolean",
  "parameters" : [ {
    "type" : "String",
    "name" : "apiPath",
    "description" : "Path của API cần monitor"
  }, {
    "type" : "Map",
    "name" : "expectedParams",
    "description" : "Query params. Giá trị: '*'=ignore, '?'=not null, còn lại=exact match"
  }, {
    "type" : "int",
    "name" : "timeoutSeconds",
    "description" : "Thời gian chờ tối đa"
  } ]
}, {
  "name" : "clearRequestBody",
  "description" : "Xóa request body",
  "category" : "API",
  "subCategory" : "Body",
  "example" : "api.clearRequestBody();",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiKeyword",
  "methodName" : "clearRequestBody",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "assertDisabled",
  "description" : "Khẳng định rằng một phần tử đang ở trạng thái không thể tương tác (disabled). Phương thức này kiểm tra thuộc tính 'enabled' của phần tử và ném AssertionError nếu phần tử đang được kích hoạt (enabled). Hữu ích khi cần đảm bảo một nút hoặc trường nhập liệu đã bị vô hiệu hóa trong các trường hợp nhất định.",
  "category" : "Mobile",
  "subCategory" : "Assertion",
  "example" : "// Kiểm tra nút đăng nhập bị vô hiệu hóa khi chưa nhập thông tin\nmobileKeyword.assertDisabled(loginButton);\n\n// Với custom message\nmobileKeyword.assertDisabled(loginButton, \n    \"Nút đăng nhập phải bị vô hiệu hóa khi chưa nhập đầy đủ thông tin\");\n\n// Xác minh trường nhập số tiền bị vô hiệu hóa khi chọn số tiền cố định\nmobileKeyword.tap(fixedAmountOption);\nmobileKeyword.assertDisabled(amountInput, \n    \"Trường nhập số tiền phải bị vô hiệu hóa khi chọn số tiền cố định\");\n\n// Kiểm tra các button bị disable trong form\nmobileKeyword.assertDisabled(submitButton, \n    \"Nút gửi phải bị vô hiệu hóa khi form chưa hợp lệ\");\nmobileKeyword.assertDisabled(saveButton, \n    \"Nút lưu phải bị vô hiệu hóa khi không có thay đổi nào\");",
  "returnValue" : "void - Không trả về giá trị, ném AssertionError nếu kiểm tra thất bại",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Phần tử cần kiểm tra phải tồn tại và có thuộc tính 'enabled', và phải là loại có thể được kích hoạt/vô hiệu hóa (button, input, etc.). Có thể throw AssertionError nếu phần tử đang ở trạng thái được kích hoạt (enabled), NoSuchElementException nếu không tìm thấy phần tử, StaleElementReferenceException nếu phần tử không còn gắn với DOM, hoặc WebDriverException nếu không thể lấy thuộc tính 'enabled' của phần tử.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertDisabled",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra trạng thái"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "assertFalse",
  "description" : "Kiểm tra điều kiện là FALSE",
  "category" : "API",
  "subCategory" : "Assertion - General",
  "example" : "verify.assertFalse(hasError, \"Should not have error\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiAssert",
  "methodName" : "assertFalse",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "boolean",
    "name" : "condition",
    "description" : ""
  }, {
    "type" : "String[]",
    "name" : "message",
    "description" : ""
  } ]
}, {
  "name" : "getElementHeight",
  "description" : "Lấy và trả về chiều cao (height) của một đối tượng (tính bằng pixel).",
  "category" : "Web",
  "subCategory" : "Getter",
  "example" : "// Lấy chiều cao của một ô input\nint inputHeight = webKeyword.getElementHeight(UiObjectHelper.getObject(\"loginScreen/usernameInput\"));\nSystem.out.println(\"Chiều cao của ô input là: \" + inputHeight);",
  "returnValue" : "int - Chiều cao của đối tượng.",
  "note" : "Phần tử phải hiển thị trên trang để có chiều cao hợp lệ.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "getElementHeight",
  "returnType" : "int",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng cần lấy chiều cao"
  } ]
}, {
  "name" : "softAssertGreaterThan",
  "description" : "Kiểm tra giá trị thực tế có lớn hơn giá trị so sánh không. Nếu không, ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Assertion",
  "subCategory" : "Soft",
  "example" : "int productCount = web.getElementCount(\"productList\");\nassertion.softAssertGreaterThan(productCount, 0, \"Số lượng sản phẩm phải lớn hơn 0\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Tự động xử lý so sánh giữa số và chuỗi số. Lỗi sẽ được ghi nhận và test vẫn tiếp tục. **Phải gọi `assertAll()` ở cuối** để tổng hợp kết quả.",
  "className" : "com.vtnet.netat.core.keywords.AssertionKeyword",
  "methodName" : "softAssertGreaterThan",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "Object",
    "name" : "actualValue",
    "description" : "Giá trị thực tế (số hoặc chuỗi số)"
  }, {
    "type" : "Object",
    "name" : "expectedValue",
    "description" : "Giá trị so sánh"
  }, {
    "type" : "String[]",
    "name" : "message",
    "description" : "Thông điệp tùy chỉnh khi assertion fail"
  } ]
}, {
  "name" : "jsonPathIsNull",
  "description" : "Kiểm tra giá trị tại JSON path là NULL",
  "category" : "API",
  "subCategory" : "Assertion - JSON",
  "example" : "verify.jsonPathIsNull(response, \"$.deletedAt\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiAssert",
  "methodName" : "jsonPathIsNull",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ApiResponse",
    "name" : "response",
    "description" : ""
  }, {
    "type" : "String",
    "name" : "jsonPath",
    "description" : ""
  } ]
}, {
  "name" : "waitForElementClickable",
  "description" : "Chờ đợi một element trở nên clickable (có thể click được) trong khoảng thời gian chỉ định. Element phải đồng thời visible và enabled để được coi là clickable. Đây là điều kiện lý tưởng trước khi thực hiện click action.",
  "category" : "Mobile",
  "subCategory" : "Wait",
  "example" : "// Chờ button submit có thể click trong 15 giây\nmobileKeyword.waitForElementClickable(submitButton, 15);\nmobileKeyword.click(submitButton);\n\n// Chờ link navigation sẵn sàng click\nmobileKeyword.waitForElementClickable(navLink, 8);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "BEST PRACTICE: Luôn sử dụng method này trước khi click vào element để tránh ElementNotInteractableException. Element clickable = visible + enabled + không bị overlay che khuất.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "waitForElementClickable",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng UI element cần chờ đợi có thể click"
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa tính bằng giây"
  } ]
}, {
  "name" : "assertTextEquals",
  "description" : "Khẳng định rằng văn bản của một phần tử khớp chính xác với chuỗi mong đợi. Phương thức này trích xuất nội dung văn bản của phần tử và so sánh với giá trị mong đợi, ném AssertionError nếu không khớp. Hữu ích để kiểm tra nội dung văn bản, nhãn, thông báo lỗi hoặc các phần tử hiển thị khác.",
  "category" : "Mobile",
  "subCategory" : "Assertion",
  "example" : "// Kiểm tra tiêu đề màn hình\nmobileKeyword.assertTextEquals(title, \"Đăng nhập\");\n\n// Xác minh thông báo lỗi với custom message\nmobileKeyword.assertTextEquals(errorMessage, \"Email không hợp lệ\", \n    \"Thông báo lỗi phải hiển thị đúng nội dung khi email sai format\");\n\n// Kiểm tra label của các field\nmobileKeyword.assertTextEquals(usernameLabel, \"Tên đăng nhập\", \n    \"Label của trường username phải hiển thị đúng\");\nmobileKeyword.assertTextEquals(passwordLabel, \"Mật khẩu\", \n    \"Label của trường password phải hiển thị đúng\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Phần tử UI cần kiểm tra phải hiển thị và chứa văn bản. Có thể throw AssertionError nếu văn bản của phần tử không khớp với giá trị mong đợi, NoSuchElementException nếu không tìm thấy phần tử, hoặc StaleElementReferenceException nếu phần tử không còn gắn với DOM.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertTextEquals",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra văn bản"
  }, {
    "type" : "String",
    "name" : "expectedText",
    "description" : "Chuỗi văn bản mong đợi để so sánh"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "bodyIsEmpty",
  "description" : "Kiểm tra body RỖNG",
  "category" : "API",
  "subCategory" : "Assertion - Body",
  "example" : "verify.bodyIsEmpty(response);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiAssert",
  "methodName" : "bodyIsEmpty",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ApiResponse",
    "name" : "response",
    "description" : ""
  } ]
}, {
  "name" : "getElementWidth",
  "description" : "Lấy và trả về chiều rộng của một phần tử (tính bằng pixel). Hữu ích khi cần tính toán vị trí tương đối hoặc kiểm tra kích thước hiển thị của phần tử. Phương thức này trả về giá trị số nguyên đại diện cho chiều rộng theo pixel của phần tử. Lưu ý: Phần tử phải hiển thị trên màn hình để có thể lấy được kích thước chính xác.",
  "category" : "Mobile",
  "subCategory" : "Getter",
  "example" : "// Lấy chiều rộng của một nút\nint buttonWidth = mobileKeyword.getElementWidth(submitButton);\n\n// Kiểm tra xem banner có chiều rộng toàn màn hình không\nint bannerWidth = mobileKeyword.getElementWidth(promotionBanner);\nassert bannerWidth == DriverManager.getDriver().manage().window().getSize().width;",
  "returnValue" : "int - Chiều rộng của phần tử tính bằng pixel",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Phần tử cần đo phải tồn tại và hiển thị trên màn hình, và phải có kích thước xác định (không phải phần tử ẩn hoặc có kích thước 0). Có thể throw NoSuchElementException nếu không tìm thấy phần tử, StaleElementReferenceException nếu phần tử không còn gắn với DOM, hoặc WebDriverException nếu không thể lấy kích thước của phần tử.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "getElementWidth",
  "returnType" : "int",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần lấy chiều rộng"
  } ]
}, {
  "name" : "softAssertFalse",
  "description" : "Kiểm tra một điều kiện là false. Nếu là true, ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Assertion",
  "subCategory" : "Soft",
  "example" : "boolean isDisabled = web.getAttribute(\"myButton\", \"disabled\").equals(\"true\");\nassertion.softAssertFalse(isDisabled, \"Nút bấm không được phép bị vô hiệu hóa.\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Lỗi sẽ được ghi nhận và test vẫn tiếp tục. **Phải gọi `assertAll()` ở cuối** để tổng hợp kết quả.",
  "className" : "com.vtnet.netat.core.keywords.AssertionKeyword",
  "methodName" : "softAssertFalse",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "boolean",
    "name" : "condition",
    "description" : "Điều kiện cần kiểm tra"
  }, {
    "type" : "String[]",
    "name" : "message",
    "description" : "Thông điệp tùy chỉnh khi assertion fail"
  } ]
}, {
  "name" : "statusClientError",
  "description" : "Kiểm tra status code là 4xx (client error)",
  "category" : "API",
  "subCategory" : "Assertion - Status",
  "example" : "verify.statusClientError(response);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiAssert",
  "methodName" : "statusClientError",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ApiResponse",
    "name" : "response",
    "description" : ""
  } ]
}, {
  "name" : "removeAuthentication",
  "description" : "Xóa toàn bộ authentication đã setup",
  "category" : "API",
  "subCategory" : "Authentication",
  "example" : "api.removeAuthentication();",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiKeyword",
  "methodName" : "removeAuthentication",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "statusIn",
  "description" : "Kiểm tra status code nằm trong danh sách cho phép",
  "category" : "API",
  "subCategory" : "Assertion - Status",
  "example" : "verify.statusIn(response, \"200,201,204\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiAssert",
  "methodName" : "statusIn",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ApiResponse",
    "name" : "response",
    "description" : ""
  }, {
    "type" : "String",
    "name" : "allowedCodes",
    "description" : "Danh sách codes cách nhau bởi dấu phẩy (VD: 200,201,204)"
  } ]
}, {
  "name" : "takeElementScreenshot",
  "description" : "Chụp ảnh chỉ riêng một element cụ thể trên trang và lưu vào file tại đường dẫn được chỉ định.",
  "category" : "Web",
  "subCategory" : "Utility",
  "example" : "// Take element screenshot để Verify hiển thị\nwebKeyword.waitForElementVisible(loginFormObject, 10);\nwebKeyword.takeElementScreenshot(loginFormObject, \"D:/screenshots/login_form.png\");\n\n// Take element screenshot khi gặp lỗi hiển thị\nif (!webKeyword.verifyElementTextContains(errorMessageObject, \"Invalid credentials\")) {\n    webKeyword.takeElementScreenshot(errorMessageObject, \"D:/screenshots/error.png\");\n}",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần chụp phải hiển thị trên màn hình, thư mục đích phải tồn tại hoặc có quyền tạo thư mục. Có thể throw NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, ElementNotVisibleException nếu element không hiển thị, RuntimeException nếu không thể chụp hoặc lưu ảnh element, IOException nếu có lỗi khi ghi file, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "takeElementScreenshot",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần chụp ảnh"
  }, {
    "type" : "String",
    "name" : "filePath",
    "description" : "Đường dẫn đầy đủ để lưu file ảnh"
  } ]
}, {
  "name" : "selectRadioByValue",
  "description" : "Chọn một radio button (tag <input type=radio> cùng thuộc tính name) trong một nhóm các radio button dựa trên giá trị of thuộc tính 'value'.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Chọn radio button giới tính nữ\nwebKeyword.selectRadioByValue(genderRadioGroup, \"female\");\n\n// Chọn phương thức thanh toán\nwebKeyword.selectRadioByValue(paymentMethodRadioGroup, \"credit_card\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, nhóm radio button phải tồn tại trong DOM, ít nhất một radio button trong nhóm phải có thuộc tính 'value' khớp với giá trị cần chọn, và element phải hiển thị và có thể tương tác được. Có thể throw NoSuchElementException nếu không tìm thấy radio button với value chỉ định, ElementNotVisibleException nếu element không hiển thị trên trang, ElementNotInteractableException nếu element không thể tương tác, StaleElementReferenceException nếu element không còn gắn với DOM, TimeoutException nếu element không xuất hiện trong thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "selectRadioByValue",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đại diện cho nhóm radio button (ví dụ locator chung is '//input[@name=\"gender\"]')"
  }, {
    "type" : "String",
    "name" : "value",
    "description" : "Giá trị trong thuộc tính 'value' of radio button cần chọn"
  } ]
}, {
  "name" : "setRequestTimeout",
  "description" : "Thiết lập thời gian chờ tối đa (seconds)",
  "category" : "API",
  "subCategory" : "Configuration",
  "example" : "api.setRequestTimeout(30);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiKeyword",
  "methodName" : "setRequestTimeout",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "int",
    "name" : "timeoutSeconds",
    "description" : "Số giây chờ tối đa"
  } ]
}, {
  "name" : "tap",
  "description" : "Thực hiện một hành động chạm (tap) vào một phần tử trên màn hình. Đây là thao tác tương đương với click trên web nhưng được tối ưu cho thiết bị di động. Phương thức này sẽ đợi phần tử hiển thị và có thể tương tác trước khi thực hiện chạm.",
  "category" : "Mobile",
  "subCategory" : "Interaction",
  "example" : "// Chạm vào nút đăng nhập\nmobileKeyword.tap(loginButtonObject);\n\n// Chạm vào menu hamburger để mở navigation drawer\nmobileKeyword.tap(menuButton);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Phần tử UI cần tương tác phải hiển thị trên màn hình. Có thể throw ElementNotVisibleException nếu phần tử không hiển thị, NoSuchElementException nếu không tìm thấy phần tử, hoặc ElementNotInteractableException nếu phần tử không thể tương tác.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "tap",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần chạm vào"
  } ]
}, {
  "name" : "assertEnabled",
  "description" : "Khẳng định rằng một phần tử đang ở trạng thái có thể tương tác (enabled). Phương thức này kiểm tra thuộc tính 'enabled' của phần tử và ném AssertionError nếu phần tử bị vô hiệu hóa (disabled). Hữu ích khi cần đảm bảo một nút hoặc trường nhập liệu có thể tương tác được trước khi thực hiện các thao tác tiếp theo.",
  "category" : "Mobile",
  "subCategory" : "Assertion",
  "example" : "// Kiểm tra nút đăng nhập được kích hoạt sau khi nhập thông tin\nmobileKeyword.sendText(usernameInput, \"user@example.com\");\nmobileKeyword.sendText(passwordInput, \"password123\");\nmobileKeyword.assertEnabled(loginButton);\n\n// Với custom message\nmobileKeyword.assertEnabled(loginButton, \n    \"Nút đăng nhập phải được kích hoạt sau khi nhập đầy đủ thông tin\");\n\n// Xác minh nút tiếp tục được kích hoạt sau khi đồng ý điều khoản\nmobileKeyword.tap(agreeToTermsCheckbox);\nmobileKeyword.assertEnabled(continueButton, \n    \"Nút tiếp tục phải được kích hoạt sau khi đồng ý điều khoản\");\n\n// Kiểm tra các input field có thể nhập liệu\nmobileKeyword.assertEnabled(emailInput, \n    \"Trường email phải cho phép nhập liệu\");\nmobileKeyword.assertEnabled(phoneInput, \n    \"Trường số điện thoại phải cho phép nhập liệu\");",
  "returnValue" : "void - Không trả về giá trị, ném AssertionError nếu kiểm tra thất bại",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Phần tử cần kiểm tra phải tồn tại và có thuộc tính 'enabled', và phải là loại có thể được kích hoạt/vô hiệu hóa (button, input, etc.). Có thể throw AssertionError nếu phần tử đang ở trạng thái bị vô hiệu hóa (disabled), NoSuchElementException nếu không tìm thấy phần tử, StaleElementReferenceException nếu phần tử không còn gắn với DOM, hoặc WebDriverException nếu không thể lấy thuộc tính 'enabled' của phần tử.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertEnabled",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra trạng thái"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "findElements",
  "description" : "Tìm và trả về một danh sách (List) tất cả các element WebElement khớp với locator được cung cấp. Trả về danh sách rỗng nếu không tìm thấy, không ném ra exception.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Lấy danh sách tất cả các sản phẩm\nList<WebElement> productList = webKeyword.findElements(productListItemObject);\n\n// Đếm số lượng kết quả tìm kiếm\nint resultCount = webKeyword.findElements(searchResultObject).size();",
  "returnValue" : "List<WebElement> - Danh sách các element web khớp với locator, hoặc danh sách rỗng nếu không tìm thấy element nào",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và đối tượng ObjectUI phải có ít nhất một locator được định nghĩa. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình duyệt, InvalidSelectorException nếu locator không hợp lệ, hoặc NullPointerException nếu uiObject is null hoặc không có locator nào được kích hoạt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "findElements",
  "returnType" : "List",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng giao diện đại diện cho các element cần tìm"
  } ]
}, {
  "name" : "jsonPathContains",
  "description" : "Kiểm tra giá trị string chứa substring",
  "category" : "API",
  "subCategory" : "Assertion - JSON",
  "example" : "verify.jsonPathContains(response, \"$.message\", \"success\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiAssert",
  "methodName" : "jsonPathContains",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ApiResponse",
    "name" : "response",
    "description" : ""
  }, {
    "type" : "String",
    "name" : "jsonPath",
    "description" : ""
  }, {
    "type" : "String",
    "name" : "substring",
    "description" : ""
  } ]
}, {
  "name" : "tapAllElement",
  "description" : "Thực hiện thao tác tap vào mọi phần tử trong danh sách",
  "category" : "Mobile",
  "subCategory" : "Interaction",
  "example" : "mobileKeyword.tapAllElement(menuItems); // Tap vào mọi phần tử trong danh sách",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "tapAllElement",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "objectUI",
    "description" : "Đối tượng UI đại diện cho danh sách phần tử"
  } ]
}, {
  "name" : "lockDevice",
  "description" : "Khóa màn hình thiết bị trong khoảng thời gian chỉ định. Tự động phát hiện nền tảng (Android/iOS) và áp dụng phương thức khóa phù hợp.",
  "category" : "Mobile",
  "subCategory" : "System",
  "example" : "mobileKeyword.lockDevice(); // Khóa 1 giây\nmobileKeyword.lockDevice(5); // Khóa 5 giây",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "⚠️ LƯU Ý: Keyword này sẽ BLOCK thread trong thời gian khóa. Không nên sử dụng thời gian quá dài (>30s). Một số thiết bị có thể yêu cầu quyền đặc biệt để khóa màn hình.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "lockDevice",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "Integer[]",
    "name" : "seconds",
    "description" : "(Tùy chọn) Số giây giữ trạng thái khóa. Mặc định: 1 giây nếu không chỉ định."
  } ]
}, {
  "name" : "verifyElementVisibleHard",
  "description" : "Verify một element có đang hiển thị trên giao diện hay không. Nếu Verify thất bại (element không hiển thị như mong đợi), kịch bản sẽ DỪNG LẠI ngay lập tức.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify thông báo lỗi hiển thị sau khi gửi form không hợp lệ\nwebKeyword.click(submitButtonObject); // Gửi form trống\nwebKeyword.verifyElementVisibleHard(errorMessageObject, true);\n\n// Verify element không hiển thị sau khi đóng với custom message\nwebKeyword.click(closePopupButtonObject);\nwebKeyword.verifyElementVisibleHard(popupObject, false, \"Popup phải được đóng hoàn toàn\");\n\n// Verify element quan trọng phải hiển thị\nwebKeyword.verifyElementVisibleHard(loginButtonObject, true, \"Nút đăng nhập bắt buộc phải có\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và element cần Verify phải tồn tại trong DOM. Có thể throw AssertionError nếu trạng thái hiển thị của element không khớp với kỳ vọng, NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyElementVisibleHard",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần Verify"
  }, {
    "type" : "boolean",
    "name" : "isVisible",
    "description" : "Trạng thái hiển thị mong đợi (true cho hiển thị, false cho bị ẩn)"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "sendGetWithParams",
  "description" : "Gửi GET với query params từ JSON string (shortcut)",
  "category" : "API",
  "subCategory" : "Requests - Shortcuts",
  "example" : "ApiResponse response = api.sendGetWithParams(\"/users\", \"{\\\"page\\\":1,\\\"limit\\\":10}\");",
  "returnValue" : "ApiResponse",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiKeyword",
  "methodName" : "sendGetWithParams",
  "returnType" : "ApiResponse",
  "parameters" : [ {
    "type" : "String",
    "name" : "endpoint",
    "description" : ""
  }, {
    "type" : "String",
    "name" : "paramsJson",
    "description" : "VD: {\"page\":1,\"limit\":10}"
  } ]
}, {
  "name" : "getBody",
  "description" : "Lấy response body as string",
  "category" : "API",
  "subCategory" : "Response",
  "example" : "String body = api.getBody(response);",
  "returnValue" : "String - Response body",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiKeyword",
  "methodName" : "getBody",
  "returnType" : "String",
  "parameters" : [ {
    "type" : "ApiResponse",
    "name" : "response",
    "description" : ""
  } ]
}, {
  "name" : "assertElementEnabled",
  "description" : "Khẳng định rằng một element đang ở trạng thái có thể tương tác (enabled). Nếu element bị vô hiệu hóa (disabled), kịch bản sẽ DỪNG LẠI.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify nút gửi form đã được kích hoạt sau khi điền đầy đủ thông tin\nwebKeyword.sendKeys(nameInputObject, \"Nguyễn Văn A\");\nwebKeyword.sendKeys(emailInputObject, \"nguyenvana@example.com\");\nwebKeyword.click(termsCheckboxObject);\nwebKeyword.assertElementEnabled(submitButtonObject);\nwebKeyword.click(submitButtonObject);\n\n// Verify nút thanh toán đã được kích hoạt với custom message\nwebKeyword.click(creditCardOptionObject);\nwebKeyword.sendKeys(cardNumberInputObject, \"1234567890123456\");\nwebKeyword.assertElementEnabled(payNowButtonObject, \"Nút thanh toán phải được kích hoạt sau khi nhập thẻ\");\n\n// Verify button quan trọng phải enabled\nwebKeyword.assertElementEnabled(confirmOrderButtonObject, \"Nút xác nhận đơn hàng bắt buộc phải hoạt động\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và element cần Verify phải tồn tại trong DOM. Có thể throw AssertionError nếu element đang ở trạng thái disabled, NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "assertElementEnabled",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần Verify"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "waitForClickable",
  "description" : "Chờ cho đến khi một phần tử sẵn sàng để được chạm vào (clickable/tappable) hoặc cho đến khi hết thời gian chờ. Phần tử được coi là clickable khi nó hiển thị và có thể tương tác được (không bị disabled). Khác với waitForVisible, phương thức này còn kiểm tra khả năng tương tác của phần tử. Nếu phần tử không clickable sau khi hết thời gian chờ, một TimeoutException sẽ được ném ra.",
  "category" : "Mobile",
  "subCategory" : "Wait",
  "example" : "// Chờ nút có thể nhấn sau khi nhập thông tin\nmobileKeyword.waitForClickable(loginButton, 5);\nmobileKeyword.tap(loginButton);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Đã xác định chính xác phần tử UI cần chờ đợi. Có thể throw TimeoutException nếu phần tử không trở nên clickable trong thời gian chờ đợi, StaleElementReferenceException nếu phần tử không còn gắn với DOM, hoặc NoSuchElementException nếu không tìm thấy phần tử trong DOM.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "waitForClickable",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần chờ sẵn sàng để tương tác"
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian tối đa (giây) để chờ phần tử có thể tương tác"
  } ]
}, {
  "name" : "executeBatch",
  "description" : "Thực thi batch operations - insert/update nhiều records cùng lúc cho hiệu suất tốt hơn",
  "category" : "Database",
  "subCategory" : "Query Execution",
  "example" : "DatabaseKeyword db = new DatabaseKeyword();\n\n// Tạo list parameters cho batch insert\nList<Object[]> batchParams = new ArrayList<>();\nbatchParams.add(new Object[]{\"John Doe\", \"john@test.com\", \"active\"});\nbatchParams.add(new Object[]{\"Jane Smith\", \"jane@test.com\", \"active\"});\nbatchParams.add(new Object[]{\"Bob Johnson\", \"bob@test.com\", \"inactive\"});\n\n// Execute batch insert\nint[] results = db.executeBatch(\n    \"mysql-dev\",\n    \"INSERT INTO users (name, email, status) VALUES (?, ?, ?)\",\n    batchParams\n);\nSystem.out.println(\"Inserted \" + results.length + \" users\");\n\n// Batch update example\nList<Object[]> updates = new ArrayList<>();\nupdates.add(new Object[]{\"active\", 123});\nupdates.add(new Object[]{\"active\", 456});\nupdates.add(new Object[]{\"inactive\", 789});\n\nint[] updated = db.executeBatch(\n    \"mysql-dev\",\n    \"UPDATE users SET status = ? WHERE id = ?\",\n    updates\n);\n\n// Check individual results\nfor (int i = 0; i < updated.length; i++) {\n    System.out.println(\"Batch \" + i + \": \" + updated[i] + \" row(s) affected\");\n}",
  "returnValue" : "int[] - Mảng số lượng rows affected cho mỗi batch operation",
  "note" : "- Hiệu suất tốt hơn nhiều so với loop executeUpdate cho từng record\n- Nên dùng khi cần insert/update >= 10 records\n- Tất cả operations trong batch dùng chung 1 connection\n- Nếu 1 operation fail, các operation khác vẫn có thể thành công (tùy database)\n- Trả về mảng với length = số lượng batch operations",
  "className" : "com.vtnet.netat.db.keywords.DatabaseKeyword",
  "methodName" : "executeBatch",
  "returnType" : "int[]",
  "parameters" : [ {
    "type" : "String",
    "name" : "profileName",
    "description" : "Tên database profile đã cấu hình"
  }, {
    "type" : "String",
    "name" : "query",
    "description" : "Câu lệnh SQL với ? placeholders"
  }, {
    "type" : "List",
    "name" : "batchParams",
    "description" : "List các mảng parameters, mỗi mảng tương ứng với 1 execution"
  } ]
}, {
  "name" : "getConnectionPoolStats",
  "description" : "Lấy thống kê connection pool (size, active, idle, waiting threads)",
  "category" : "Database",
  "subCategory" : "Connection Management",
  "example" : "DatabaseKeyword db = new DatabaseKeyword();\n\n// Lấy và hiển thị pool stats\nMap<String, Object> stats = db.getConnectionPoolStats(\"mysql-dev\");\nSystem.out.println(\"Pool Size: \" + stats.get(\"poolSize\"));\nSystem.out.println(\"Active: \" + stats.get(\"activeConnections\"));\nSystem.out.println(\"Idle: \" + stats.get(\"idleConnections\"));\nSystem.out.println(\"Waiting: \" + stats.get(\"waitingThreads\"));\nSystem.out.println(\"Utilization: \" + stats.get(\"utilizationPercent\") + \"%\");\n\n// Check if pool is healthy\ndouble utilization = (Double) stats.get(\"utilizationPercent\");\nif (utilization > 80) {\n    System.out.println(\"⚠️  Warning: High pool utilization!\");\n} else if (utilization > 90) {\n    System.out.println(\"\uD83D\uDD25 Critical: Pool nearly exhausted!\");\n}\n\n// Monitor pool during load test\nfor (int i = 0; i < 100; i++) {\n    db.executeQuery(\"mysql-dev\", \"SELECT * FROM users LIMIT 10\");\n    \n    if (i % 10 == 0) {\n        Map<String, Object> currentStats = db.getConnectionPoolStats(\"mysql-dev\");\n        System.out.println(\"Iteration \" + i + \": \" + \n            currentStats.get(\"activeConnections\") + \"/\" + \n            currentStats.get(\"poolSize\") + \" active\");\n    }\n}",
  "returnValue" : "Map<String, Object> - Map chứa pool statistics (poolSize, activeConnections, idleConnections, waitingThreads, utilizationPercent)",
  "note" : "- Pool statistics sẽ được log tự động\n- Warning log nếu utilization > 80%\n- Hữu ích cho monitoring và capacity planning\n- Có thể integrate với monitoring tools (Prometheus, Grafana)",
  "className" : "com.vtnet.netat.db.keywords.DatabaseKeyword",
  "methodName" : "getConnectionPoolStats",
  "returnType" : "Map",
  "parameters" : [ {
    "type" : "String",
    "name" : "profileName",
    "description" : "Tên database profile đã cấu hình"
  } ]
}, {
  "name" : "resizeWindow",
  "description" : "Thay đổi kích thước of cửa sổ trình duyệt hiện tại theo chiều rộng và chiều cao được chỉ định.",
  "category" : "Web",
  "subCategory" : "Browser",
  "example" : "// Thay đổi kích thước cửa sổ thành HD (720p)\nwebKeyword.resizeWindow(1280, 720);\n\n// Mô phỏng kích thước màn hình tablet\nwebKeyword.resizeWindow(768, 1024);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, trình duyệt phải hỗ trợ thay đổi kích thước cửa sổ, và kích thước yêu cầu phải nằm trong giới hạn hợp lý (lớn hơn 0 và nhỏ hơn kích thước màn hình vật lý). Có thể throw WebDriverException nếu có lỗi khi tương tác với trình duyệt, NoSuchSessionException nếu phiên WebDriver không còn hợp lệ, UnsupportedOperationException nếu trình duyệt không hỗ trợ thay đổi kích thước, hoặc IllegalArgumentException nếu chiều rộng hoặc chiều cao is số âm.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "resizeWindow",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "int",
    "name" : "width",
    "description" : "Chiều rộng mới of cửa sổ (pixel)"
  }, {
    "type" : "int",
    "name" : "height",
    "description" : "Chiều cao mới of cửa sổ (pixel)"
  } ]
}, {
  "name" : "goForward",
  "description" : "Thực hiện hành động đi tới trang tiếp theo trong lịch sử of trình duyệt, tương đương với việc người dùng nhấn nút 'Forward'.",
  "category" : "Web",
  "subCategory" : "Browser",
  "example" : "// Điều hướng qua lại giữa các trang\nwebKeyword.openUrl(\"https://example.com/page1\");\nwebKeyword.openUrl(\"https://example.com/page2\");\nwebKeyword.goBack(); // Quay lại page1\nwebKeyword.goForward(); // Tiến tới page2 lần nữa\n\n// Verify luồng điều hướng\nwebKeyword.click(productLink);\nwebKeyword.goBack();\nwebKeyword.goForward();",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và phải đã sử dụng goBack() hoặc có trang tiếp theo trong lịch sử điều hướng. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình duyệt, hoặc NoSuchSessionException nếu phiên WebDriver không còn hợp lệ.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "goForward",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "refresh",
  "description" : "Tải lại trang hiện tại bằng JavaScript, cho phép tùy chọn bỏ qua bộ nhớ đệm (cache) để đảm bảo tất cả tài nguyên được tải lại từ máy chủ.",
  "category" : "Web",
  "subCategory" : "Browser",
  "example" : "// Kịch bản 1: Làm mới thông thường, tương đương F5\nwebKeyword.refresh(false);\n\n// Kịch bản 2: Buộc tải lại toàn bộ trang từ server, bỏ qua cache, tương đương Ctrl+F5\nwebKeyword.refresh(true);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Sử dụng 'hardRefresh = true' rất hữu ích sau khi deploy code mới hoặc khi bạn nghi ngờ lỗi giao diện là do cache của trình duyệt gây ra. Đây là keyword được khuyên dùng để đảm bảo tính ổn định trong môi trường CI/CD.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "refresh",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "boolean",
    "name" : "hardRefresh",
    "description" : ""
  } ]
}, {
  "name" : "softAssertContains",
  "description" : "Kiểm tra một chuỗi có chứa một chuỗi con hay không. Nếu không, ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Assertion",
  "subCategory" : "Soft",
  "example" : "String welcomeMsg = web.getText(\"welcomeLabel\");\nassertion.softAssertContains(welcomeMsg, \"Xin chào\", \"Thông điệp chào mừng không chứa text mong đợi\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Kiểm tra có phân biệt chữ hoa/thường. Lỗi sẽ được ghi nhận và test vẫn tiếp tục. **Phải gọi `assertAll()` ở cuối** để tổng hợp kết quả.",
  "className" : "com.vtnet.netat.core.keywords.AssertionKeyword",
  "methodName" : "softAssertContains",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "sourceText",
    "description" : "Chuỗi nguồn"
  }, {
    "type" : "String",
    "name" : "substring",
    "description" : "Chuỗi con cần tìm"
  }, {
    "type" : "String[]",
    "name" : "message",
    "description" : "Thông điệp tùy chỉnh khi assertion fail"
  } ]
}, {
  "name" : "startBrowser",
  "description" : "Khởi tạo và mở một phiên trình duyệt WEB cụ thể.",
  "category" : "Session",
  "subCategory" : "Lifecycle",
  "example" : "driverKeyword.startBrowser(\"firefox\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Keyword này chỉ dành cho các nền tảng Web. Để khởi động ứng dụng di động, vui lòng sử dụng 'startApplicationByPath' hoặc 'startApplicationByPackage'.",
  "className" : "com.vtnet.netat.core.keywords.DriverKeyword",
  "methodName" : "startBrowser",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "platform",
    "description" : "Tên nền tảng WEB cần khởi tạo (ví dụ: 'chrome', 'firefox')."
  } ]
}, {
  "name" : "startApplicationByPackage",
  "description" : "Khởi chạy một ứng dụng đã được cài đặt sẵn trên thiết bị bằng appPackage và appActivity.",
  "category" : "Session",
  "subCategory" : "Lifecycle",
  "example" : "driverKeyword.startApplicationByPackage(\"android\", \"com.android.settings\", \".Settings\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Keyword này chỉ dành cho các nền tảng Mobile. Để khởi động trình duyệt web, vui lòng sử dụng 'startBrowser'.",
  "className" : "com.vtnet.netat.core.keywords.DriverKeyword",
  "methodName" : "startApplicationByPackage",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "platformName",
    "description" : "Tên nền tảng di động ('android', 'ios')."
  }, {
    "type" : "String",
    "name" : "appPackage",
    "description" : "Tên package của ứng dụng."
  }, {
    "type" : "String",
    "name" : "appActivity",
    "description" : "Tên activity chính để khởi chạy."
  } ]
}, {
  "name" : "getPageTitle",
  "description" : "Lấy và trả về tiêu đề (title) of trang web hiện tại.",
  "category" : "Web",
  "subCategory" : "Getter",
  "example" : "// Verify tiêu đề trang sau khi điều hướng\nwebKeyword.navigateToUrl(\"https://example.com/about\");\nString pageTitle = webKeyword.getPageTitle();\nwebKeyword.verifyEqual(pageTitle, \"Về chúng tôi - Example Company\");\n\n// Verify tiêu đề trang sau khi tìm kiếm\nwebKeyword.sendKeys(searchInputObject, \"laptop\");\nwebKeyword.click(searchButtonObject);\nString searchResultTitle = webKeyword.getPageTitle();\nwebKeyword.verifyContains(searchResultTitle, \"Kết quả tìm kiếm\");",
  "returnValue" : "String - Tiêu đề of trang web hiện tại",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình duyệt, hoặc NoSuchSessionException nếu phiên WebDriver không còn hợp lệ.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "getPageTitle",
  "returnType" : "String",
  "parameters" : [ ]
}, {
  "name" : "waitForText",
  "description" : "Chờ cho đến khi văn bản của một phần tử khớp chính xác với chuỗi mong đợi hoặc cho đến khi hết thời gian chờ. Hữu ích khi cần đảm bảo nội dung đã được cập nhật đúng trước khi tiếp tục. Phương thức này kiểm tra chính xác nội dung văn bản, phân biệt chữ hoa/thường và khoảng trắng. Nếu văn bản không khớp sau khi hết thời gian chờ, một TimeoutException sẽ được ném ra.",
  "category" : "Mobile",
  "subCategory" : "Wait",
  "example" : "// Chờ trạng thái đơn hàng cập nhật\nmobileKeyword.waitForText(orderStatusLabel, \"Đã hoàn thành\", 15);\n\n// Chờ số dư tài khoản cập nhật sau giao dịch\nmobileKeyword.tap(transferButton);\nmobileKeyword.waitForText(balanceAmount, \"1,250,000 VND\", 10);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Phần tử cần kiểm tra phải có thuộc tính văn bản (text) và phải tồn tại trong DOM (có thể chưa hiển thị). Có thể throw TimeoutException nếu văn bản không khớp sau khi hết thời gian chờ, StaleElementReferenceException nếu phần tử không còn gắn với DOM trong quá trình chờ, hoặc NoSuchElementException nếu không tìm thấy phần tử trong DOM.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "waitForText",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra văn bản"
  }, {
    "type" : "String",
    "name" : "expectedText",
    "description" : "Văn bản mong đợi phải khớp chính xác"
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian tối đa (giây) để chờ văn bản khớp"
  } ]
}, {
  "name" : "waitForJavaScriptNotReturnsValue",
  "description" : "Chờ đợi JavaScript code thực thi và KHÔNG trả về giá trị chỉ định trong khoảng thời gian cho phép. Hữu ích cho việc chờ đợi các conditions không còn đúng nữa, states đã thay đổi, hoặc loading processes đã kết thúc.",
  "category" : "Web",
  "subCategory" : "Wait",
  "example" : "// Chờ loading flag không còn true\nwebKeyword.waitForJavaScriptNotReturnsValue(\"return window.isLoading\", true, 20);\n\n// Chờ error state được clear\nwebKeyword.waitForJavaScriptNotReturnsValue(\"return window.hasError\", true, 10);\n\n// Chờ AJAX calls không còn pending\nwebKeyword.waitForJavaScriptNotReturnsValue(\"return fetch.pending\", true, 30);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "NEGATIVE JS CONDITION: Thường dùng khi cần đảm bảo loading states đã kết thúc, error flags đã được clear, hoặc unwanted conditions không còn tồn tại. Complement của waitForJavaScriptReturnsValue.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "waitForJavaScriptNotReturnsValue",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "script",
    "description" : "JavaScript code cần thực thi"
  }, {
    "type" : "Object",
    "name" : "unwantedValue",
    "description" : "Giá trị mà script KHÔNG được trả về"
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa tính bằng giây"
  } ]
}, {
  "name" : "backgroundApp",
  "description" : "Đưa ứng dụng hiện tại về chạy nền trong một khoảng thời gian xác định, sau đó tự động đưa lại lên foreground. Hữu ích để kiểm tra khả năng lưu trữ và khôi phục trạng thái của ứng dụng, hoặc để mô phỏng việc người dùng tạm thời chuyển sang ứng dụng khác. Nếu thời gian là -1, ứng dụng sẽ ở chế độ nền cho đến khi được kích hoạt lại bằng activateApp.",
  "category" : "Mobile",
  "subCategory" : "AppLifecycle",
  "example" : "// Đưa ứng dụng về nền trong 5 giây để kiểm tra khả năng lưu trạng thái\nmobileKeyword.sendText(noteInput, \"Ghi chú quan trọng\");\nmobileKeyword.backgroundApp(5);\nmobileKeyword.assertTextEquals(noteInput, \"Ghi chú quan trọng\"); // Kiểm tra dữ liệu còn nguyên\n\n// Mô phỏng việc chuyển sang ứng dụng khác và quay lại\nmobileKeyword.backgroundApp(10);\n\n// Đưa ứng dụng về nền vô thời hạn và sau đó kích hoạt lại thủ công\nmobileKeyword.backgroundApp(-1);\n// Thực hiện các thao tác khác...\nmobileKeyword.activateApp(\"com.example.myapp\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Ứng dụng đang chạy ở foreground. Có thể throw WebDriverException nếu không thể đưa ứng dụng về background.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "backgroundApp",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "int",
    "name" : "seconds",
    "description" : "Số giây ứng dụng chạy nền. Sử dụng -1 để giữ ứng dụng ở nền vô thời hạn"
  } ]
}, {
  "name" : "findElements",
  "description" : "Tìm kiếm và trả về danh sách tất cả các phần tử WebElement khớp với locator được chỉ định. Trả về danh sách rỗng nếu không tìm thấy phần tử nào, không ném exception.",
  "category" : "Mobile",
  "subCategory" : "Interaction",
  "example" : "List<WebElement> productList = mobileKeyword.findElements(productListItemObject);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "findElements",
  "returnType" : "List",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng UI đại diện cho các phần tử cần tìm kiếm"
  } ]
}, {
  "name" : "assertElementSelected",
  "description" : "Khẳng định rằng một element (checkbox hoặc radio button) đang ở trạng thái được chọn. Nếu không, kịch bản sẽ DỪNG LẠI.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify checkbox \"Ghi nhớ đăng nhập\" được chọn\nwebKeyword.click(rememberMeCheckbox);\nwebKeyword.assertElementSelected(rememberMeCheckbox);\nwebKeyword.click(loginButtonObject);\n\n// Verify radio button phương thức thanh toán được chọn với custom message\nwebKeyword.click(creditCardRadioButton);\nwebKeyword.assertElementSelected(creditCardRadioButton, \n    \"Radio button thẻ tín dụng phải được chọn\");\nwebKeyword.sendKeys(cardNumberInputObject, \"1234567890123456\");\n\n// Verify checkbox điều khoản bắt buộc\nwebKeyword.assertElementSelected(termsCheckboxObject, \"Checkbox điều khoản phải được chọn\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần Verify phải tồn tại trong DOM và là checkbox hoặc radio button. Có thể throw AssertionError nếu element không ở trạng thái được chọn, NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, WebDriverException nếu có lỗi khi tương tác với trình duyệt, hoặc IllegalArgumentException nếu element không phải là checkbox hoặc radio button.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "assertElementSelected",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element checkbox hoặc radio button cần Verify"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "getCssValue",
  "description" : "Lấy giá trị of một thuộc tính CSS được áp dụng trên một element.",
  "category" : "Web",
  "subCategory" : "Getter",
  "example" : "// Lấy màu chữ of nút\nString buttonColor = webKeyword.getCssValue(buttonObject, \"color\");\nwebKeyword.verifyEqual(buttonColor, \"rgba(255, 255, 255, 1)\");\n\n// Verify kích thước font\nString fontSize = webKeyword.getCssValue(headingObject, \"font-size\");\nwebKeyword.verifyEqual(fontSize, \"24px\");",
  "returnValue" : "String - Giá trị of thuộc tính CSS được chỉ định",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần lấy giá trị CSS phải tồn tại trong DOM, và thuộc tính CSS cần lấy phải được áp dụng cho element (trực tiếp hoặc được kế thừa). Có thể throw NoSuchElementException nếu element không tồn tại, StaleElementReferenceException nếu element không còn gắn với DOM, TimeoutException nếu element không xuất hiện trong thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "getCssValue",
  "returnType" : "String",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần lấy giá trị CSS"
  }, {
    "type" : "String",
    "name" : "cssPropertyName",
    "description" : "Tên of thuộc tính CSS (ví dụ: 'color', 'font-size', 'background-color')"
  } ]
}, {
  "name" : "verifyAttributeContainsSoft",
  "description" : "Verify giá trị của một thuộc tính trên element có chứa một chuỗi con hay không. Nếu không chứa, kịch bản sẽ ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify thuộc tính style có chứa thông tin hiển thị\nwebKeyword.verifyAttributeContainsSoft(elementObject, \"style\", \"display: block\");\nwebKeyword.click(elementObject); // Tiếp tục thực hiện hành động\n\n// Verify nhiều thuộc tính của một element với custom message\nwebKeyword.verifyAttributeContainsSoft(buttonObject, \"class\", \"btn\", \n    \"Button nên có class chứa 'btn'\");\nwebKeyword.verifyAttributeContainsSoft(buttonObject, \"data-action\", \"submit\", \n    \"Button nên có data-action chứa 'submit'\");\nwebKeyword.click(buttonObject); // Tiếp tục thực hiện hành động",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần Verify phải tồn tại trong DOM, và thuộc tính cần Verify phải tồn tại trên element. Có thể throw NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyAttributeContainsSoft",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần Verify"
  }, {
    "type" : "String",
    "name" : "attribute",
    "description" : "Tên của thuộc tính (ví dụ: 'class')"
  }, {
    "type" : "String",
    "name" : "partialValue",
    "description" : "Chuỗi con mong đợi"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "setRequestBody",
  "description" : "Thiết lập request body từ string",
  "category" : "API",
  "subCategory" : "Body",
  "example" : "api.setRequestBody(\"{\\\"name\\\":\\\"John\\\"}\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiKeyword",
  "methodName" : "setRequestBody",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "bodyContent",
    "description" : "Nội dung body (JSON, XML, text...)"
  } ]
}, {
  "name" : "softAssertLessThan",
  "description" : "Kiểm tra giá trị thực tế có nhỏ hơn giá trị so sánh không. Nếu không, ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Assertion",
  "subCategory" : "Soft",
  "example" : "double discount = Double.parseDouble(web.getText(\"discountValue\"));\nassertion.softAssertLessThan(discount, 50.0, \"Giảm giá không được vượt quá 50%\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Tự động xử lý so sánh giữa số và chuỗi số. Lỗi sẽ được ghi nhận và test vẫn tiếp tục. **Phải gọi `assertAll()` ở cuối** để tổng hợp kết quả.",
  "className" : "com.vtnet.netat.core.keywords.AssertionKeyword",
  "methodName" : "softAssertLessThan",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "Object",
    "name" : "actualValue",
    "description" : "Giá trị thực tế"
  }, {
    "type" : "Object",
    "name" : "expectedValue",
    "description" : "Giá trị so sánh"
  }, {
    "type" : "String[]",
    "name" : "message",
    "description" : "Thông điệp tùy chỉnh khi assertion fail"
  } ]
}, {
  "name" : "assertNotEquals",
  "description" : "Khẳng định rằng hai giá trị không bằng nhau. Tự động xử lý so sánh giữa các kiểu dữ liệu khác nhau. Nếu chúng bằng nhau, kịch bản sẽ DỪNG LẠI.",
  "category" : "Assertion",
  "subCategory" : "HardAssert",
  "example" : "assertNotEquals(actualPassword, oldPassword);\nassertNotEquals(currentStatus, \"error\", \"Trạng thái không được là lỗi\");\nassertNotEquals(userRole, \"guest\", \"Vai trò người dùng không được là khách\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Keyword này so sánh giá trị sau khi đã chuyển đổi chúng sang dạng chuỗi ký tự.",
  "className" : "com.vtnet.netat.core.keywords.AssertionKeyword",
  "methodName" : "assertNotEquals",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "Object",
    "name" : "actualValue",
    "description" : "Giá trị thực tế"
  }, {
    "type" : "Object",
    "name" : "unexpectedValue",
    "description" : "Giá trị không mong muốn"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "extractJsonDouble",
  "description" : "Trích xuất số thực từ JSON",
  "category" : "API",
  "subCategory" : "Response - JSON",
  "example" : "double price = api.extractJsonDouble(response, \"$.price\");",
  "returnValue" : "double",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiKeyword",
  "methodName" : "extractJsonDouble",
  "returnType" : "double",
  "parameters" : [ {
    "type" : "ApiResponse",
    "name" : "response",
    "description" : ""
  }, {
    "type" : "String",
    "name" : "jsonPath",
    "description" : ""
  } ]
}, {
  "name" : "assertAttributeEquals",
  "description" : "Khẳng định rằng một thuộc tính của phần tử có giá trị chính xác như mong đợi. Hữu ích khi cần kiểm tra các thuộc tính đặc biệt như content-desc, resource-id, text, checked, v.v. Phương thức này so sánh chính xác giá trị thuộc tính, phân biệt chữ hoa/thường và khoảng trắng.",
  "category" : "Mobile",
  "subCategory" : "Assertion",
  "example" : "// Kiểm tra thuộc tính content-desc của nút\nmobileKeyword.assertAttributeEquals(menuButton, \"content-desc\", \"Menu chính\");\n\n// Với custom message\nmobileKeyword.assertAttributeEquals(menuButton, \"content-desc\", \"Menu chính\", \n    \"Content description của nút menu phải là 'Menu chính'\");\n\n// Xác minh resource-id của một phần tử\nmobileKeyword.assertAttributeEquals(loginButton, \"resource-id\", \n    \"com.example.myapp:id/login_button\", \n    \"Resource ID của nút đăng nhập phải đúng theo thiết kế\");\n\n// Kiểm tra thuộc tính text\nmobileKeyword.assertAttributeEquals(titleLabel, \"text\", \"Đăng nhập\", \n    \"Tiêu đề màn hình phải hiển thị 'Đăng nhập'\");\nmobileKeyword.assertAttributeEquals(submitButton, \"text\", \"Gửi\", \n    \"Text của nút submit phải là 'Gửi'\");",
  "returnValue" : "void - Không trả về giá trị, ném AssertionError nếu kiểm tra thất bại",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Phần tử cần kiểm tra phải tồn tại, thuộc tính cần kiểm tra phải tồn tại trên phần tử, và cần biết chính xác tên thuộc tính theo nền tảng (Android/iOS có thể khác nhau). Có thể throw AssertionError nếu giá trị thuộc tính không khớp với giá trị mong đợi, NoSuchElementException nếu không tìm thấy phần tử, StaleElementReferenceException nếu phần tử không còn gắn với DOM, hoặc WebDriverException nếu không thể lấy thuộc tính của phần tử.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertAttributeEquals",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra thuộc tính"
  }, {
    "type" : "String",
    "name" : "attributeName",
    "description" : "Tên thuộc tính cần kiểm tra (ví dụ: 'content-desc', 'text', 'resource-id')"
  }, {
    "type" : "String",
    "name" : "expectedValue",
    "description" : "Giá trị mong đợi của thuộc tính"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "getCurrentDateTime",
  "description" : "Lấy và trả về chuỗi ngày giờ hiện tại theo một định dạng cho trước. Sử dụng các mẫu định dạng chuẩn của Java như 'yyyy' cho năm, 'MM' cho tháng, 'dd' cho ngày, 'HH' cho giờ (24h), 'mm' cho phút và 'ss' cho giây.",
  "category" : "Utility",
  "subCategory" : "DateTime",
  "example" : "// Lấy ngày giờ hiện tại với định dạng yyyy-MM-dd_HH-mm-ss\nString timestamp = utilityKeyword.getCurrentDateTime(\"yyyy-MM-dd_HH-mm-ss\");\n// Kết quả có thể là: 2025-09-15_11-30-45",
  "returnValue" : "String - Chuỗi ngày giờ hiện tại theo định dạng được chỉ định",
  "note" : "Áp dụng cho tất cả nền tảng. Có thể throw IllegalArgumentException nếu định dạng ngày giờ không hợp lệ.",
  "className" : "com.vtnet.netat.core.keywords.UtilityKeyword",
  "methodName" : "getCurrentDateTime",
  "returnType" : "String",
  "parameters" : [ {
    "type" : "String",
    "name" : "dateTimeFormat",
    "description" : "Định dạng ngày giờ (ví dụ: 'dd/MM/yyyy HH:mm:ss')"
  } ]
}, {
  "name" : "findElementInShadowDom",
  "description" : "Tìm kiếm và trả về một element nằm bên trong một Shadow DOM. Yêu cầu cung cấp element chủ (shadow host) và một CSS selector để định vị element con.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Tìm và tương tác với element input trong Shadow DOM\nWebElement usernameInput = webKeyword.findElementInShadowDom(appContainerObject, \"#username\");\nusernameInput.sendKeys(\"admin@example.com\");\n\n// Tìm và click vào nút trong Shadow DOM\nWebElement submitButton = webKeyword.findElementInShadowDom(loginFormObject, \".submit-button\");\nsubmitButton.click();",
  "returnValue" : "WebElement - element web được tìm thấy inside Shadow DOM",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, trình duyệt hỗ trợ Shadow DOM (Chrome, Firefox mới), element chủ (host) phải tồn tại và có Shadow DOM đính kèm. Có thể throw NoSuchElementException nếu không tìm thấy element chủ hoặc element con, StaleElementReferenceException nếu element chủ không còn gắn với DOM, UnsupportedOperationException nếu trình duyệt không hỗ trợ Shadow DOM API, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "findElementInShadowDom",
  "returnType" : "WebElement",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "shadowHostObject",
    "description" : "element chủ (host) contains Shadow DOM"
  }, {
    "type" : "String",
    "name" : "cssSelectorInShadow",
    "description" : "Chuỗi CSS selector để Find element inside Shadow DOM"
  } ]
}, {
  "name" : "bodyNotEmpty",
  "description" : "Kiểm tra body KHÔNG RỖNG",
  "category" : "API",
  "subCategory" : "Assertion - Body",
  "example" : "verify.bodyNotEmpty(response);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiAssert",
  "methodName" : "bodyNotEmpty",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ApiResponse",
    "name" : "response",
    "description" : ""
  } ]
}, {
  "name" : "doubleClick",
  "description" : "Thực hiện hành động click chuột hai lần (double-click) vào một element.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Double-click vào biểu tượng chỉnh sửa\nwebKeyword.doubleClick(editIconObject);\nwebKeyword.waitForElementVisible(editFormObject);\n\n// Double-click để chọn toàn bộ text\nwebKeyword.doubleClick(textParagraphObject);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần double-click phải tồn tại trong DOM, phải hiển thị và có thể tương tác được, và không bị che khuất bởi các element khác. Có thể throw ElementNotVisibleException nếu element không hiển thị trên trang, ElementNotInteractableException nếu element không thể tương tác, StaleElementReferenceException nếu element không còn gắn với DOM, TimeoutException nếu element không xuất hiện trong thời gian chờ, WebDriverException nếu có lỗi khi tương tác với trình duyệt, hoặc MoveTargetOutOfBoundsException nếu element nằm ngoài viewport hiện tại.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "doubleClick",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần thực hiện double-click"
  } ]
}, {
  "name" : "acceptSystemDialog",
  "description" : "Tự động tìm và nhấn vào các nút hệ thống có văn bản khẳng định như 'Allow', 'OK', 'Accept', 'While using the app'. Hữu ích để xử lý các hộp thoại cấp quyền hoặc thông báo hệ thống. Phương thức sẽ tìm kiếm các nút phổ biến và nhấn vào nút đầu tiên tìm thấy. Nếu không tìm thấy nút nào, một cảnh báo sẽ được ghi vào log.",
  "category" : "Mobile",
  "subCategory" : "System",
  "example" : "// Chấp nhận hộp thoại yêu cầu quyền truy cập vị trí\nmobileKeyword.tap(locationButton);\nmobileKeyword.acceptSystemDialog();\n\n// Chấp nhận thông báo cập nhật ứng dụng\nmobileKeyword.acceptSystemDialog();",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Hộp thoại hệ thống đang hiển thị trên màn hình và chứa ít nhất một nút có văn bản khẳng định được hỗ trợ. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình điều khiển, hoặc NoSuchElementException nếu không tìm thấy nút nào khớp với danh sách văn bản đã cho.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "acceptSystemDialog",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "getTableColumns",
  "description" : "Lấy danh sách tất cả columns của table",
  "category" : "Database",
  "subCategory" : "Table Management",
  "example" : "DatabaseKeyword db = new DatabaseKeyword();\n\n// Lấy danh sách columns\nList<String> columns = db.getTableColumns(\"mysql-dev\", \"users\");\nSystem.out.println(\"Columns in users table:\");\nfor (String column : columns) {\n    System.out.println(\"  - \" + column);\n}\n\n// Check if column exists\nList<String> userColumns = db.getTableColumns(\"mysql-dev\", \"users\");\nif (userColumns.contains(\"email\")) {\n    System.out.println(\"✓ Email column exists\");\n}\n\n// Dynamic query building\nList<String> cols = db.getTableColumns(\"mysql-dev\", \"products\");\nString query = \"SELECT \" + String.join(\", \", cols) + \" FROM products\";\nList<Map<String, Object>> results = db.executeQuery(\"mysql-dev\", query);\n\n// Validate table structure\nList<String> expectedColumns = Arrays.asList(\"id\", \"name\", \"email\", \"created_at\");\nList<String> actualColumns = db.getTableColumns(\"mysql-dev\", \"users\");\nif (actualColumns.containsAll(expectedColumns)) {\n    System.out.println(\"✓ Table structure is correct\");\n} else {\n    System.out.println(\"✗ Missing columns\");\n}",
  "returnValue" : "List<String> - List tên các columns trong table",
  "note" : "- Sử dụng DatabaseMetaData để lấy column information\n- Trả về empty list nếu table không tồn tại\n- Column names được return theo thứ tự định nghĩa trong table\n- Hữu ích cho schema validation và dynamic query building",
  "className" : "com.vtnet.netat.db.keywords.DatabaseKeyword",
  "methodName" : "getTableColumns",
  "returnType" : "List",
  "parameters" : [ {
    "type" : "String",
    "name" : "profileName",
    "description" : "Tên database profile đã cấu hình"
  }, {
    "type" : "String",
    "name" : "tableName",
    "description" : "Tên table"
  } ]
}, {
  "name" : "swipe",
  "description" : "Thực hiện hành động vuốt trên màn hình từ điểm bắt đầu đến điểm kết thúc. Cho phép kiểm soát chính xác tọa độ bắt đầu, kết thúc và tốc độ vuốt. Tọa độ được tính theo pixel từ góc trên bên trái của màn hình (0,0).",
  "category" : "Mobile",
  "subCategory" : "Gesture",
  "example" : "// Vuốt từ giữa màn hình xuống dưới\nmobileKeyword.swipe(500, 100, 500, 1500, 300);\n\n// Vuốt từ phải sang trái\nmobileKeyword.swipe(900, 500, 100, 500, 200);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Có thể throw WebDriverException nếu không thể thực hiện hành động vuốt, hoặc IllegalArgumentException nếu tọa độ nằm ngoài kích thước màn hình.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "swipe",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "int",
    "name" : "startX",
    "description" : "Tọa độ X điểm bắt đầu vuốt"
  }, {
    "type" : "int",
    "name" : "startY",
    "description" : "Tọa độ Y điểm bắt đầu vuốt"
  }, {
    "type" : "int",
    "name" : "endX",
    "description" : "Tọa độ X điểm kết thúc vuốt"
  }, {
    "type" : "int",
    "name" : "endY",
    "description" : "Tọa độ Y điểm kết thúc vuốt"
  }, {
    "type" : "int",
    "name" : "durationInMs",
    "description" : "Thời gian thực hiện vuốt (ms), giá trị thấp hơn = vuốt nhanh hơn"
  } ]
}, {
  "name" : "tableExists",
  "description" : "Kiểm tra table có tồn tại trong database không",
  "category" : "Database",
  "subCategory" : "Table Management",
  "example" : "DatabaseKeyword db = new DatabaseKeyword();\n\n// Check table existence\nif (db.tableExists(\"mysql-dev\", \"users\")) {\n    System.out.println(\"✓ Table 'users' exists\");\n} else {\n    System.out.println(\"✗ Table 'users' does not exist\");\n}\n\n// Conditional table creation\nif (!db.tableExists(\"mysql-dev\", \"test_data\")) {\n    String createTable = \n        \"CREATE TABLE test_data (\" +\n        \"    id INT PRIMARY KEY AUTO_INCREMENT,\" +\n        \"    value VARCHAR(100)\" +\n        \")\";\n    db.executeUpdate(\"mysql-dev\", createTable);\n    System.out.println(\"✓ Table created\");\n}\n\n// Verify table after creation\ndb.executeScript(\"mysql-dev\", \"CREATE TABLE IF NOT EXISTS new_table (id INT)\");\nboolean created = db.tableExists(\"mysql-dev\", \"new_table\");\nSystem.out.println(\"Table created: \" + created);\n\n// Check multiple tables\nString[] requiredTables = {\"users\", \"orders\", \"products\"};\nboolean allExist = true;\nfor (String table : requiredTables) {\n    if (!db.tableExists(\"mysql-dev\", table)) {\n        System.out.println(\"Missing table: \" + table);\n        allExist = false;\n    }\n}\nif (allExist) {\n    System.out.println(\"✓ All required tables exist\");\n}",
  "returnValue" : "boolean - true nếu table tồn tại, false nếu không",
  "note" : "- Sử dụng DatabaseMetaData để check table existence\n- Case-sensitive trên một số databases (Linux MySQL)\n- Không throw exception, chỉ return true/false\n- Hữu ích cho pre-flight checks và conditional logic",
  "className" : "com.vtnet.netat.db.keywords.DatabaseKeyword",
  "methodName" : "tableExists",
  "returnType" : "boolean",
  "parameters" : [ {
    "type" : "String",
    "name" : "profileName",
    "description" : "Tên database profile đã cấu hình"
  }, {
    "type" : "String",
    "name" : "tableName",
    "description" : "Tên table cần check"
  } ]
}, {
  "name" : "getElementY",
  "description" : "Lấy và trả về tọa độ theo trục Y (dọc) của góc trên bên trái của một đối tượng.",
  "category" : "Web",
  "subCategory" : "Getter",
  "example" : "// Lấy tọa độ Y của một tiêu đề\nint titleY = webKeyword.getElementY(UiObjectHelper.getObject(\"homePage/mainTitle\"));\nSystem.out.println(\"Tiêu đề cách lề trên: \" + titleY + \"px\");",
  "returnValue" : "int - Tọa độ Y của đối tượng.",
  "note" : "Tọa độ được tính so với viewport (khung nhìn) hiện tại của trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "getElementY",
  "returnType" : "int",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng cần lấy tọa độ Y"
  } ]
}, {
  "name" : "selectByIndex",
  "description" : "Chọn một option (option) trong một element dropdown (thẻ <select>) dựa trên chỉ số of nó (bắt đầu từ 0).",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Chọn option thứ hai in dropdown quốc gia\nwebKeyword.selectByIndex(countryDropdownObject, 1); // Chỉ số bắt đầu từ 0\n\n// Chọn option đầu tiên in dropdown ngôn ngữ\nwebKeyword.selectByIndex(languageDropdownObject, 0);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element dropdown phải tồn tại trong DOM, phải is thẻ <select> hợp lệ, phải hiển thị và có thể tương tác được, và chỉ số phải nằm trong phạm vi hợp lệ (0 đến số lượng option - 1). Có thể throw NoSuchElementException nếu element dropdown không tồn tại, ElementNotVisibleException nếu element không hiển thị trên trang, ElementNotInteractableException nếu element không thể tương tác, StaleElementReferenceException nếu element không còn gắn với DOM, IndexOutOfBoundsException nếu chỉ số nằm ngoài phạm vi hợp lệ, UnexpectedTagNameException nếu element không phải is thẻ <select>, TimeoutException nếu element không xuất hiện trong thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "selectByIndex",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element dropdown (thẻ select)"
  }, {
    "type" : "int",
    "name" : "index",
    "description" : "Chỉ số of option cần chọn (ví dụ: 0 cho option đầu tiên)"
  } ]
}, {
  "name" : "statusSuccess",
  "description" : "Kiểm tra status code là 2xx (success)",
  "category" : "API",
  "subCategory" : "Assertion - Status",
  "example" : "verify.statusSuccess(response);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiAssert",
  "methodName" : "statusSuccess",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ApiResponse",
    "name" : "response",
    "description" : ""
  } ]
}, {
  "name" : "assertNull",
  "description" : "Kiểm tra giá trị là NULL",
  "category" : "API",
  "subCategory" : "Assertion - General",
  "example" : "verify.assertNull(deletedValue);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiAssert",
  "methodName" : "assertNull",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "Object",
    "name" : "object",
    "description" : ""
  } ]
}, {
  "name" : "rollbackTransaction",
  "description" : "Rollback transaction hiện tại, hủy bỏ tất cả thay đổi",
  "category" : "Database",
  "subCategory" : "Transaction",
  "example" : "DatabaseKeyword db = new DatabaseKeyword();\n\n// Rollback on error\ndb.beginTransaction(\"mysql-dev\");\ntry {\n    db.executeUpdate(\n        \"mysql-dev\",\n        \"UPDATE accounts SET balance = balance - ? WHERE id = ?\",\n        1000.0,\n        1\n    );\n    \n    // Check balance\n    Object balance = db.getScalarValue(\n        \"mysql-dev\",\n        \"SELECT balance FROM accounts WHERE id = ?\",\n        1\n    );\n    \n    if (((Number) balance).doubleValue() < 0) {\n        db.rollbackTransaction(\"mysql-dev\", \"Insufficient balance\");\n        System.out.println(\"✗ Transaction cancelled: Insufficient funds\");\n        return;\n    }\n    \n    db.executeUpdate(\n        \"mysql-dev\",\n        \"UPDATE accounts SET balance = balance + ? WHERE id = ?\",\n        1000.0,\n        2\n    );\n    \n    db.commitTransaction(\"mysql-dev\");\n} catch (Exception e) {\n    db.rollbackTransaction(\"mysql-dev\", \"Error: \" + e.getMessage());\n    System.err.println(\"✗ Transaction rolled back due to error\");\n}\n\n// Manual rollback for business logic\ndb.beginTransaction(\"mysql-dev\");\ndb.executeUpdate(\"mysql-dev\", \"INSERT INTO temp_data VALUES (?)\", \"test\");\n// Decide to cancel\ndb.rollbackTransaction(\"mysql-dev\", \"Manual cancellation\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "- Tất cả thay đổi trong transaction sẽ bị hủy bỏ\n- Connection sẽ được đóng và remove khỏi ThreadLocal\n- Auto-commit sẽ được bật lại sau khi rollback\n- Throw IllegalStateException nếu không có active transaction\n- Reason parameter sẽ được log để track lý do rollback",
  "className" : "com.vtnet.netat.db.keywords.DatabaseKeyword",
  "methodName" : "rollbackTransaction",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "profileName",
    "description" : "Tên database profile đã cấu hình"
  }, {
    "type" : "String[]",
    "name" : "reason",
    "description" : "Lý do rollback (tùy chọn, dùng cho logging)"
  } ]
}, {
  "name" : "startBrowserSession",
  "description" : "Khởi tạo nhanh một phiên làm việc trên trình duyệt web bằng cách cung cấp thông tin trực tiếp.",
  "category" : "Driver",
  "subCategory" : "Session",
  "example" : "// Bắt đầu nhanh một phiên trên Firefox cho User B\ndriver.startBrowserSession(\"user_B_ff\", \"firefox\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Hữu ích cho các kịch bản test nhanh hoặc khi không muốn tạo file profile. Sử dụng 'switchSession' để điều khiển phiên này.",
  "className" : "com.vtnet.netat.core.keywords.DriverKeyword",
  "methodName" : "startSession",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "sessionName",
    "description" : "Tên định danh duy nhất cho phiên làm việc này (ví dụ: 'user_A')"
  }, {
    "type" : "String",
    "name" : "browserName",
    "description" : "Tên trình duyệt cần khởi động (ví dụ: 'chrome', 'firefox', 'edge')"
  } ]
}, {
  "name" : "waitForElementTextNotContains",
  "description" : "Chờ đợi text của element KHÔNG chứa substring chỉ định trong khoảng thời gian cho phép. Thực hiện negative partial matching, hữu ích cho validation rằng nội dung đã được xóa, thay đổi, hoặc error messages đã biến mất.",
  "category" : "Web",
  "subCategory" : "Wait",
  "example" : "// Chờ error message không còn chứa 'Error'\nwebKeyword.waitForElementTextNotContains(messageDiv, \"Error\", 10);\n\n// Chờ loading text biến mất\nwebKeyword.waitForElementTextNotContains(statusLabel, \"Loading\", 15);\n\n// Validation content đã được update\nwebKeyword.waitForElementTextNotContains(titleElement, \"Draft\", 8);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "NEGATIVE VALIDATION: Hữu ích khi cần đảm bảo error messages biến mất, loading text được thay thế, hoặc unwanted content không còn xuất hiện. Thường dùng sau cleanup actions hoặc content updates.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "waitForElementTextNotContains",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng UI element cần kiểm tra text content"
  }, {
    "type" : "String",
    "name" : "unwantedText",
    "description" : "Substring mà text của element KHÔNG được chứa"
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa tính bằng giây"
  } ]
}, {
  "name" : "beginTransaction",
  "description" : "Bắt đầu một transaction với isolation level tùy chọn",
  "category" : "Database",
  "subCategory" : "Transaction",
  "example" : "DatabaseKeyword db = new DatabaseKeyword();\n\n// Begin transaction với default isolation (READ_COMMITTED)\ndb.beginTransaction(\"mysql-dev\");\ntry {\n    db.executeUpdate(\n        \"mysql-dev\",\n        \"UPDATE accounts SET balance = balance - ? WHERE id = ?\",\n        100.0,\n        1\n    );\n    db.executeUpdate(\n        \"mysql-dev\",\n        \"UPDATE accounts SET balance = balance + ? WHERE id = ?\",\n        100.0,\n        2\n    );\n    db.commitTransaction(\"mysql-dev\");\n    System.out.println(\"✓ Transaction committed successfully\");\n} catch (Exception e) {\n    db.rollbackTransaction(\"mysql-dev\", \"Error: \" + e.getMessage());\n    System.out.println(\"✗ Transaction rolled back\");\n}\n\n// Begin transaction với specific isolation level\ndb.beginTransaction(\"mysql-dev\", \"SERIALIZABLE\");\ntry {\n    // Critical operations requiring highest isolation\n    db.executeUpdate(\"mysql-dev\", \"UPDATE inventory SET stock = stock - 1 WHERE id = ?\", 123);\n    db.commitTransaction(\"mysql-dev\");\n} catch (Exception e) {\n    db.rollbackTransaction(\"mysql-dev\");\n}",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "- Connection sẽ được lưu trong ThreadLocal cho các operations tiếp theo\n- Auto-commit sẽ bị tắt cho đến khi commit hoặc rollback\n- Phải gọi commitTransaction hoặc rollbackTransaction để kết thúc transaction\n- Isolation levels: READ_UNCOMMITTED (lowest), READ_COMMITTED (default), REPEATABLE_READ, SERIALIZABLE (highest)\n- Nên sử dụng try-catch-finally để đảm bảo transaction được close",
  "className" : "com.vtnet.netat.db.keywords.DatabaseKeyword",
  "methodName" : "beginTransaction",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "profileName",
    "description" : "Tên database profile đã cấu hình"
  }, {
    "type" : "String[]",
    "name" : "isolationLevel",
    "description" : "Isolation level (tùy chọn): READ_UNCOMMITTED, READ_COMMITTED, REPEATABLE_READ, SERIALIZABLE. Default: READ_COMMITTED"
  } ]
}, {
  "name" : "sendPostWithJson",
  "description" : "Gửi POST với JSON body (shortcut - 1 step)",
  "category" : "API",
  "subCategory" : "Requests - Shortcuts",
  "example" : "ApiResponse response = api.sendPostWithJson(\"/users\", \"{\\\"name\\\":\\\"John\\\"}\");",
  "returnValue" : "ApiResponse",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiKeyword",
  "methodName" : "sendPostWithJson",
  "returnType" : "ApiResponse",
  "parameters" : [ {
    "type" : "String",
    "name" : "endpoint",
    "description" : "Endpoint URL"
  }, {
    "type" : "String",
    "name" : "jsonBody",
    "description" : "JSON string"
  } ]
}, {
  "name" : "clickElementByIndex",
  "description" : "Click vào một element cụ thể trong một danh sách các element dựa trên chỉ số (index) of nó (bắt đầu từ 0).",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Click vào kết quả tìm kiếm thứ 3\nwebKeyword.clickElementByIndex(searchResultLinks, 2); // Index bắt đầu từ 0\n\n// Click vào mục đầu tiên trong danh sách\nwebKeyword.clickElementByIndex(menuItems, 0);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, danh sách element phải tồn tại trong DOM, chỉ số phải nằm trong phạm vi hợp lệ (0 đến số lượng element - 1), và element tại chỉ số cần click phải hiển thị và có thể tương tác được. Có thể throw IndexOutOfBoundsException nếu chỉ số nằm ngoài phạm vi hợp lệ, ElementNotVisibleException nếu element không hiển thị trên trang, ElementNotInteractableException nếu element không thể tương tác, StaleElementReferenceException nếu element không còn gắn với DOM, TimeoutException nếu element không xuất hiện trong thời gian chờ, WebDriverException nếu có lỗi khi tương tác với trình duyệt, hoặc NoSuchElementException nếu danh sách element không tồn tại.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "clickElementByIndex",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng giao diện đại diện cho danh sách element"
  }, {
    "type" : "int",
    "name" : "index",
    "description" : "Vị trí of element cần click (0 cho element đầu tiên)"
  } ]
}, {
  "name" : "verifyUrlSoft",
  "description" : "So sánh URL của trang hiện tại với một chuỗi mong đợi. Nếu không khớp, kịch bản sẽ ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify URL trong quy trình nhiều bước\nwebKeyword.click(nextButtonObject);\nwebKeyword.waitForPageLoaded(10);\nwebKeyword.verifyUrlSoft(\"https://example.com/checkout/step1\");\nwebKeyword.fillCheckoutForm(); // Tiếp tục quy trình ngay cả khi URL không đúng\n\n// Verify nhiều điều kiện bao gồm URL với custom message\nwebKeyword.verifyElementVisibleSoft(pageHeaderObject, true);\nwebKeyword.verifyUrlSoft(\"https://example.com/products\", \"Trang sản phẩm không load đúng URL\");\nwebKeyword.click(firstProductObject); // Tiếp tục thực hiện hành động\n\n// Verify URL trong flow navigation\nwebKeyword.verifyUrlSoft(\"https://example.com/profile\", \"URL trang profile không chính xác\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và trang web đã hoàn thành quá trình tải. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyUrlSoft",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "expectedUrl",
    "description" : "URL đầy đủ mong đợi"
  }, {
    "type" : "String[]",
    "name" : "customMessage",
    "description" : "Thông báo tùy chỉnh khi assertion thất bại"
  } ]
}, {
  "name" : "headerEquals",
  "description" : "Kiểm tra giá trị header",
  "category" : "API",
  "subCategory" : "Assertion - Headers",
  "example" : "verify.headerEquals(response, \"Content-Type\", \"application/json\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.api.keywords.ApiAssert",
  "methodName" : "headerEquals",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ApiResponse",
    "name" : "response",
    "description" : ""
  }, {
    "type" : "String",
    "name" : "headerName",
    "description" : ""
  }, {
    "type" : "String",
    "name" : "expectedValue",
    "description" : ""
  } ]
}, {
  "name" : "modifyDateTime",
  "description" : "Thực hiện cộng hoặc trừ một khoảng thời gian (ngày, tháng, năm...) vào một mốc thời gian gốc và trả về kết quả dưới dạng chuỗi đã được định dạng.",
  "category" : "Utility",
  "subCategory" : "DateTime",
  "example" : "// Lấy ngày của 7 ngày sau kể từ hôm nay\nutilityKeyword.modifyDateTime(\"NOW\", \"\", 7, \"DAYS\", \"dd/MM/yyyy\");\n\n// Lấy ngày của 3 tháng trước ngày '15/09/2025'\nutilityKeyword.modifyDateTime(\"15/09/2025\", \"dd/MM/yyyy\", -3, \"MONTHS\", \"dd/MM/yyyy\");",
  "returnValue" : "String|Chuỗi ngày giờ mới sau khi đã tính toán, được định dạng theo outputFormat.",
  "note" : "Tham số 'unit' không phân biệt chữ hoa/thường. Nếu định dạng ngày tháng đầu vào không chính xác, keyword sẽ gây ra lỗi.",
  "className" : "com.vtnet.netat.core.keywords.UtilityKeyword",
  "methodName" : "modifyDateTime",
  "returnType" : "String",
  "parameters" : [ {
    "type" : "String",
    "name" : "baseDateTimeString",
    "description" : "Mốc thời gian gốc dưới dạng chuỗi, hoặc điền 'NOW' để sử dụng thời gian hiện tại."
  }, {
    "type" : "String",
    "name" : "inputFormat",
    "description" : "Định dạng của mốc thời gian gốc (ví dụ: 'dd/MM/yyyy'). Bỏ trống nếu mốc thời gian gốc là 'NOW'."
  }, {
    "type" : "int",
    "name" : "amount",
    "description" : "Số lượng đơn vị thời gian cần cộng (số dương) hoặc trừ (số âm)."
  }, {
    "type" : "String",
    "name" : "unit",
    "description" : "Đơn vị thời gian. Hỗ trợ: YEARS, MONTHS, DAYS, HOURS, MINUTES, SECONDS."
  }, {
    "type" : "String",
    "name" : "outputFormat",
    "description" : "Định dạng mong muốn cho chuỗi kết quả trả về."
  } ]
}, {
  "name" : "switchSession",
  "description" : "Chuyển quyền điều khiển sang một phiên làm việc đã được khởi tạo. Tất cả các keyword UI sau lệnh này sẽ được thực thi trên phiên được chỉ định.",
  "category" : "Driver",
  "subCategory" : "Session",
  "example" : "// Sau khi User A gửi tin nhắn, chuyển sang User B để kiểm tra\ndriver.switchSession(\"user_B_ff\");\nweb.waitForElementVisible(\"notificationPopup\", 15);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Đây là keyword then chốt để điều khiển nhiều người dùng trong cùng một kịch bản.",
  "className" : "com.vtnet.netat.core.keywords.DriverKeyword",
  "methodName" : "switchSession",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "sessionName",
    "description" : "Tên của phiên làm việc cần chuyển đến"
  } ]
}, {
  "name" : "clearLocalStorage",
  "description" : "Xóa toàn bộ dữ liệu đang được lưu trữ trong Local Storage of trang web hiện tại.",
  "category" : "Web",
  "subCategory" : "Storage",
  "example" : "// Đăng xuất và xóa dữ liệu người dùng\nwebKeyword.click(logoutButtonObject);\nwebKeyword.clearLocalStorage();\nwebKeyword.navigate(\"https://example.com/login\");\n\n// Xóa dữ liệu trước khi chạy kiểm thử\nwebKeyword.navigate(\"https://example.com\");\nwebKeyword.clearLocalStorage();\nwebKeyword.refreshPage();",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, trang web đã được tải hoàn toàn, trình duyệt hỗ trợ Local Storage. Có thể throw JavascriptException nếu có lỗi khi thực thi JavaScript, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "clearLocalStorage",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "waitForElementAttributeNotToBe",
  "description" : "Chờ đợi attribute của element KHÔNG có giá trị chỉ định trong khoảng thời gian cho phép. Hữu ích cho validation rằng attributes đã thay đổi khỏi trạng thái trước đó, như disabled thành enabled, loading class bị remove.",
  "category" : "Web",
  "subCategory" : "Wait",
  "example" : "// Chờ button không còn disabled\nwebKeyword.waitForElementAttributeNotToBe(submitBtn, \"disabled\", \"true\", 10);\n\n// Chờ loading class bị remove\nwebKeyword.waitForElementAttributeNotToBe(container, \"class\", \"loading\", 15);\n\n// Chờ error state được clear\nwebKeyword.waitForElementAttributeNotToBe(inputField, \"data-error\", \"true\", 8);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "NEGATIVE ATTRIBUTE CHECK: Thường dùng khi cần đảm bảo element đã thay đổi state, như từ disabled sang enabled, loading class đã bị remove, hoặc error states đã được clear.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "waitForElementAttributeNotToBe",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng UI element cần kiểm tra attribute"
  }, {
    "type" : "String",
    "name" : "attributeName",
    "description" : "Tên attribute cần kiểm tra"
  }, {
    "type" : "String",
    "name" : "unwantedValue",
    "description" : "Giá trị mà attribute KHÔNG được có"
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa tính bằng giây"
  } ]
}, {
  "name" : "pressKeys",
  "description" : "Gửi một chuỗi ký tự hoặc một tổ hợp phím (ví dụ: Ctrl+C, Enter) tới element đang được focus trên trình duyệt.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Gửi tổ hợp phím Ctrl + A để chọn tất cả\nwebKeyword.pressKeys(Keys.CONTROL, \"a\");\n\n// Gửi phím Enter để xác nhận form\nwebKeyword.sendKeys(searchInputObject, \"laptop\");\nwebKeyword.pressKeys(Keys.ENTER);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần nhận tổ hợp phím phải đang được focus, trình duyệt phải hỗ trợ các tổ hợp phím được sử dụng, và các phím đặc biệt phải được định nghĩa trong org.openqa.selenium.Keys. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình duyệt, NoSuchSessionException nếu phiên WebDriver không còn hợp lệ, UnsupportedOperationException nếu trình duyệt không hỗ trợ thao tác phím được yêu cầu, hoặc IllegalArgumentException nếu tham số keys không hợp lệ.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "pressKeys",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "CharSequence[]",
    "name" : "keys",
    "description" : "Một hoặc nhiều chuỗi ký tự hoặc phím đặc biệt từ org.openqa.selenium.Keys"
  } ]
} ]