[ {
  "name" : "switchToWindowByIndex",
  "description" : "Chuyển sự điều khiển of WebDriver sang một tab hoặc cửa sổ khác dựa trên chỉ số (index) of nó (bắt đầu từ 0).",
  "category" : "Web",
  "subCategory" : "Window&Frame",
  "example" : "// Mở liên kết within tab mới và chuyển sang tab đó\nwebKeyword.rightClickAndSelect(productLinkObject, \"Mở within tab mới\");\nwebKeyword.switchToWindowByIndex(1); // Chuyển sang tab thứ hai\n\n// Quay lại tab chính sau khi hoàn thành\nwebKeyword.switchToWindowByIndex(0);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, có đủ số lượng cửa sổ/tab đang mở để chuyển đến chỉ số được chỉ định. Có thể throw IndexOutOfBoundsException nếu chỉ số nằm ngoài phạm vi of số lượng cửa sổ/tab đang mở, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "switchToWindowByIndex",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "int",
    "name" : "index",
    "description" : "Chỉ số of cửa sổ/tab cần chuyển đến (0 is cửa sổ đầu tiên)"
  } ]
}, {
  "name" : "assertElementDisabled",
  "description" : "Khẳng định rằng một element đang ở trạng thái không thể tương tác (disabled). Nếu element đang enabled, kịch bản sẽ DỪNG LẠI.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify nút gửi form bị vô hiệu hóa khi chưa điền thông tin bắt buộc\nwebKeyword.navigateToUrl(\"https://example.com/registration\");\nwebKeyword.waitForPageLoaded(10);\nwebKeyword.assertElementDisabled(submitButtonBeforeFillForm);\n\n// Verify nút thanh toán bị vô hiệu hóa khi chưa chọn phương thức thanh toán\nwebKeyword.click(checkoutButtonObject);\nwebKeyword.waitForPageLoaded(15);\nwebKeyword.assertElementDisabled(paymentButtonObject);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và element cần Verify phải tồn tại within DOM. Có thể throw AssertionError nếu element đang ở trạng thái enabled, NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "assertElementDisabled",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần Verify"
  } ]
}, {
  "name" : "tapElementByIndex",
  "description" : "Thực hiện thao tác tap vào một phần tử cụ thể trong danh sách dựa trên chỉ số (index). Chỉ số bắt đầu từ 0. Ném IndexOutOfBoundsException nếu index không hợp lệ.",
  "category" : "Mobile",
  "subCategory" : "Interaction",
  "example" : "mobileKeyword.tapElementByIndex(menuItems, 2); // Tap vào phần tử thứ 3 trong danh sách",
  "returnValue" : "void|No return value",
  "note" : "",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "tapElementByIndex",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng UI đại diện cho danh sách phần tử"
  }, {
    "type" : "int",
    "name" : "index",
    "description" : "Vị trí của phần tử cần tap (bắt đầu từ 0)"
  } ]
}, {
  "name" : "switchToWindowByTitle",
  "description" : "Duyệt qua tất cả các cửa sổ hoặc tab đang mở và chuyển sự điều khiển of WebDriver sang cửa sổ/tab có tiêu đề khớp chính xác với chuỗi được cung cấp.",
  "category" : "Web",
  "subCategory" : "Window&Frame",
  "example" : "// Chuyển sang tab chi tiết sản phẩm\nwebKeyword.click(viewDetailsLinkObject); // Mở tab mới\nwebKeyword.switchToWindowByTitle(\"Chi tiết sản phẩm ABC\");\n\n// Chuyển sang tab thanh toán\nwebKeyword.click(checkoutButtonObject);\nwebKeyword.switchToWindowByTitle(\"Thanh toán đơn hàng\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, có ít nhất một cửa sổ/tab đang mở với tiêu đề cần chuyển đến. Có thể throw NoSuchWindowException nếu không tìm thấy cửa sổ nào có tiêu đề được chỉ định, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "switchToWindowByTitle",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "windowTitle",
    "description" : "Tiêu đề chính xác of cửa sổ hoặc tab cần chuyển đến"
  } ]
}, {
  "name" : "deleteAllCookies",
  "description" : "Xóa tất cả các cookie of phiên làm việc hiện tại trên trình duyệt.",
  "category" : "Web",
  "subCategory" : "Storage",
  "example" : "// Đăng xuất và xóa cookies\nwebKeyword.click(logoutButtonObject);\nwebKeyword.deleteAllCookies();\nwebKeyword.navigate(\"https://example.com/login\");\n\n// Thiết lập lại trạng thái trình duyệt\nwebKeyword.deleteAllCookies();\nwebKeyword.clearLocalStorage();\nwebKeyword.navigate(\"https://example.com\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "deleteAllCookies",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "verifyElementVisibleHard",
  "description" : "Verify một element có đang hiển thị trên giao diện hay không. Nếu Verify thất bại (element không hiển thị như mong đợi), kịch bản sẽ DỪNG LẠI ngay lập tức.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify thông báo lỗi hiển thị sau khi gửi form không hợp lệ\nwebKeyword.click(submitButtonObject); // Gửi form trống\nwebKeyword.verifyElementVisibleHard(errorMesssageObject, true);\n\n// Verify element không hiển thị sau khi đóng\nwebKeyword.click(closePopupButtonObject);\nwebKeyword.verifyElementVisibleHard(popupObject, false);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và element cần Verify phải tồn tại within DOM. Có thể throw AssertionError nếu trạng thái hiển thị of element không khớp với kỳ vọng, NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyElementVisibleHard",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần Verify"
  }, {
    "type" : "boolean",
    "name" : "isVisible",
    "description" : "Trạng thái hiển thị mong đợi (true cho hiển thị, false cho bị ẩn)"
  } ]
}, {
  "name" : "Get Current App Package",
  "description" : "Lấy appPackage (Android) hoặc bundleId (iOS) của ứng dụng hiện tại đang được test",
  "category" : "Mobile",
  "subCategory" : "Applifecycle",
  "example" : "String packageName = getCurrentAppPackage();",
  "returnValue" : "String - Package name của ứng dụng Android hoặc bundle ID của ứng dụng iOS",
  "note" : "Keyword này hoạt động trên cả Android và iOS. Trên Android sẽ trả về package name, trên iOS sẽ trả về bundle ID từ capabilities.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "getCurrentAppPackage",
  "returnType" : "String",
  "parameters" : [ ]
}, {
  "name" : "closeBrowser",
  "description" : "Đóng hoàn toàn phiên trình duyệt hoặc thiết bị hiện tại và giải phóng tài nguyên. Phương thức này nên được gọi ở cuối mỗi test case để tránh rò rỉ tài nguyên.",
  "category" : "DriverKeyword",
  "subCategory" : "",
  "example" : "// Đóng trình duyệt sau khi hoàn thành test case\ndriverKeyword.closeBrowser();",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Đã khởi tạo trình duyệt hoặc thiết bị trước đó. Có thể throw WebDriverException nếu có lỗi khi đóng trình duyệt.",
  "className" : "com.vtnet.netat.core.keywords.DriverKeyword",
  "methodName" : "closeBrowser",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "clickAndSwitchToNewTab",
  "description" : "Click vào một element (thường is link) và tự động chuyển sự điều khiển sang tab/cửa sổ mới vừa được mở ra.",
  "category" : "Web",
  "subCategory" : "Window&Frame",
  "example" : "// Click vào liên kết mở within tab mới\nwebKeyword.clickAndSwitchToNewTab(externalLinkObject);\nwebKeyword.waitForPageLoaded();\n\n// Click vào nút xem chi tiết sản phẩm\nwebKeyword.clickAndSwitchToNewTab(viewDetailsButtonObject);\nwebKeyword.verifyElementVisibleHard(productSpecificationsObject, 10);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần click phải tồn tại within DOM và có khả năng mở tab mới (ví dụ: có thuộc tính target='_blank'). Có thể throw NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, TimeoutException nếu tab mới không mở within thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "clickAndSwitchToNewTab",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element link cần click"
  } ]
}, {
  "name" : "sendText",
  "description" : "Nhập văn bản vào một ô input có thể chỉnh sửa. Chỉ hoạt động với các phần tử có thuộc tính 'editable' là true như TextField, EditText, TextArea, v.v. Không thể sử dụng với các phần tử không cho phép nhập liệu như Button, Label.",
  "category" : "Mobile",
  "subCategory" : "Interaction",
  "example" : "// Nhập tên đăng nhập vào ô username\nmobileKeyword.sendText(usernameInput, \"admin@example.com\");\n\n// Nhập mật khẩu vào ô password\nmobileKeyword.sendText(passwordInput, \"SecurePassword123\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Phần tử UI cần phải là trường nhập liệu có thể chỉnh sửa. Có thể throw ElementNotVisibleException nếu phần tử không hiển thị, NoSuchElementException nếu không tìm thấy phần tử, hoặc ElementNotInteractableException nếu phần tử không thể tương tác hoặc không phải trường nhập liệu.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "sendText",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng đầu vào có thể chỉnh sửa (như TextField, EditText)"
  }, {
    "type" : "String",
    "name" : "text",
    "description" : "Văn bản cần nhập vào phần tử"
  } ]
}, {
  "name" : "uncheck",
  "description" : "Verify và đảm bảo một checkbox đang ở trạng thái không được chọn. Nếu element đang được chọn, keyword sẽ thực hiện click để bỏ chọn nó.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Bỏ chọn checkbox đăng ký nhận bản tin\nwebKeyword.uncheck(newsletterCheckbox);\n\n// Bỏ chọn option gửi hàng nhanh\nwebKeyword.uncheck(expressShippingCheckbox);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần bỏ chọn phải tồn tại within DOM, phải hiển thị và có thể tương tác được, phải is checkbox (input type=\"checkbox\"), và lưu ý phương thức này chỉ hoạt động với checkbox, không dùng cho radio button. Có thể throw ElementNotVisibleException nếu element không hiển thị trên trang, ElementNotInteractableException nếu element không thể tương tác, StaleElementReferenceException nếu element không còn gắn với DOM, TimeoutException nếu element không xuất hiện within thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "uncheck",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element checkbox cần bỏ chọn"
  } ]
}, {
  "name" : "clearText",
  "description" : "Xóa toàn bộ text đang có within một element có thể nhập liệu như ô input hoặc textarea.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Xóa nội dung within ô tìm kiếm\nwebKeyword.clearText(searchInputObject);\n\n// Xóa nội dung trước khi nhập dữ liệu mới\nwebKeyword.clearText(usernameInputObject);\nwebKeyword.sendKeys(usernameInputObject, \"new_username\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần xóa nội dung phải tồn tại within DOM, phải hiển thị và có thể tương tác được, và phải is loại có thể nhập liệu (input, textarea, contenteditable). Có thể throw ElementNotVisibleException nếu element không hiển thị trên trang, ElementNotInteractableException nếu element không thể tương tác, StaleElementReferenceException nếu element không còn gắn với DOM, TimeoutException nếu element không xuất hiện within thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "clearText",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần xóa nội dung"
  } ]
}, {
  "name" : "getAttribute",
  "description" : "Lấy và trả về giá trị of một thuộc tính (attribute) cụ thể trên một element HTML.",
  "category" : "Web",
  "subCategory" : "Getter",
  "example" : "// Lấy URL từ thẻ liên kết\nString linkUrl = webKeyword.getAttribute(linkObject, \"href\");\nwebKeyword.verifyContains(linkUrl, \"https://example.com\");\n\n// Verify trạng thái of checkbox\nString isChecked = webKeyword.getAttribute(termsCheckboxObject, \"checked\");\nwebKeyword.verifyNotNull(isChecked);",
  "returnValue" : "String - Giá trị of thuộc tính hoặc null nếu thuộc tính không tồn tại",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và element cần lấy thuộc tính phải tồn tại within DOM. Có thể throw NoSuchElementException nếu element không tồn tại, StaleElementReferenceException nếu element không còn gắn với DOM, TimeoutException nếu element không xuất hiện within thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "getAttribute",
  "returnType" : "String",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần lấy thuộc tính"
  }, {
    "type" : "String",
    "name" : "attributeName",
    "description" : "Tên of thuộc tính cần lấy giá trị (ví dụ: 'href', 'class', 'value')"
  } ]
}, {
  "name" : "setSliderValue",
  "description" : "Thiết lập giá trị cho một thanh trượt (slider) bằng cách chạm vào vị trí tương ứng. Giá trị từ 0.0 (bên trái) đến 1.0 (bên phải). Phương thức này tự động tính toán tọa độ cần chạm dựa trên kích thước và vị trí của slider. Hữu ích khi cần điều chỉnh các điều khiển như âm lượng, độ sáng, hoặc các giá trị số trong khoảng. Lưu ý: Giá trị phải nằm trong khoảng từ 0.0 đến 1.0, nếu không sẽ gây ra ngoại lệ.",
  "category" : "Mobile",
  "subCategory" : "Interaction",
  "example" : "// Thiết lập thanh âm lượng ở mức 75%\nmobileKeyword.setSliderValue(volumeSlider, 0.75);\n\n// Thiết lập độ sáng màn hình ở mức thấp nhất\nmobileKeyword.setSliderValue(brightnessSlider, 0.0);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Phần tử slider cần điều chỉnh phải tồn tại và hiển thị trên màn hình, phải là loại có thể điều chỉnh bằng cách chạm vào vị trí khác nhau, và phải có chiều ngang đủ lớn để có thể chạm chính xác vào các vị trí khác nhau. Có thể throw IllegalArgumentException nếu giá trị nằm ngoài khoảng từ 0.0 đến 1.0, NoSuchElementException nếu không tìm thấy phần tử slider, StaleElementReferenceException nếu phần tử không còn gắn với DOM, WebDriverException nếu không thể lấy vị trí hoặc kích thước của phần tử, hoặc ElementNotInteractableException nếu không thể tương tác với slider.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "setSliderValue",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử slider cần điều chỉnh"
  }, {
    "type" : "double",
    "name" : "value",
    "description" : "Giá trị cần thiết lập, từ 0.0 (nhỏ nhất/trái) đến 1.0 (lớn nhất/phải)"
  } ]
}, {
  "name" : "executeUpdate",
  "description" : "Thực thi câu lệnh INSERT, UPDATE, DELETE và trả về số bản ghi bị ảnh hưởng. Hỗ trợ truyền tham số vào câu truy vấn để tránh SQL injection.",
  "category" : "DB",
  "subCategory" : "Execution",
  "example" : "// Thêm một bản ghi mới vào bảng users\nint rowsAffected = databaseKeyword.executeUpdate(\n    \"mysql_dev\", \n    \"INSERT INTO users (username, email, status) VALUES (?, ?, ?)\", \n    \"john.doe\", \"john.doe@example.com\", \"active\"\n);\n\n// Kiểm tra xem có đúng một bản ghi được thêm vào không\nAssert.assertEquals(rowsAffected, 1);",
  "returnValue" : "int - Số bản ghi bị ảnh hưởng bởi câu lệnh",
  "note" : "Áp dụng cho tất cả nền tảng. Đã khởi tạo kết nối CSDL với profileName tương ứng. Có thể throw SQLException nếu có lỗi khi thực thi câu lệnh, hoặc IllegalArgumentException nếu profileName không tồn tại.",
  "className" : "com.vtnet.netat.db.keywords.DatabaseKeyword",
  "methodName" : "executeUpdate",
  "returnType" : "int",
  "parameters" : [ {
    "type" : "String",
    "name" : "profileName",
    "description" : "Tên của profile kết nối CSDL đã được khởi tạo trước đó"
  }, {
    "type" : "String",
    "name" : "query",
    "description" : "Câu lệnh SQL INSERT, UPDATE hoặc DELETE cần thực thi, có thể chứa các placeholder '?' cho tham số"
  }, {
    "type" : "Object[]",
    "name" : "params",
    "description" : "Các tham số cần truyền vào câu truy vấn, theo thứ tự xuất hiện của các placeholder '?'"
  } ]
}, {
  "name" : "verifyTextContainsSoft",
  "description" : "Verify text of một element có contains một chuỗi con hay không. Nếu không contains, kịch bản sẽ ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify kết quả tìm kiếm có contains thông tin số lượng\nwebKeyword.sendKeys(searchInputObject, \"điện thoại\");\nwebKeyword.click(searchButtonObject);\nwebKeyword.verifyTextContainsSoft(searchResultSummary, \"kết quả\");\nwebKeyword.verifyTextContainsSoft(searchResultSummary, \"điện thoại\");\n\n// Verify nhiều thông tin trên trang sản phẩm\nwebKeyword.verifyTextContainsSoft(productDescriptionObject, \"chống nước\");\nwebKeyword.verifyTextContainsSoft(productDescriptionObject, \"bảo hành\");\nwebKeyword.click(addToCartButtonObject); // Tiếp tục thực hiện hành động",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và element cần Verify phải tồn tại within DOM và có text. Có thể throw NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyTextContainsSoft",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element contains text cần Verify"
  }, {
    "type" : "String",
    "name" : "partialText",
    "description" : "Chuỗi text con mong đợi"
  } ]
}, {
  "name" : "scrollToBottom",
  "description" : "Cuộn xuống vị trí thấp nhất (cuối trang) of trang web.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Cuộn xuống cuối trang để truy cập chân trang\nwebKeyword.scrollToBottom();\nwebKeyword.verifyElementVisible(footerLinksObject);\n\n// Cuộn xuống cuối trang để tải thêm dữ liệu (infinite scroll)\nwebKeyword.scrollToBottom();\nwebKeyword.waitForElementVisible(loadingIndicatorObject);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và trình duyệt phải hỗ trợ thực thi JavaScript. Có thể throw JavascriptException nếu có lỗi khi thực thi JavaScript, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "scrollToBottom",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "verifyUrlHard",
  "description" : "So sánh URL of trang hiện tại với một chuỗi mong đợi (phải khớp chính xác). Nếu không khớp, kịch bản sẽ DỪNG LẠI.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify URL sau khi đăng nhập thành công\nwebKeyword.sendKeys(usernameInputObject, \"testuser\");\nwebKeyword.sendKeys(passwordInputObject, \"password123\");\nwebKeyword.click(loginButtonObject);\nwebKeyword.waitForUrlContains(\"/dashboard\", 10);\nwebKeyword.verifyUrlHard(\"https://example.com/dashboard\");\n\n// Verify URL sau khi hoàn thành quy trình\nwebKeyword.click(completeOrderButtonObject);\nwebKeyword.waitForPageLoaded(20);\nwebKeyword.verifyUrlHard(\"https://example.com/order-confirmation\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và trang web đã hoàn thành quá trình tải. Có thể throw AssertionError nếu URL hiện tại không khớp với URL mong đợi, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyUrlHard",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "expectedUrl",
    "description" : "URL đầy đủ mong đợi"
  } ]
}, {
  "name" : "pressKeyCode",
  "description" : "Mô phỏng hành động nhấn các phím vật lý của thiết bị Android như HOME, BACK, VOLUME_UP, v.v. Chỉ hoạt động trên Android, sẽ hiển thị cảnh báo nếu được gọi trên iOS. Tham số keyName phải là một giá trị hợp lệ từ enum AndroidKey. Hữu ích khi cần tương tác với các phím vật lý hoặc phím ảo của thiết bị.",
  "category" : "Mobile",
  "subCategory" : "System",
  "example" : "// Nhấn nút Back để quay lại màn hình trước\nmobileKeyword.pressKeyCode(\"BACK\");\n\n// Nhấn phím Home để quay về màn hình chính\nmobileKeyword.pressKeyCode(\"HOME\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị Android đã được kết nối và cấu hình đúng với Appium. Đang sử dụng AndroidDriver (phương thức không hoạt động trên iOS), và tham số keyName phải là một giá trị hợp lệ từ enum AndroidKey. Có thể throw IllegalArgumentException nếu tên phím không hợp lệ, WebDriverException nếu không thể thực hiện hành động nhấn phím, hoặc UnsupportedCommandException nếu lệnh không được hỗ trợ trên thiết bị hiện tại.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "pressKeyCode",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "keyName",
    "description" : "Tên phím trong AndroidKey enum (ví dụ: 'HOME', 'BACK', 'VOLUME_UP')"
  } ]
}, {
  "name" : "getText",
  "description" : "Lấy và trả về text of element. Keyword này sẽ tự động thử nhiều cách: 1. Lấy thuộc tính 'value' (cho ô input, textarea). 2. Lấy text hiển thị thông thường. 3. Lấy 'textContent' hoặc 'innerText' nếu 2 cách trên thất bại.",
  "category" : "Web",
  "subCategory" : "Getter",
  "example" : "// Lấy text từ element hiển thị\nString welcomeMessage = webKeyword.getText(welcomeMessageObject);\nwebKeyword.verifyEqual(welcomeMessage, \"Chào mừng bạn!\");\n\n// Lấy giá trị từ ô input\nwebKeyword.sendKeys(usernameInputObject, \"testuser\");\nString username = webKeyword.getText(usernameInputObject);\nwebKeyword.verifyEqual(username, \"testuser\");",
  "returnValue" : "String - text of element hoặc chuỗi rỗng nếu không có text",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và element cần lấy text phải tồn tại within DOM. Có thể throw NoSuchElementException nếu element không tồn tại, StaleElementReferenceException nếu element không còn gắn với DOM, TimeoutException nếu element không xuất hiện within thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "getText",
  "returnType" : "String",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element contains text cần lấy"
  } ]
}, {
  "name" : "installApp",
  "description" : "Cài đặt ứng dụng từ một đường dẫn file .apk (Android) hoặc .ipa (iOS) vào thiết bị đang kết nối. Đường dẫn phải trỏ đến một file hợp lệ và có thể truy cập từ máy thực thi test. Trên iOS, file .ipa phải được ký đúng cách để có thể cài đặt. Trên Android, thiết bị phải cho phép cài đặt từ nguồn không xác định.",
  "category" : "Mobile",
  "subCategory" : "AppLifecycle",
  "example" : "// Cài đặt ứng dụng Android từ thư mục local\nmobileKeyword.installApp(\"C:/apps/my-app.apk\");\n\n// Cài đặt ứng dụng iOS từ đường dẫn mạng (cần tải về trước)\nmobileKeyword.installApp(\"/tmp/downloaded-app.ipa\");\n\n// Cài đặt phiên bản mới của ứng dụng để kiểm tra tính năng cập nhật\nmobileKeyword.installApp(\"C:/builds/app-v2.0.apk\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Có quyền cài đặt ứng dụng trên thiết bị. Trên Android: Đã bật 'Cài đặt từ nguồn không xác định'. Trên iOS: File .ipa đã được ký đúng cách. Có thể throw WebDriverException nếu không thể cài đặt ứng dụng, hoặc FileNotFoundException nếu không tìm thấy file ứng dụng.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "installApp",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "appPath",
    "description" : "Đường dẫn tuyệt đối đến file ứng dụng (.apk hoặc .ipa)"
  } ]
}, {
  "name" : "dragAndDropByOffset",
  "description" : "Kéo một element theo một khoảng cách (độ lệch x, y) so với vị trí hiện tại of nó. Rất hữu ích cho các thanh trượt (slider).",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Kéo thanh trượt giá sang phải 100px\nwebKeyword.dragAndDropByOffset(priceSliderHandle, 100, 0);\n\n// Kéo thanh trượt âm lượng xuống 50px\nwebKeyword.dragAndDropByOffset(volumeSliderObject, 0, -50);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần kéo phải tồn tại within DOM, phải hiển thị và có thể tương tác được, trang web phải hỗ trợ thao tác kéo và thả, và trình duyệt phải hỗ trợ thao tác kéo và thả (một số trình duyệt di động có thể không hỗ trợ đầy đủ). Có thể throw ElementNotVisibleException nếu element không hiển thị trên trang, ElementNotInteractableException nếu element không thể tương tác, StaleElementReferenceException nếu element không còn gắn với DOM, TimeoutException nếu element không xuất hiện within thời gian chờ, WebDriverException nếu có lỗi khi tương tác với trình duyệt, hoặc MoveTargetOutOfBoundsException nếu vị trí đích nằm ngoài viewport hiện tại.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "dragAndDropByOffset",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần kéo"
  }, {
    "type" : "int",
    "name" : "xOffset",
    "description" : "Độ lệch theo trục ngang (pixel)"
  }, {
    "type" : "int",
    "name" : "yOffset",
    "description" : "Độ lệch theo trục dọc (pixel)"
  } ]
}, {
  "name" : "verifyElementAttributeSoft",
  "description" : "Verify giá trị of một thuộc tính (attribute) trên element. Nếu giá trị không khớp, kịch bản sẽ ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify nhiều thuộc tính of một element\nwebKeyword.verifyElementAttributeSoft(buttonObject, \"type\", \"submit\");\nwebKeyword.verifyElementAttributeSoft(buttonObject, \"class\", \"btn-primary\");\nwebKeyword.click(buttonObject); // Tiếp tục thực hiện hành động\n\n// Verify thuộc tính of nhiều element\nwebKeyword.verifyElementAttributeSoft(usernameInputObject, \"placeholder\", \"Nhập tên đăng nhập\");\nwebKeyword.verifyElementAttributeSoft(passwordInputObject, \"type\", \"password\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần Verify phải tồn tại within DOM, và thuộc tính cần Verify phải tồn tại trên element. Có thể throw NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyElementAttributeSoft",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần Verify"
  }, {
    "type" : "String",
    "name" : "attributeName",
    "description" : "Tên of thuộc tính (ví dụ: 'href', 'class', 'value')"
  }, {
    "type" : "String",
    "name" : "expectedValue",
    "description" : "Giá trị mong đợi of thuộc tính"
  } ]
}, {
  "name" : "switchToFrame",
  "description" : "Chuyển sự điều khiển of WebDriver vào một element iframe trên trang. Mọi hành động sau đó sẽ được thực hiện within ngữ cảnh of iframe này.",
  "category" : "Web",
  "subCategory" : "Window&Frame",
  "example" : "// Chuyển vào iframe thanh toán\nwebKeyword.waitForElementVisible(paymentIframeObject);\nwebKeyword.switchToFrame(paymentIframeObject);\nwebKeyword.sendKeys(cardNumberObject, \"4111111111111111\");\n\n// Chuyển vào iframe trình soạn thảo\nwebKeyword.switchToFrame(richTextEditorObject);\nwebKeyword.sendKeys(editorBodyObject, \"Nội dung bài viết\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element iframe cần chuyển vào phải tồn tại within DOM. Có thể throw NoSuchElementException nếu không tìm thấy element iframe, StaleElementReferenceException nếu element iframe không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "switchToFrame",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng giao diện đại diện cho thẻ iframe cần chuyển vào"
  } ]
}, {
  "name" : "executeQuery",
  "description" : "Thực thi câu lệnh SELECT và trả về kết quả dưới dạng danh sách các bản ghi. Mỗi bản ghi là một Map với key là tên cột và value là giá trị của cột đó. Hỗ trợ truyền tham số vào câu truy vấn để tránh SQL injection.",
  "category" : "DB",
  "subCategory" : "Execution",
  "example" : "// Thực thi câu lệnh SELECT với tham số\nList<Map<String, Object>> users = databaseKeyword.executeQuery(\n    \"mysql_dev\", \n    \"SELECT id, username, email FROM users WHERE status = ? AND created_date > ?\", \n    \"active\", \"2023-01-01\"\n);\n\n// Truy cập dữ liệu từ kết quả\nString username = users.get(0).get(\"username\").toString();",
  "returnValue" : "List<Map<String, Object>> - Danh sách các bản ghi, mỗi bản ghi là một Map với key là tên cột và value là giá trị",
  "note" : "Áp dụng cho tất cả nền tảng. Đã khởi tạo kết nối CSDL với profileName tương ứng. Có thể throw SQLException nếu có lỗi khi thực thi câu truy vấn, hoặc IllegalArgumentException nếu profileName không tồn tại.",
  "className" : "com.vtnet.netat.db.keywords.DatabaseKeyword",
  "methodName" : "executeQuery",
  "returnType" : "List",
  "parameters" : [ {
    "type" : "String",
    "name" : "profileName",
    "description" : "Tên của profile kết nối CSDL đã được khởi tạo trước đó"
  }, {
    "type" : "String",
    "name" : "query",
    "description" : "Câu lệnh SQL SELECT cần thực thi, có thể chứa các placeholder '?' cho tham số"
  }, {
    "type" : "Object[]",
    "name" : "params",
    "description" : "Các tham số cần truyền vào câu truy vấn, theo thứ tự xuất hiện của các placeholder '?'"
  } ]
}, {
  "name" : "Assert Less Than",
  "description" : "Khẳng định rằng giá trị thực tế nhỏ hơn giá trị so sánh. Nếu không thỏa mãn, test case sẽ dừng lại và báo lỗi",
  "category" : "Assertion",
  "subCategory" : "",
  "example" : "assertLessThan(5, 10); // 5 < 10",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Tự động xử lý so sánh giữa số và chuỗi số. Assertion sẽ fail nếu actualValue >= expectedValue.",
  "className" : "com.vtnet.netat.core.keywords.AssertionKeyword",
  "methodName" : "assertLessThan",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "Object",
    "name" : "actualValue",
    "description" : "Giá trị thực tế cần so sánh (số hoặc chuỗi số)"
  }, {
    "type" : "Object",
    "name" : "expectedValue",
    "description" : "Giá trị mong đợi để so sánh (actualValue phải nhỏ hơn giá trị này)"
  } ]
}, {
  "name" : "pressBack",
  "description" : "Mô phỏng hành động nhấn nút 'Back' vật lý của thiết bị. Hữu ích để điều hướng ngược lại màn hình trước đó, đóng dialog, hoặc hủy thao tác hiện tại. Trên iOS, hành động này tương đương với việc nhấn nút quay lại ở góc trên bên trái của nhiều ứng dụng.",
  "category" : "Mobile",
  "subCategory" : "Interaction",
  "example" : "// Quay lại màn hình trước\nmobileKeyword.pressBack();\n\n// Đóng dialog\nmobileKeyword.pressBack();",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Có thể throw WebDriverException nếu không thể thực hiện hành động Back.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "pressBack",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "waitForUrlContains",
  "description" : "Tạm dừng kịch bản cho đến khi URL of trang hiện tại contains một chuỗi con được chỉ định.",
  "category" : "Web",
  "subCategory" : "Wait",
  "example" : "// Chờ chuyển hướng đến trang dashboard\nwebKeyword.click(loginButtonObject);\nwebKeyword.waitForUrlContains(\"/dashboard\", 15);\nwebKeyword.verifyElementVisible(welcomeMessageObject);\n\n// Chờ chuyển hướng sau khi tìm kiếm\nwebKeyword.sendKeys(searchInputObject, \"laptop\");\nwebKeyword.click(searchButtonObject);\nwebKeyword.waitForUrlContains(\"search=laptop\", 10);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và URL of trang sẽ contains chuỗi con đã chỉ định within khoảng thời gian chờ. Có thể throw TimeoutException nếu URL không contains chuỗi con đã chỉ định within thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "waitForUrlContains",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "partialUrl",
    "description" : "Chuỗi con mà URL cần contains"
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa (tính bằng seconds)"
  } ]
}, {
  "name" : "assertElementVisible",
  "description" : "Khẳng định rằng một phần tử đang được hiển thị trên màn hình và người dùng có thể nhìn thấy. Khác với assertElementPresent, phương thức này kiểm tra cả sự tồn tại và tính hiển thị của phần tử. Nếu phần tử không tồn tại hoặc không hiển thị, một AssertionError sẽ được ném ra.",
  "category" : "Mobile",
  "subCategory" : "Assertion",
  "example" : "// Kiểm tra thông báo thành công hiển thị\nmobileKeyword.assertElementVisible(successMessage);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Đã xác định chính xác phần tử UI cần kiểm tra. Có thể throw AssertionError nếu phần tử không tồn tại hoặc không hiển thị, WebDriverException nếu có lỗi khi tương tác với trình điều khiển, hoặc StaleElementReferenceException nếu phần tử không còn gắn với DOM.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertElementVisible",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra tính hiển thị"
  } ]
}, {
  "name" : "sendKeysToAlert",
  "description" : "Chờ cho đến khi một hộp thoại prompt of trình duyệt xuất hiện và nhập một chuỗi text vào đó.",
  "category" : "Web",
  "subCategory" : "Alert",
  "example" : "// Nhập tên người dùng vào hộp thoại prompt\nwebKeyword.click(loginButtonObject);\nwebKeyword.sendKeysToAlert(\"Nguyễn Văn A\");\nwebKeyword.acceptAlert();\n\n// Nhập lý do hủy đơn hàng\nwebKeyword.click(cancelOrderButtonObject);\nwebKeyword.sendKeysToAlert(\"Thay đổi thông tin giao hàng\");\nwebKeyword.acceptAlert();",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, một hộp thoại prompt đang hiển thị hoặc sẽ xuất hiện. Có thể throw TimeoutException nếu không có hộp thoại alert xuất hiện within thời gian chờ, NoAlertPresentException nếu không có hộp thoại alert đang hiển thị, ElementNotInteractableException nếu hộp thoại không phải is prompt và không cho phép nhập liệu, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "sendKeysToAlert",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "text",
    "description" : "Chuỗi text cần nhập vào hộp thoại"
  } ]
}, {
  "name" : "verifyTitleHard",
  "description" : "Verify tiêu đề (title) of trang web hiện tại. Nếu tiêu đề không khớp chính xác, kịch bản sẽ DỪNG LẠI.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify tiêu đề trang chủ\nwebKeyword.navigateToUrl(\"https://example.com\");\nwebKeyword.waitForPageLoaded(10);\nwebKeyword.verifyTitleHard(\"Trang chủ - Website ABC\");\n\n// Verify tiêu đề sau khi đăng nhập\nwebKeyword.sendKeys(usernameInputObject, \"testuser\");\nwebKeyword.sendKeys(passwordInputObject, \"password123\");\nwebKeyword.click(loginButtonObject);\nwebKeyword.waitForPageLoaded(15);\nwebKeyword.verifyTitleHard(\"Dashboard - Website ABC\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và trang web đã hoàn thành quá trình tải. Có thể throw AssertionError nếu tiêu đề trang không khớp với tiêu đề mong đợi, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyTitleHard",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "expectedTitle",
    "description" : "Tiêu đề trang mong đợi"
  } ]
}, {
  "name" : "Is App Installed",
  "description" : "Kiểm tra xem một ứng dụng có được cài đặt trên thiết bị hay không",
  "category" : "Mobile",
  "subCategory" : "Applifecycle",
  "example" : "boolean isInstalled = isAppInstalled(\"com.example.myapp\");",
  "returnValue" : "boolean - true nếu ứng dụng đã được cài đặt, false nếu chưa được cài đặt",
  "note" : "Keyword này hoạt động trên cả Android và iOS. Trên Android sử dụng package name (vd: com.android.chrome), trên iOS sử dụng bundle ID (vd: com.apple.mobilesafari).",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "isAppInstalled",
  "returnType" : "boolean",
  "parameters" : [ {
    "type" : "String",
    "name" : "appId",
    "description" : "Package name (Android) hoặc bundle ID (iOS) của ứng dụng cần kiểm tra"
  } ]
}, {
  "name" : "getElementCount",
  "description" : "Đếm và trả về số lượng phần tử trên màn hình khớp với locator được chỉ định. Hữu ích để kiểm tra số lượng item trong danh sách hoặc grid.",
  "category" : "Mobile",
  "subCategory" : "Getter",
  "example" : "int numberOfItems = mobileKeyword.getElementCount(listItemObject);",
  "returnValue" : "void|No return value",
  "note" : "",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "getElementCount",
  "returnType" : "int",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng UI đại diện cho các phần tử cần đếm"
  } ]
}, {
  "name" : "scrollToText",
  "description" : "Tự động cuộn màn hình (vuốt lên) cho đến khi tìm thấy một phần tử chứa văn bản mong muốn. Phương thức này sẽ thực hiện tối đa 10 lần vuốt lên để tìm kiếm. Cách hoạt động khác nhau giữa Android (sử dụng UiScrollable) và iOS (sử dụng vuốt tuần tự). Trả về WebElement nếu tìm thấy, hoặc ném NoSuchElementException nếu không tìm thấy sau khi đã cuộn hết.",
  "category" : "Mobile",
  "subCategory" : "Gesture",
  "example" : "// Cuộn đến khi thấy nút và chạm vào nó\nWebElement registerButton = mobileKeyword.scrollToText(\"Đăng ký\");\nregisterButton.click();",
  "returnValue" : "WebElement - Phần tử chứa văn bản được tìm thấy",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Văn bản cần tìm phải tồn tại trên màn hình (có thể cần cuộn để hiển thị). Trên Android: Phần tử cha chứa nội dung cần cuộn phải có thuộc tính scrollable=true. Có thể throw NoSuchElementException nếu không tìm thấy phần tử chứa văn bản sau khi cuộn hết, WebDriverException nếu có lỗi khi tương tác với trình điều khiển, hoặc IllegalStateException nếu không thể xác định nền tảng hoặc không hỗ trợ.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "scrollToText",
  "returnType" : "WebElement",
  "parameters" : [ {
    "type" : "String",
    "name" : "textToFind",
    "description" : "Văn bản cần tìm kiếm trên màn hình. Có thể là toàn bộ hoặc một phần của văn bản hiển thị"
  } ]
}, {
  "name" : "switchToParentFrame",
  "description" : "Thoát khỏi ngữ cảnh iframe hiện tại và Switch to parent frame ngay trước nó. Nếu đang ở iframe cấp cao nhất, hành động này sẽ quay về nội dung chính of trang.",
  "category" : "Web",
  "subCategory" : "Window&Frame",
  "example" : "// Thoát khỏi iframe con và Switch to parent frame\nwebKeyword.switchToFrame(mainIframeObject);\nwebKeyword.switchToFrame(nestedIframeObject);\nwebKeyword.switchToParentFrame(); // Switch to parent frame\nwebKeyword.click(nextButtonObject);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, WebDriver đang ở within ngữ cảnh of một iframe. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "switchToParentFrame",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "dragAndDrop",
  "description" : "Kéo một phần tử từ vị trí nguồn và thả vào vị trí của phần tử đích. Hữu ích cho các thao tác như sắp xếp lại danh sách, di chuyển các phần tử trong giao diện, hoặc kéo thả vào vùng đích. Phương thức sẽ tự động tính toán tọa độ trung tâm của cả hai phần tử để thực hiện thao tác chính xác.",
  "category" : "Mobile",
  "subCategory" : "Gesture",
  "example" : "// Kéo một mục từ danh sách và thả vào thùng rác\nmobileKeyword.dragAndDrop(listItem, trashBin);\n\n// Sắp xếp lại thứ tự trong danh sách\nmobileKeyword.dragAndDrop(firstItem, thirdItem);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Cả phần tử nguồn và đích phải hiển thị trên màn hình và ứng dụng phải hỗ trợ thao tác kéo thả cho các phần tử này. Có thể throw NoSuchElementException nếu không tìm thấy phần tử nguồn hoặc đích, WebDriverException nếu có lỗi khi thực hiện thao tác kéo thả, hoặc ElementNotInteractableException nếu không thể tương tác với phần tử nguồn hoặc đích.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "dragAndDrop",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "source",
    "description" : "Phần tử nguồn cần kéo"
  }, {
    "type" : "ObjectUI",
    "name" : "destination",
    "description" : "Phần tử đích để thả vào"
  } ]
}, {
  "name" : "assertTextEquals",
  "description" : "Khẳng định rằng văn bản của một phần tử khớp chính xác với chuỗi mong đợi. Phương thức này trích xuất nội dung văn bản của phần tử và so sánh với giá trị mong đợi, ném AssertionError nếu không khớp. Hữu ích để kiểm tra nội dung văn bản, nhãn, thông báo lỗi hoặc các phần tử hiển thị khác.",
  "category" : "Mobile",
  "subCategory" : "Assertion",
  "example" : "// Kiểm tra tiêu đề màn hình\nmobileKeyword.assertTextEquals(title, \"Đăng nhập\");\n\n// Xác minh thông báo lỗi\nmobileKeyword.assertTextEquals(errorMessage, \"Email không hợp lệ\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Phần tử UI cần kiểm tra phải hiển thị và chứa văn bản. Có thể throw AssertionError nếu văn bản của phần tử không khớp với giá trị mong đợi, NoSuchElementException nếu không tìm thấy phần tử, hoặc StaleElementReferenceException nếu phần tử không còn gắn với DOM.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertTextEquals",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra văn bản"
  }, {
    "type" : "String",
    "name" : "expectedText",
    "description" : "Chuỗi văn bản mong đợi để so sánh"
  } ]
}, {
  "name" : "getClipboard",
  "description" : "Lấy và trả về nội dung văn bản hiện tại của clipboard trên thiết bị. Hữu ích khi cần kiểm tra nội dung đã được sao chép hoặc khi cần lấy dữ liệu từ clipboard để sử dụng trong các bước test tiếp theo. Phương thức này trả về một chuỗi chứa nội dung văn bản của clipboard. Lưu ý: Chỉ hỗ trợ nội dung văn bản, không hỗ trợ các loại dữ liệu khác như hình ảnh.",
  "category" : "Mobile",
  "subCategory" : "System",
  "example" : "// Kiểm tra nội dung đã được sao chép đúng\nmobileKeyword.longPress(emailText, 2);\nmobileKeyword.tap(copyOption);\nString copiedText = mobileKeyword.getClipboard();\nassert copiedText.equals(\"user@example.com\");\n\n// Sao chép mã xác minh và sử dụng nó\nmobileKeyword.tap(copyButton);\nString code = mobileKeyword.getClipboard();\nmobileKeyword.sendText(codeInput, code);",
  "returnValue" : "String - Nội dung văn bản hiện có trong clipboard của thiết bị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Ứng dụng phải có quyền truy cập clipboard và clipboard phải chứa nội dung văn bản (không phải hình ảnh hoặc dữ liệu nhị phân). Có thể throw WebDriverException nếu có lỗi khi tương tác với trình điều khiển, UnsupportedOperationException nếu thiết bị không hỗ trợ truy cập clipboard, hoặc SecurityException nếu không có quyền truy cập clipboard.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "getClipboard",
  "returnType" : "String",
  "parameters" : [ ]
}, {
  "name" : "verifyDataSQL",
  "description" : "Thực thi câu lệnh SQL và kiểm chứng kết quả với dữ liệu mong đợi. Phương thức này so sánh từng cột trong từng hàng của kết quả với dữ liệu mong đợi được cung cấp.",
  "category" : "DB",
  "subCategory" : "Verification",
  "example" : "// Kiểm tra dữ liệu người dùng\nString[] columns = {\"username\", \"email\", \"status\"};\nObject[][] expectedData = {\n    {\"john.doe\", \"john.doe@example.com\", \"active\"},\n    {\"jane.smith\", \"jane.smith@example.com\", \"inactive\"}\n};\n\ndatabaseKeyword.verifyDataSQL(\n    \"mysql_dev\",\n    \"SELECT username, email, status FROM users WHERE department = ? ORDER BY username\",\n    columns,\n    expectedData,\n    \"IT\"\n);",
  "returnValue" : "void - Không trả về giá trị, nhưng sẽ ném AssertionError nếu kiểm chứng thất bại",
  "note" : "Áp dụng cho tất cả nền tảng. Đã khởi tạo kết nối CSDL với profileName tương ứng. Có thể throw SQLException nếu có lỗi khi thực thi câu truy vấn, AssertionError nếu kết quả kiểm chứng không khớp với dữ liệu mong đợi, hoặc IllegalArgumentException nếu cấu trúc dữ liệu mong đợi không hợp lệ.",
  "className" : "com.vtnet.netat.db.keywords.DatabaseKeyword",
  "methodName" : "verifyDataSQL",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "profileName",
    "description" : "Tên của profile kết nối CSDL đã được khởi tạo trước đó"
  }, {
    "type" : "String",
    "name" : "query",
    "description" : "Câu lệnh SQL SELECT cần thực thi để lấy dữ liệu cần kiểm chứng"
  }, {
    "type" : "String[]",
    "name" : "expectedColumnNames",
    "description" : "Mảng các tên cột cần kiểm chứng"
  }, {
    "type" : "Object[][]",
    "name" : "expectedData",
    "description" : "Mảng 2 chiều chứa dữ liệu mong đợi, mỗi hàng tương ứng với một bản ghi và các cột tương ứng với expectedColumnNames"
  }, {
    "type" : "Object[]",
    "name" : "queryParams",
    "description" : "Các tham số cần truyền vào câu truy vấn, theo thứ tự xuất hiện của các placeholder '?'"
  } ]
}, {
  "name" : "assertElementSelected",
  "description" : "Khẳng định rằng một element (checkbox hoặc radio button) đang ở trạng thái được chọn. Nếu không, kịch bản sẽ DỪNG LẠI.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify checkbox \"Ghi nhớ đăng nhập\" is selected\nwebKeyword.click(rememberMeCheckbox);\nwebKeyword.assertElementSelected(rememberMeCheckbox);\nwebKeyword.click(loginButtonObject);\n\n// Verify radio button phương thức thanh toán is selected\nwebKeyword.click(creditCardRadioButton);\nwebKeyword.assertElementSelected(creditCardRadioButton);\nwebKeyword.sendKeys(cardNumberInputObject, \"1234567890123456\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần Verify phải tồn tại within DOM và is checkbox hoặc radio button. Có thể throw AssertionError nếu element không ở trạng thái được chọn, NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, WebDriverException nếu có lỗi khi tương tác với trình duyệt, hoặc IllegalArgumentException nếu element không phải is checkbox hoặc radio button.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "assertElementSelected",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element checkbox hoặc radio button cần Verify"
  } ]
}, {
  "name" : "selectByValue",
  "description" : "Chọn một option in dropdown dựa trên giá trị of thuộc tính 'value'.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Chọn thành phố Hà Nội từ dropdown\nwebKeyword.selectByValue(cityDropdown, \"HN\");\n\n// Chọn phương thức vận chuyển\nwebKeyword.selectByValue(shippingMethodDropdown, \"express\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element dropdown phải tồn tại within DOM, phải is thẻ <select> hợp lệ, phải hiển thị và có thể tương tác được, và phải tồn tại ít nhất một option có thuộc tính value khớp với giá trị cần chọn. Có thể throw NoSuchElementException nếu không tìm thấy option với value chỉ định, ElementNotVisibleException nếu element không hiển thị trên trang, ElementNotInteractableException nếu element không thể tương tác, StaleElementReferenceException nếu element không còn gắn với DOM, UnexpectedTagNameException nếu element không phải is thẻ <select>, TimeoutException nếu element không xuất hiện within thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "selectByValue",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element dropdown (thẻ select)"
  }, {
    "type" : "String",
    "name" : "value",
    "description" : "Giá trị thuộc tính 'value' of option cần chọn"
  } ]
}, {
  "name" : "tapByCoordinates",
  "description" : "Thực hiện một hành động chạm (tap) tại một tọa độ (x, y) cụ thể trên màn hình. Hữu ích khi cần tương tác với các phần tử không thể định vị bằng các locator thông thường, hoặc khi cần chạm vào một vị trí tương đối trên màn hình. Tọa độ được tính theo pixel từ góc trên bên trái của màn hình (0,0). Lưu ý: Tọa độ có thể khác nhau trên các thiết bị có kích thước màn hình khác nhau.",
  "category" : "Mobile",
  "subCategory" : "Gesture",
  "example" : "// Chạm vào trung tâm màn hình\nDimension size = DriverManager.getDriver().manage().window().getSize();\nmobileKeyword.tapByCoordinates(size.width / 2, size.height / 2);\n\n// Chạm vào góc trên bên phải để đóng quảng cáo\nmobileKeyword.tapByCoordinates(size.width - 50, 50);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Tọa độ cần nằm trong phạm vi kích thước màn hình của thiết bị. Có thể throw WebDriverException nếu có lỗi khi thực hiện hành động chạm, hoặc IllegalArgumentException nếu tọa độ nằm ngoài kích thước màn hình.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "tapByCoordinates",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "int",
    "name" : "x",
    "description" : "Tọa độ theo trục ngang (pixel)"
  }, {
    "type" : "int",
    "name" : "y",
    "description" : "Tọa độ theo trục dọc (pixel)"
  } ]
}, {
  "name" : "scrollToElement",
  "description" : "Cuộn trang đến khi element được chỉ định nằm within vùng có thể nhìn thấy of trình duyệt. Rất cần thiết khi cần tương tác với các element ở cuối trang.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Cuộn đến phần chân trang\nwebKeyword.scrollToElement(footerSectionObject);\nwebKeyword.click(privacyPolicyLinkObject);\n\n// Cuộn đến nút gửi ở cuối form\nwebKeyword.scrollToElement(submitButtonObject);\nwebKeyword.click(submitButtonObject);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần cuộn đến phải tồn tại within DOM, và trình duyệt phải hỗ trợ thực thi JavaScript. Có thể throw NoSuchElementException nếu element không tồn tại, StaleElementReferenceException nếu element không còn gắn với DOM, JavascriptException nếu có lỗi khi thực thi JavaScript, TimeoutException nếu element không xuất hiện within thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "scrollToElement",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element đích cần cuộn đến"
  } ]
}, {
  "name" : "isElementPresent",
  "description" : "Kiểm tra xem một phần tử có tồn tại trên màn hình hay không trong một khoảng thời gian chờ nhất định. Khác với các phương thức assertion, phương thức này trả về kết quả boolean (true/false) thay vì ném ra ngoại lệ, giúp xử lý các trường hợp phần tử có thể xuất hiện hoặc không. Hữu ích cho các điều kiện rẽ nhánh trong kịch bản test.",
  "category" : "Mobile",
  "subCategory" : "Assertion",
  "example" : "// Kiểm tra thông báo lỗi và xử lý tương ứng\nboolean isErrorVisible = mobileKeyword.isElementPresent(errorMessage, 5);\nif (isErrorVisible) {\n    mobileKeyword.tap(dismissButton);\n} else {\n    mobileKeyword.tap(nextButton);\n}\n\n// Kiểm tra popup và bỏ qua nếu có\nif (mobileKeyword.isElementPresent(rateAppPopup, 3)) {\n    mobileKeyword.tap(remindMeLaterButton);\n}",
  "returnValue" : "boolean - true nếu phần tử tồn tại, false nếu không tìm thấy sau thời gian chờ",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Locator của phần tử cần kiểm tra phải hợp lệ. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình điều khiển.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "isElementPresent",
  "returnType" : "boolean",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần tìm kiếm"
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa (tính bằng giây)"
  } ]
}, {
  "name" : "verifyCssValueHard",
  "description" : "So sánh giá trị of một thuộc tính CSS trên element. Nếu không khớp, kịch bản sẽ DỪNG LẠI.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify màu of thông báo lỗi\nwebKeyword.click(submitButtonObject); // Gửi form không hợp lệ\nwebKeyword.waitForElementVisible(errorMessageObject);\nwebKeyword.verifyCssValueHard(errorMessageObject, \"color\", \"rgba(255, 0, 0, 1)\");\n\n// Verify background-color of nút đã chọn\nwebKeyword.click(selectButtonObject);\nwebKeyword.verifyCssValueHard(selectButtonObject, \"background-color\", \"rgba(0, 123, 255, 1)\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và element cần Verify phải tồn tại within DOM. Có thể throw AssertionError nếu giá trị CSS không khớp với giá trị mong đợi, NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyCssValueHard",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần Verify"
  }, {
    "type" : "String",
    "name" : "cssName",
    "description" : "Tên thuộc tính CSS (ví dụ: 'color')"
  }, {
    "type" : "String",
    "name" : "expectedValue",
    "description" : "Giá trị CSS mong đợi (ví dụ: 'rgb(255, 0, 0)')"
  } ]
}, {
  "name" : "refresh",
  "description" : "Tải lại (làm mới) trang web hiện tại đang hiển thị trên trình duyệt. Tương đương với việc người dùng nhấn phím F5 hoặc nút 'Reload'.",
  "category" : "Web",
  "subCategory" : "Browser",
  "example" : "// Làm mới trang hiện tại\nwebKeyword.refresh();\n\n// Làm mới trang sau khi gửi biểu mẫu\nwebKeyword.click(submitButton);\nwebKeyword.refresh();",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và đã tải một trang web trước đó. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình duyệt, NoSuchSessionException nếu phiên WebDriver không còn hợp lệ, hoặc TimeoutException nếu trang không tải lại within thời gian chờ mặc định.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "refresh",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "disconnectAllDatabases",
  "description" : "Đóng tất cả các connection pool đang hoạt động và giải phóng tài nguyên. Nên gọi phương thức này ở cuối mỗi test case hoặc test suite để đảm bảo tất cả kết nối được đóng đúng cách.",
  "category" : "DB",
  "subCategory" : "Connection",
  "example" : "// Đóng tất cả kết nối CSDL sau khi hoàn thành test\ndatabaseKeyword.disconnectAllDatabases();",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho tất cả nền tảng. Đã khởi tạo ít nhất một kết nối CSDL trước đó. Có thể throw SQLException nếu có lỗi khi đóng kết nối.",
  "className" : "com.vtnet.netat.db.keywords.DatabaseKeyword",
  "methodName" : "disconnectAllDatabases",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "getElementCount",
  "description" : "Đếm và trả về số lượng element trên trang khớp với locator được cung cấp. Hữu ích để Verify số lượng kết quả tìm kiếm, số hàng within bảng,...",
  "category" : "Web",
  "subCategory" : "Getter",
  "example" : "// Đếm số lượng sản phẩm within danh sách\nint numberOfProducts = webKeyword.getElementCount(productListItemObject);\nwebKeyword.verifyEqual(numberOfProducts, 10);\n\n// Verify số lượng kết quả tìm kiếm\nwebKeyword.sendKeys(searchInputObject, \"smartphone\");\nwebKeyword.click(searchButtonObject);\nint resultCount = webKeyword.getElementCount(searchResultItemObject);\nSystem.out.println(\"Tìm thấy \" + resultCount + \" kết quả\");",
  "returnValue" : "int - Số lượng element tìm thấy",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và locator of đối tượng giao diện phải hợp lệ. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình duyệt, NoSuchSessionException nếu phiên WebDriver không còn hợp lệ, hoặc InvalidSelectorException nếu locator không hợp lệ.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "getElementCount",
  "returnType" : "int",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng giao diện đại diện cho các element cần đếm"
  } ]
}, {
  "name" : "waitForElementClickable",
  "description" : "Tạm dừng kịch bản cho đến khi một element không chỉ hiển thị mà còn ở trạng thái sẵn sàng để được click (enabled).",
  "category" : "Web",
  "subCategory" : "Wait",
  "example" : "// Chờ nút gửi sẵn sàng để click sau khi điền form\nwebKeyword.sendKeys(emailInputObject, \"test@example.com\");\nwebKeyword.sendKeys(passwordInputObject, \"password123\");\nwebKeyword.waitForElementClickable(submitButtonObject);\nwebKeyword.click(submitButtonObject);\n\n// Chờ nút được kích hoạt sau khi chọn một option\nwebKeyword.click(termsCheckboxObject);\nwebKeyword.waitForElementClickable(continueButtonObject);\nwebKeyword.click(continueButtonObject);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần chờ phải tồn tại within DOM, và element sẽ trở thành hiển thị và có thể click within khoảng thời gian chờ. Có thể throw TimeoutException nếu element không trở nên có thể click within thời gian chờ mặc định, NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "waitForElementClickable",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần chờ để sẵn sàng click"
  } ]
}, {
  "name" : "assertElementCount",
  "description" : "Khẳng định rằng số lượng phần tử tìm thấy khớp với một con số mong đợi. Hữu ích khi cần kiểm tra số lượng các mục trong danh sách, số lượng tùy chọn, hoặc xác minh rằng một nhóm phần tử có số lượng chính xác. Phương thức này tìm tất cả các phần tử khớp với locator và so sánh số lượng với giá trị mong đợi.",
  "category" : "Mobile",
  "subCategory" : "Assertion",
  "example" : "// Kiểm tra số lượng sản phẩm trong giỏ hàng\nmobileKeyword.assertElementCount(cartItems, 3);\n\n// Xác minh danh sách rỗng sau khi xóa\nmobileKeyword.tap(clearAllButton);\nmobileKeyword.assertElementCount(listItems, 0);",
  "returnValue" : "void - Không trả về giá trị, ném AssertionError nếu kiểm tra thất bại",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Locator của phần tử phải hợp lệ và có thể tìm thấy nhiều phần tử. Nếu mong đợi không tìm thấy phần tử nào (count = 0), locator vẫn phải hợp lệ. Có thể throw AssertionError nếu số lượng phần tử tìm thấy không khớp với số lượng mong đợi, WebDriverException nếu có lỗi khi tương tác với trình điều khiển, hoặc InvalidSelectorException nếu locator không hợp lệ.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertElementCount",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Locator để tìm các phần tử"
  }, {
    "type" : "int",
    "name" : "expectedCount",
    "description" : "Số lượng phần tử mong đợi"
  } ]
}, {
  "name" : "assertAttributeContains",
  "description" : "Khẳng định rằng giá trị của một thuộc tính có chứa một chuỗi con. Khác với assertAttributeEquals, phương thức này chỉ kiểm tra sự xuất hiện của chuỗi con trong giá trị thuộc tính, không yêu cầu khớp hoàn toàn. Hữu ích khi giá trị thuộc tính có thể thay đổi nhưng vẫn chứa các phần quan trọng cần kiểm tra.",
  "category" : "Mobile",
  "subCategory" : "Assertion",
  "example" : "// Kiểm tra thuộc tính content-desc có chứa từ khóa\nmobileKeyword.assertAttributeContains(productItem, \"content-desc\", \"iPhone\");\n\n// Xác minh resource-id có chứa phần nhất định\nmobileKeyword.assertAttributeContains(anyElement, \"resource-id\", \"button_\");",
  "returnValue" : "void - Không trả về giá trị, ném AssertionError nếu kiểm tra thất bại",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Phần tử cần kiểm tra phải tồn tại, thuộc tính cần kiểm tra phải tồn tại trên phần tử, và cần biết chính xác tên thuộc tính theo nền tảng (Android/iOS có thể khác nhau). Có thể throw AssertionError nếu giá trị thuộc tính không chứa chuỗi con mong đợi, NoSuchElementException nếu không tìm thấy phần tử, StaleElementReferenceException nếu phần tử không còn gắn với DOM, WebDriverException nếu không thể lấy thuộc tính của phần tử, hoặc NullPointerException nếu giá trị thuộc tính là null.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertAttributeContains",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra thuộc tính"
  }, {
    "type" : "String",
    "name" : "attributeName",
    "description" : "Tên thuộc tính cần kiểm tra"
  }, {
    "type" : "String",
    "name" : "partialValue",
    "description" : "Chuỗi con cần tìm trong giá trị thuộc tính"
  } ]
}, {
  "name" : "verifyDataByQueryFile",
  "description" : "Thực thi câu lệnh SQL từ file và kiểm chứng kết quả với dữ liệu từ file dữ liệu. Phương thức này tách biệt câu truy vấn và dữ liệu kiểm chứng vào các file riêng biệt, giúp quản lý test case dễ dàng hơn.",
  "category" : "DB",
  "subCategory" : "Verification",
  "example" : "// Kiểm tra dữ liệu người dùng sử dụng file\ndatabaseKeyword.verifyDataByQueryFile(\n    \"mysql_dev\",\n    \"sql/get_user_by_department.sql\",\n    \"testdata/user_verification_data.xlsx\"\n);\n\n// File SQL có thể chứa: SELECT username, email, status FROM users WHERE department = ?\n// File dữ liệu có thể chứa: {param_1: \"IT\", username: \"john.doe\", email: \"john.doe@example.com\", status: \"active\"}",
  "returnValue" : "void - Không trả về giá trị, nhưng sẽ ném AssertionError nếu kiểm chứng thất bại",
  "note" : "Áp dụng cho tất cả nền tảng. Đã khởi tạo kết nối CSDL với profileName tương ứng, File SQL và file dữ liệu phải tồn tại và có định dạng hợp lệ. Có thể throw SQLException nếu có lỗi khi thực thi câu truy vấn, AssertionError nếu kết quả kiểm chứng không khớp với dữ liệu mong đợi, FileNotFoundException nếu không tìm thấy file SQL hoặc file dữ liệu, hoặc IOException nếu có lỗi khi đọc file.",
  "className" : "com.vtnet.netat.db.keywords.DatabaseKeyword",
  "methodName" : "verifyDataByQueryFile",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "profileName",
    "description" : "Tên của profile kết nối CSDL đã được khởi tạo trước đó"
  }, {
    "type" : "String",
    "name" : "queryPath",
    "description" : "Đường dẫn đến file chứa câu lệnh SQL cần thực thi"
  }, {
    "type" : "String",
    "name" : "dataFilePath",
    "description" : "Đường dẫn đến file dữ liệu chứa các tham số truy vấn và dữ liệu mong đợi"
  } ]
}, {
  "name" : "startBrowser",
  "description" : "Khởi tạo và mở một phiên trình duyệt (web) mới dựa trên cấu hình trong file properties. Nếu không có tham số, nó sẽ sử dụng 'platform.name' mặc định.",
  "category" : "DriverKeyword",
  "subCategory" : "",
  "example" : "// Khởi tạo trình duyệt mặc định\ndriverKeyword.startBrowser();",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho web",
  "className" : "com.vtnet.netat.core.keywords.DriverKeyword",
  "methodName" : "startBrowser",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "waitForElementNotVisible",
  "description" : "Tạm dừng kịch bản cho đến khi một element không còn hiển thị trên giao diện. Rất hữu ích để chờ các biểu tượng loading hoặc thông báo tạm thời biến mất.",
  "category" : "Web",
  "subCategory" : "Wait",
  "example" : "// Chờ biểu tượng loading biến mất sau khi gửi form\nwebKeyword.click(submitButtonObject);\nwebKeyword.waitForElementNotVisible(loadingSpinnerObject);\nwebKeyword.verifyElementVisible(successMessageObject);\n\n// Chờ popup đóng sau khi nhấn nút đóng\nwebKeyword.click(closePopupButtonObject);\nwebKeyword.waitForElementNotVisible(popupObject);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần chờ phải tồn tại within DOM hoặc đã hiển thị trước đó, và element sẽ trở thành không hiển thị within khoảng thời gian chờ. Có thể throw TimeoutException nếu element vẫn còn hiển thị sau thời gian chờ mặc định, NoSuchElementException nếu không tìm thấy element ban đầu, StaleElementReferenceException nếu element không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "waitForElementNotVisible",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần chờ cho đến khi nó biến mất"
  } ]
}, {
  "name" : "swipeDown",
  "description" : "Thực hiện hành động vuốt xuống dưới màn hình, tương đương với thao tác cuộn lên để xem nội dung phía trên. Phương thức này tự động tính toán các tọa độ dựa trên kích thước màn hình thiết bị hiện tại.",
  "category" : "Mobile",
  "subCategory" : "Gesture",
  "example" : "// Vuốt xuống với tốc độ mặc định\nmobileKeyword.swipeDown();\n\n// Vuốt xuống với tốc độ chậm hơn\nmobileKeyword.swipeDown(800);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Có thể throw WebDriverException nếu không thể thực hiện hành động vuốt.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "swipeDown",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "Integer[]",
    "name" : "durationInMs",
    "description" : "(Tùy chọn) Thời gian thực hiện vuốt (ms). Mặc định là 500ms nếu không được chỉ định"
  } ]
}, {
  "name" : "uploadFile",
  "description" : "Tải lên một file từ máy local bằng cách gửi đường dẫn file vào một element <input type='file'>.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Tải lên ảnh đại diện\nwebKeyword.uploadFile(avatarUploadInput, \"C:/Users/Tester/Pictures/avatar.jpg\");\n\n// Tải lên tài liệu PDF\nwebKeyword.uploadFile(documentUploadInput, \"D:/Documents/report.pdf\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element input phải có thuộc tính type='file', phải tồn tại within DOM (có thể ẩn nhưng phải tồn tại), file cần tải lên phải tồn tại tại đường dẫn được chỉ định, người dùng thực thi test phải có quyền truy cập vào file, và đường dẫn file phải is đường dẫn tuyệt đối. Có thể throw InvalidArgumentException nếu đường dẫn file không hợp lệ hoặc file không tồn tại, ElementNotInteractableException nếu element không phải is input type='file', StaleElementReferenceException nếu element không còn gắn với DOM, TimeoutException nếu element không xuất hiện within thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "uploadFile",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element input (type='file') để tải file lên"
  }, {
    "type" : "String",
    "name" : "filePath",
    "description" : "Đường dẫn tuyệt đối đến file cần tải lên trên máy"
  } ]
}, {
  "name" : "pushFile",
  "description" : "Đẩy một file từ máy tính vào một đường dẫn trên thiết bị di động. Hữu ích khi cần chuẩn bị dữ liệu hoặc tài nguyên cho test case. Lưu ý: Đường dẫn trên thiết bị phải là đường dẫn mà ứng dụng có quyền ghi. Trên Android, thường là trong /sdcard/. Trên iOS, cần sử dụng bundle path.",
  "category" : "Mobile",
  "subCategory" : "Utility",
  "example" : "// Đẩy một hình ảnh vào thư mục Downloads của thiết bị Android\nmobileKeyword.pushFile(\"/sdcard/Download/avatar.png\", \"C:/test-data/images/avatar.png\");\n\n// Đẩy file CSV chứa dữ liệu test\nmobileKeyword.pushFile(\"/sdcard/TestData/users.csv\", \"src/test/resources/testdata/users.csv\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. File nguồn phải tồn tại trên máy chạy test và đường dẫn đích trên thiết bị phải có quyền ghi. Trên Android không root, chỉ có thể ghi vào thư mục shared như /sdcard/. Trên iOS, cần sử dụng đường dẫn bundle đúng cú pháp. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình điều khiển, IOException nếu không thể đọc file nguồn, IllegalArgumentException nếu đường dẫn không hợp lệ, hoặc SecurityException nếu không có quyền ghi vào đường dẫn đích.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "pushFile",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "devicePath",
    "description" : "Đường dẫn đích trên thiết bị di động"
  }, {
    "type" : "String",
    "name" : "localFilePath",
    "description" : "Đường dẫn tuyệt đối đến file trên máy tính chạy test"
  } ]
}, {
  "name" : "extractTextByRegex",
  "description" : "Trích xuất một phần của chuỗi văn bản dựa trên một biểu thức chính quy (regex) và một nhóm (group) cụ thể. Phương thức này tìm kiếm sự xuất hiện đầu tiên của mẫu regex trong chuỗi văn bản và trả về giá trị của nhóm được chỉ định.",
  "category" : "Utility",
  "subCategory" : "String",
  "example" : "// Lấy mã đơn hàng '12345' từ chuỗi 'Mã đơn hàng của bạn là DH-12345'\nString orderCode = utilityKeyword.extractTextByRegex(\"Mã đơn hàng của bạn là DH-12345\", \"DH-(\\\\d+)\", 1);\n// orderCode sẽ có giá trị \"12345\"",
  "returnValue" : "String - Chuỗi văn bản được trích xuất từ nhóm được chỉ định, hoặc null nếu không tìm thấy kết quả khớp",
  "note" : "Áp dụng cho tất cả nền tảng. Có thể throw PatternSyntaxException nếu biểu thức chính quy không hợp lệ, hoặc IndexOutOfBoundsException nếu chỉ số nhóm không tồn tại.",
  "className" : "com.vtnet.netat.core.keywords.UtilityKeyword",
  "methodName" : "extractTextByRegex",
  "returnType" : "String",
  "parameters" : [ {
    "type" : "String",
    "name" : "text",
    "description" : "Chuỗi văn bản nguồn cần trích xuất dữ liệu"
  }, {
    "type" : "String",
    "name" : "regex",
    "description" : "Biểu thức chính quy để tìm kiếm mẫu trong chuỗi văn bản"
  }, {
    "type" : "int",
    "name" : "group",
    "description" : "Chỉ số của nhóm cần trích xuất (0 cho toàn bộ kết quả khớp, 1 cho nhóm đầu tiên, v.v.)"
  } ]
}, {
  "name" : "verifyElementNotPresentHard",
  "description" : "Khẳng định rằng một element does not exist within DOM sau một khoảng thời gian chờ. Nếu element vẫn tồn tại, kịch bản sẽ DỪNG LẠI.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify element đã bị xóa\nwebKeyword.click(deleteButtonObject);\nwebKeyword.verifyElementNotPresentHard(deletedItemObject, 5);\n\n// Verify thông báo lỗi đã biến mất\nwebKeyword.sendKeys(emailInput, \"valid@example.com\");\nwebKeyword.verifyElementNotPresentHard(errorMessageObject, 3);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động. Có thể throw AssertionError nếu element vẫn tồn tại within DOM sau thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyElementNotPresentHard",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần Verify"
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa"
  } ]
}, {
  "name" : "resetApp",
  "description" : "Reset ứng dụng về trạng thái ban đầu, tương đương với việc xóa dữ liệu ứng dụng. Phương thức này giúp đưa ứng dụng về trạng thái như mới cài đặt mà không cần gỡ và cài đặt lại. Phương thức này chỉ reset trạng thái đầu vào (input state) của ứng dụng, không phải toàn bộ dữ liệu. Để xóa hoàn toàn dữ liệu ứng dụng, nên sử dụng executeMobileCommand với 'mobile:clearApp' trên Android hoặc gỡ và cài đặt lại trên iOS.",
  "category" : "Mobile",
  "subCategory" : "AppLifecycle",
  "example" : "// Reset ứng dụng về trạng thái ban đầu trước mỗi test case\nmobileKeyword.resetApp();\n\n// Reset sau khi hoàn thành một luồng test để chuẩn bị cho luồng tiếp theo\nmobileKeyword.completeCheckout();\nmobileKeyword.resetApp();\nmobileKeyword.loginWithCredentials(username, password);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Ứng dụng đã được khởi động trước đó. Có thể throw WebDriverException nếu không thể reset ứng dụng.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "resetApp",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "takeScreenshot",
  "description" : "Chụp ảnh màn hình của thiết bị và lưu vào thư mục screenshots với tên file được chỉ định. Hữu ích khi cần ghi lại trạng thái màn hình tại các điểm quan trọng trong quá trình test, đặc biệt là khi gặp lỗi hoặc cần xác minh giao diện. Ảnh chụp màn hình sẽ được lưu với định dạng .png và tự động đính kèm vào báo cáo Allure nếu được cấu hình.",
  "category" : "Mobile",
  "subCategory" : "System",
  "example" : "// Chụp màn hình tại các bước quan trọng\nmobileKeyword.takeScreenshot(\"login_screen\");\nmobileKeyword.tap(loginButton);\nmobileKeyword.takeScreenshot(\"after_login\");\n\n// Chụp màn hình khi gặp lỗi\ntry {\n    mobileKeyword.tap(submitButton);\n} catch (Exception e) {\n    mobileKeyword.takeScreenshot(\"error_submit_form\");\n    throw e;\n}",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Thư mục screenshots phải tồn tại hoặc có quyền tạo và ứng dụng Appium phải có quyền chụp ảnh màn hình. Có thể throw WebDriverException nếu có lỗi khi chụp ảnh màn hình, IOException nếu không thể lưu ảnh vào thư mục chỉ định, hoặc IllegalArgumentException nếu tên file không hợp lệ.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "takeScreenshot",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "fileName",
    "description" : "Tên file để lưu ảnh (không cần đuôi .png)"
  } ]
}, {
  "name" : "pause",
  "description" : "Tạm dừng việc thực thi kịch bản trong một khoảng thời gian tĩnh. (Lưu ý: Chỉ nên dùng khi thực sự cần thiết, ưu tiên các keyword chờ động).",
  "category" : "Mobile",
  "subCategory" : "Utility",
  "example" : "// Tạm dừng để đợi animation hoàn thành\nmobileKeyword.pause(3000); // Đợi 3 giây cho quá trình xử lý\n",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Không có điều kiện tiên quyết đặc biệt. Có thể throw InterruptedException nếu luồng thực thi bị gián đoạn trong khi tạm dừng.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "pause",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "int",
    "name" : "milliseconds",
    "description" : "Thời gian cần tạm dừng (tính bằng mili giây)"
  } ]
}, {
  "name" : "goBack",
  "description" : "Thực hiện hành động quay lại trang trước đó within lịch sử of trình duyệt, tương đương với việc người dùng nhấn nút 'Back'.",
  "category" : "Web",
  "subCategory" : "Browser",
  "example" : "// Quay lại trang trước sau khi đã điều hướng\nwebKeyword.openUrl(\"https://example.com/page1\");\nwebKeyword.openUrl(\"https://example.com/page2\");\nwebKeyword.goBack(); // Quay lại page1\n\n// Quay lại sau khi nhấp vào liên kết\nwebKeyword.click(linkToDetailsPage);\nwebKeyword.goBack();",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và phải có ít nhất một trang đã được truy cập trước đó within lịch sử of phiên hiện tại. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình duyệt, hoặc NoSuchSessionException nếu phiên WebDriver không còn hợp lệ.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "goBack",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "selectByVisibleText",
  "description" : "Chọn một option in dropdown dựa trên text hiển thị of nó.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Chọn quốc gia từ dropdown theo tên hiển thị\nwebKeyword.selectByVisibleText(countryDropdown, \"Việt Nam\");\n\n// Chọn danh mục sản phẩm\nwebKeyword.selectByVisibleText(categoryDropdown, \"Điện thoại & Máy tính bảng\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element dropdown phải tồn tại within DOM, phải is thẻ <select> hợp lệ, phải hiển thị và có thể tương tác được, phải tồn tại ít nhất một option có text hiển thị khớp chính xác với text cần chọn, và text cần chọn phải khớp chính xác với text hiển thị (phân biệt chữ hoa/thường, khoảng trắng, ký tự đặc biệt). Có thể throw NoSuchElementException nếu không tìm thấy option với text hiển thị chỉ định, ElementNotVisibleException nếu element không hiển thị trên trang, ElementNotInteractableException nếu element không thể tương tác, StaleElementReferenceException nếu element không còn gắn với DOM, UnexpectedTagNameException nếu element không phải is thẻ <select>, TimeoutException nếu element không xuất hiện within thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "selectByVisibleText",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element dropdown (thẻ select)"
  }, {
    "type" : "String",
    "name" : "text",
    "description" : "text hiển thị of option cần chọn"
  } ]
}, {
  "name" : "dragAndDrop",
  "description" : "Thực hiện thao tác kéo một element (nguồn) và thả nó vào vị trí of một element khác (đích).",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Kéo và thả một mục vào giỏ hàng\nwebKeyword.dragAndDrop(productItemObject, cartDropZoneObject);\n\n// Kéo và thả để sắp xếp lại danh sách\nwebKeyword.dragAndDrop(taskItemObject, topOfListObject);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, cả hai element nguồn và đích phải tồn tại within DOM, phải hiển thị và có thể tương tác được, trang web phải hỗ trợ thao tác kéo và thả, và trình duyệt phải hỗ trợ thao tác kéo và thả (một số trình duyệt di động có thể không hỗ trợ đầy đủ). Có thể throw ElementNotVisibleException nếu một within hai element không hiển thị trên trang, ElementNotInteractableException nếu một within hai element không thể tương tác, StaleElementReferenceException nếu một within hai element không còn gắn với DOM, TimeoutException nếu một within hai element không xuất hiện within thời gian chờ, WebDriverException nếu có lỗi khi tương tác với trình duyệt, hoặc MoveTargetOutOfBoundsException nếu element đích nằm ngoài viewport hiện tại.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "dragAndDrop",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "sourceObject",
    "description" : "element nguồn cần được kéo đi"
  }, {
    "type" : "ObjectUI",
    "name" : "targetObject",
    "description" : "element đích, nơi element nguồn sẽ được thả vào"
  } ]
}, {
  "name" : "verifyAlertPresent",
  "description" : "Khẳng định rằng một hộp thoại alert đang hiển thị within một khoảng thời gian chờ.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify alert xuất hiện sau khi xóa\nwebKeyword.click(deleteButtonObject);\nwebKeyword.verifyAlertPresent(5);\nwebKeyword.acceptAlert(); // Xác nhận xóa\n\n// Verify alert xuất hiện khi rời trang có dữ liệu chưa lưu\nwebKeyword.sendKeys(commentField, \"Bình luận mới\");\nwebKeyword.click(backButtonObject);\nwebKeyword.verifyAlertPresent(3);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, trang web có thể hiển thị hộp thoại alert. Có thể throw AssertionError nếu không có hộp thoại alert xuất hiện within thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyAlertPresent",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa"
  } ]
}, {
  "name" : "executeCommand",
  "description" : "Thực thi một lệnh trên command line của hệ điều hành và chờ cho đến khi nó hoàn thành. Phương thức này cho phép thực thi các lệnh hệ thống từ trong kịch bản kiểm thử, hữu ích cho các tác vụ như khởi động/dừng dịch vụ, xóa tệp, hoặc các tác vụ hệ thống khác.",
  "category" : "Utility",
  "subCategory" : "Command",
  "example" : "// Dừng tất cả các tiến trình Chrome trên Windows\nutilityKeyword.executeCommand(\"taskkill\", \"/F\", \"/IM\", \"chrome.exe\");\n\n// Liệt kê các tệp trong thư mục hiện tại trên Linux/Mac\nutilityKeyword.executeCommand(\"ls\", \"-la\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho tất cả nền tảng. Cần quyền thực thi lệnh trên hệ điều hành. Có thể throw IOException nếu có lỗi khi thực thi lệnh, hoặc SecurityException nếu không có quyền thực thi lệnh.",
  "className" : "com.vtnet.netat.core.keywords.UtilityKeyword",
  "methodName" : "executeCommand",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String[]",
    "name" : "command",
    "description" : "Lệnh và các tham số của nó, mỗi phần tử trong mảng là một phần riêng biệt của lệnh"
  } ]
}, {
  "name" : "activateApp",
  "description" : "Đưa một ứng dụng đã được cài đặt lên foreground (màn hình chính). Hữu ích khi cần chuyển đổi giữa các ứng dụng hoặc kích hoạt lại ứng dụng đang chạy nền. Ứng dụng phải đã được cài đặt trên thiết bị, nếu không sẽ gây ra lỗi. Không giống như startActivity trên Android, phương thức này hoạt động trên cả Android và iOS với cùng một cú pháp.",
  "category" : "Mobile",
  "subCategory" : "AppLifecycle",
  "example" : "// Kích hoạt ứng dụng chính đang test\nmobileKeyword.activateApp(\"com.example.myapp\");\n\n// Chuyển sang ứng dụng cài đặt để thay đổi cấu hình thiết bị\nmobileKeyword.activateApp(\"com.android.settings\"); // Android\n// hoặc\nmobileKeyword.activateApp(\"com.apple.Preferences\"); // iOS\n\n// Quay lại ứng dụng chính sau khi thực hiện thao tác trên ứng dụng khác\nmobileKeyword.activateApp(\"com.example.myapp\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Ứng dụng đã được cài đặt trên thiết bị. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Có thể throw WebDriverException nếu không thể kích hoạt ứng dụng, hoặc NoSuchAppException nếu ứng dụng không được cài đặt trên thiết bị.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "activateApp",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "appId",
    "description" : "AppPackage (Android) hoặc BundleID (iOS) của ứng dụng cần kích hoạt"
  } ]
}, {
  "name" : "getCurrentUrl",
  "description" : "Lấy và trả về URL đầy đủ of trang web hiện tại mà trình duyệt đang hiển thị.",
  "category" : "Web",
  "subCategory" : "Getter",
  "example" : "// Verify URL sau khi điều hướng\nwebKeyword.navigateToUrl(\"https://example.com/products\");\nString currentUrl = webKeyword.getCurrentUrl();\nwebKeyword.verifyEqual(currentUrl, \"https://example.com/products\");\n\n// Verify URL sau khi gửi form\nwebKeyword.click(submitButtonObject);\nString resultUrl = webKeyword.getCurrentUrl();\nwebKeyword.verifyContains(resultUrl, \"success=true\");",
  "returnValue" : "String - URL đầy đủ of trang web hiện tại",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình duyệt, hoặc NoSuchSessionException nếu phiên WebDriver không còn hợp lệ.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "getCurrentUrl",
  "returnType" : "String",
  "parameters" : [ ]
}, {
  "name" : "setLocalStorage",
  "description" : "Ghi một cặp khóa-giá trị vào Local Storage of trình duyệt. Hữu ích để thiết lập trạng thái ứng dụng hoặc token.",
  "category" : "Web",
  "subCategory" : "Storage",
  "example" : "// Thiết lập token xác thực người dùng\nwebKeyword.setLocalStorage(\"user_token\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\");\nwebKeyword.navigate(\"https://example.com/dashboard\");\n\n// Lưu trạng thái giỏ hàng\nwebKeyword.setLocalStorage(\"cart_items\", \"[{\\\"id\\\":123,\\\"quantity\\\":2}]\");\nwebKeyword.refreshPage();",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, trang web đã được tải hoàn toàn, trình duyệt hỗ trợ Local Storage. Có thể throw JavascriptException nếu có lỗi khi thực thi JavaScript, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "setLocalStorage",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "key",
    "description" : "Khóa (key) để lưu trữ"
  }, {
    "type" : "String",
    "name" : "value",
    "description" : "Giá trị (value) tương ứng"
  } ]
}, {
  "name" : "scrollToCoordinates",
  "description" : "Cuộn trang web đến một tọa độ (x, y) cụ thể within viewport.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Cuộn xuống 500px từ đầu trang\nwebKeyword.scrollToCoordinates(0, 500);\n\n// Cuộn đến đầu trang\nwebKeyword.scrollToCoordinates(0, 0);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, trình duyệt phải hỗ trợ thực thi JavaScript, và tọa độ phải nằm within phạm vi hợp lệ of trang web. Có thể throw JavascriptException nếu có lỗi khi thực thi JavaScript, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "scrollToCoordinates",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "int",
    "name" : "x",
    "description" : "Tọa độ theo trục hoành (pixel)"
  }, {
    "type" : "int",
    "name" : "y",
    "description" : "Tọa độ theo trục tung (pixel)"
  } ]
}, {
  "name" : "verifyOrientation",
  "description" : "Khẳng định rằng màn hình thiết bị đang ở hướng dọc (PORTRAIT) hoặc ngang (LANDSCAPE). Hữu ích để đảm bảo ứng dụng hiển thị đúng hướng trước khi thực hiện các thao tác tiếp theo. Phương thức hoạt động trên cả Android và iOS. Nếu hướng màn hình không khớp với giá trị mong đợi, một AssertionError sẽ được ném ra.",
  "category" : "Mobile",
  "subCategory" : "Assertion",
  "example" : "// Kiểm tra rằng ứng dụng đang ở chế độ dọc trước khi tiếp tục\nmobileKeyword.verifyOrientation(\"PORTRAIT\");\n\n// Xoay thiết bị và xác minh hướng ngang\nrotateDevice();\nmobileKeyword.verifyOrientation(\"LANDSCAPE\");",
  "returnValue" : "void - Không trả về giá trị, ném AssertionError nếu kiểm tra thất bại",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Đang sử dụng AndroidDriver hoặc IOSDriver, và tham số expectedOrientation phải là 'PORTRAIT' hoặc 'LANDSCAPE'. Có thể throw AssertionError nếu hướng màn hình không khớp với giá trị mong đợi, IllegalArgumentException nếu giá trị expectedOrientation không hợp lệ, UnsupportedOperationException nếu loại driver không được hỗ trợ, hoặc WebDriverException nếu không thể lấy thông tin hướng màn hình.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "verifyOrientation",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "expectedOrientation",
    "description" : "Hướng màn hình mong đợi, phải là 'PORTRAIT' hoặc 'LANDSCAPE' (không phân biệt hoa/thường)"
  } ]
}, {
  "name" : "verifyElementEnabledSoft",
  "description" : "Verify một element có đang ở trạng thái enabled hay không. Nếu không, kịch bản sẽ ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify nhiều trường nhập liệu option có thể tương tác\nwebKeyword.verifyElementEnabledSoft(optionalFieldObject);\nwebKeyword.verifyElementEnabledSoft(commentFieldObject);\nwebKeyword.sendKeys(commentFieldObject, \"Đây is bình luận of tôi\"); // Tiếp tục ngay cả khi có trường không enabled\n\n// Verify các nút chức năng within trang quản trị\nwebKeyword.verifyElementEnabledSoft(addButtonObject);\nwebKeyword.verifyElementEnabledSoft(editButtonObject);\nwebKeyword.click(addButtonObject); // Tiếp tục thực hiện hành động",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và element cần Verify phải tồn tại within DOM. Có thể throw NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyElementEnabledSoft",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần Verify"
  } ]
}, {
  "name" : "swipeUp",
  "description" : "Thực hiện hành động vuốt lên trên màn hình, tương đương với thao tác cuộn xuống để xem nội dung bên dưới. Phương thức này tự động tính toán các tọa độ dựa trên kích thước màn hình thiết bị.",
  "category" : "Mobile",
  "subCategory" : "Gesture",
  "example" : "// Vuốt lên với tốc độ mặc định\nmobileKeyword.swipeUp();\n\n// Vuốt lên với tốc độ chậm hơn\nmobileKeyword.swipeUp(1000);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Có thể throw WebDriverException nếu không thể thực hiện hành động vuốt.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "swipeUp",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "Integer[]",
    "name" : "durationInMs",
    "description" : "(Tùy chọn) Thời gian thực hiện vuốt (ms). Mặc định là 500ms nếu không được chỉ định"
  } ]
}, {
  "name" : "sendKeys",
  "description" : "Nhập một chuỗi text vào một element (thường is ô input hoặc textarea). Keyword sẽ tự động xóa nội dung có sẵn within ô trước khi Enter text mới.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Nhập tên đăng nhập\nwebKeyword.sendKeys(usernameInputObject, \"my_username\");\n\n// Nhập nội dung tìm kiếm\nwebKeyword.sendKeys(searchInputObject, \"laptop gaming\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần nhập liệu phải tồn tại within DOM, phải hiển thị và có thể tương tác được, và phải is loại có thể nhập liệu (input, textarea, contenteditable). Có thể throw ElementNotVisibleException nếu element không hiển thị trên trang, ElementNotInteractableException nếu element không thể tương tác, StaleElementReferenceException nếu element không còn gắn với DOM, TimeoutException nếu element không xuất hiện within thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "sendKeys",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Ô input hoặc textarea cần nhập dữ liệu"
  }, {
    "type" : "String",
    "name" : "text",
    "description" : "Chuỗi text cần nhập vào element"
  } ]
}, {
  "name" : "assertAll",
  "description" : "Thực hiện kiểm tra tất cả các soft assertion đã được thu thập trước đó. Nếu có bất kỳ assertion nào thất bại, phương thức sẽ ném ra ngoại lệ với thông tin chi tiết về các lỗi. Sau khi gọi phương thức này, soft assert sẽ được reset về null.",
  "category" : "Assertion",
  "subCategory" : "",
  "example" : "// Sau khi thực hiện nhiều soft assertion\nsoftAssert.assertEquals(actualTitle, expectedTitle, \"Title không khớp\");\nsoftAssert.assertTrue(isElementDisplayed, \"Element không hiển thị\");\n// Thực hiện kiểm tra tất cả các assertion\nassertAll();",
  "returnValue" : "void: Không trả về giá trị",
  "note" : "",
  "className" : "com.vtnet.netat.core.keywords.AssertionKeyword",
  "methodName" : "assertAll",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "startApplication",
  "description" : "Khởi chạy một phiên làm việc mới hoặc kích hoạt lại ứng dụng nếu nó đang chạy nền. Luôn đảm bảo ứng dụng đang ở foreground. Nếu phiên làm việc đã tồn tại, phương thức sẽ kích hoạt lại ứng dụng bằng cách sử dụng appPackage hoặc bundleId từ file cấu hình.",
  "category" : "DriverKeyword",
  "subCategory" : "",
  "example" : "// Khởi chạy ứng dụng trên Android\ndriverKeyword.startApplication(\"android\");\n\n// Khởi chạy ứng dụng với cấu hình mặc định\ndriverKeyword.startApplication();",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho Android và iOS. File cấu hình properties phải chứa 'capability.appium.appPackage' (Android) hoặc 'capability.appium.bundleId' (iOS). Appium server phải đang chạy. Có thể throw WebDriverException nếu không thể khởi tạo driver hoặc kích hoạt ứng dụng, ConfigurationException nếu thiếu thông tin cấu hình.",
  "className" : "com.vtnet.netat.core.keywords.DriverKeyword",
  "methodName" : "startApplication",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String[]",
    "name" : "platformName",
    "description" : "Tên nền tảng di động ('android', 'ios')"
  } ]
}, {
  "name" : "hover",
  "description" : "Di chuyển con trỏ chuột đến vị trí of một element để hiển thị các menu con, tooltip, hoặc các hiệu ứng khác.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Di chuột đến menu chính để hiển thị menu con\nwebKeyword.hover(mainMenuObject);\nwebKeyword.waitForElementVisible(subMenuObject);\n\n// Di chuột đến biểu tượng để hiển thị tooltip\nwebKeyword.hover(infoIconObject);\nwebKeyword.waitForElementVisible(tooltipObject);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần hover phải tồn tại within DOM, phải hiển thị trên trang, và trình duyệt phải hỗ trợ thao tác di chuột (một số trình duyệt di động có thể không hỗ trợ). Có thể throw ElementNotVisibleException nếu element không hiển thị trên trang, StaleElementReferenceException nếu element không còn gắn với DOM, TimeoutException nếu element không xuất hiện within thời gian chờ, WebDriverException nếu có lỗi khi tương tác với trình duyệt, hoặc MoveTargetOutOfBoundsException nếu element nằm ngoài viewport hiện tại.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "hover",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần di chuột đến"
  } ]
}, {
  "name" : "pullFile",
  "description" : "Kéo một file từ thiết bị về máy tính và trả về nội dung dưới dạng chuỗi (đã được giải mã Base64). Hữu ích khi cần lấy các file log, dữ liệu hoặc tài nguyên từ thiết bị để phân tích hoặc xác minh. Lưu ý: Đường dẫn phải trỏ đến một file có thể truy cập được từ ứng dụng (với quyền thích hợp). Trên Android không root, thường chỉ có thể truy cập các file trong thư mục ứng dụng.",
  "category" : "Mobile",
  "subCategory" : "Utility",
  "example" : "// Lấy nội dung file log để kiểm tra\nString logContent = mobileKeyword.pullFile(\"/sdcard/Download/app.log\");\nassert logContent.contains(\"Transaction completed\");\n\n// Lấy file cấu hình để xác minh thiết lập\nString configContent = mobileKeyword.pullFile(\"/data/data/com.example.myapp/files/config.json\");\nJSONObject config = new JSONObject(configContent);\nassert config.getBoolean(\"darkMode\");",
  "returnValue" : "String - Nội dung của file được trả về dưới dạng chuỗi (đã giải mã Base64)",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. File cần lấy phải tồn tại trên thiết bị và ứng dụng phải có quyền đọc file đó. Trên Android không root, chỉ có thể đọc file từ thư mục ứng dụng hoặc thư mục shared. Trên iOS, cần sử dụng đường dẫn bundle đúng cú pháp. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình điều khiển, NoSuchFileException nếu file không tồn tại trên thiết bị, SecurityException nếu không có quyền đọc file, hoặc IllegalArgumentException nếu đường dẫn không hợp lệ.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "pullFile",
  "returnType" : "String",
  "parameters" : [ {
    "type" : "String",
    "name" : "devicePath",
    "description" : "Đường dẫn đến file trên thiết bị"
  } ]
}, {
  "name" : "connectDatabase",
  "description" : "Khởi tạo một connection pool dựa trên file profile. File profile chứa các thông tin cấu hình kết nối như URL, username, password, driver class, và các thuộc tính kết nối khác.",
  "category" : "DB",
  "subCategory" : "Connection",
  "example" : "// Khởi tạo kết nối đến cơ sở dữ liệu từ file cấu hình\ndatabaseKeyword.connectDatabase(\"profiles/mysql_dev.properties\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho tất cả nền tảng. File profile phải tồn tại và chứa thông tin cấu hình hợp lệ. Có thể throw SQLException nếu không thể thiết lập kết nối đến CSDL, FileNotFoundException nếu không tìm thấy file profile, hoặc ConfigurationException nếu thông tin cấu hình trong profile không hợp lệ.",
  "className" : "com.vtnet.netat.db.keywords.DatabaseKeyword",
  "methodName" : "connectDatabase",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "profilePath",
    "description" : "Đường dẫn đến file profile chứa thông tin cấu hình kết nối CSDL"
  } ]
}, {
  "name" : "waitForNotVisible",
  "description" : "Chờ cho đến khi một phần tử biến mất khỏi màn hình hoặc cho đến khi hết thời gian chờ. Phần tử được coi là không hiển thị khi nó không tồn tại trong DOM hoặc không thể nhìn thấy được (invisible). Hữu ích khi cần đảm bảo một phần tử đã biến mất (như màn hình loading) trước khi tiếp tục. Nếu phần tử vẫn hiển thị sau khi hết thời gian chờ, một TimeoutException sẽ được ném ra.",
  "category" : "Mobile",
  "subCategory" : "Wait",
  "example" : "// Chờ màn hình loading biến mất\nmobileKeyword.waitForNotVisible(loadingSpinner, 15);\n\n// Chờ dialog đóng\nmobileKeyword.waitForNotVisible(dialog, 3);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Đã xác định chính xác phần tử UI cần chờ đợi. Có thể throw TimeoutException nếu phần tử vẫn hiển thị sau khi hết thời gian chờ, hoặc StaleElementReferenceException nếu phần tử không còn gắn với DOM.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "waitForNotVisible",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần chờ biến mất"
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian tối đa (giây) để chờ phần tử biến mất"
  } ]
}, {
  "name" : "longPressByCoordinates",
  "description" : "Thực hiện hành động chạm và giữ tại một tọa độ (x, y) trong một khoảng thời gian xác định. Hữu ích khi cần thực hiện các thao tác đặc biệt như hiển thị menu ngữ cảnh tại một vị trí cụ thể, hoặc khi tương tác với các phần tử không thể định vị bằng locator. Tọa độ được tính theo pixel từ góc trên bên trái của màn hình (0,0).",
  "category" : "Mobile",
  "subCategory" : "Gesture",
  "example" : "// Chạm và giữ tại trung tâm màn hình trong 2 giây\nDimension size = DriverManager.getDriver().manage().window().getSize();\nmobileKeyword.longPressByCoordinates(size.width / 2, size.height / 2, 2);\n\n// Chạm và giữ tại một vị trí trên bản đồ để thả ghim\nmobileKeyword.longPressByCoordinates(450, 800, 1);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Tọa độ cần nằm trong phạm vi kích thước màn hình của thiết bị và ứng dụng phải hỗ trợ thao tác chạm và giữ tại vị trí đó. Có thể throw WebDriverException nếu có lỗi khi thực hiện hành động chạm và giữ, hoặc IllegalArgumentException nếu tọa độ nằm ngoài kích thước màn hình hoặc thời gian giữ không hợp lệ.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "longPressByCoordinates",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "int",
    "name" : "x",
    "description" : "Tọa độ theo trục ngang (pixel)"
  }, {
    "type" : "int",
    "name" : "y",
    "description" : "Tọa độ theo trục dọc (pixel)"
  }, {
    "type" : "int",
    "name" : "durationInSeconds",
    "description" : "Thời gian giữ (tính bằng giây)"
  } ]
}, {
  "name" : "getElementHeight",
  "description" : "Lấy và trả về chiều cao của một phần tử (tính bằng pixel). Hữu ích khi cần tính toán vị trí tương đối hoặc kiểm tra kích thước hiển thị của phần tử. Phương thức này trả về giá trị số nguyên đại diện cho chiều cao theo pixel của phần tử. Lưu ý: Phần tử phải hiển thị trên màn hình để có thể lấy được kích thước chính xác.",
  "category" : "Mobile",
  "subCategory" : "Getter",
  "example" : "// Lấy chiều cao của một hình ảnh\nint imageHeight = mobileKeyword.getElementHeight(productImage);\n\n// Kiểm tra xem phần tử có kích thước đúng không\nint cardHeight = mobileKeyword.getElementHeight(cardElement);\nassert cardHeight > 200 : \"Card height is too small\";",
  "returnValue" : "int - Chiều cao của phần tử tính bằng pixel",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Phần tử cần đo phải tồn tại và hiển thị trên màn hình, và phải có kích thước xác định (không phải phần tử ẩn hoặc có kích thước 0). Có thể throw NoSuchElementException nếu không tìm thấy phần tử, StaleElementReferenceException nếu phần tử không còn gắn với DOM, hoặc WebDriverException nếu không thể lấy kích thước của phần tử.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "getElementHeight",
  "returnType" : "int",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần lấy chiều cao"
  } ]
}, {
  "name" : "getCurrentActivity",
  "description" : "Lấy tên Activity hiện tại đang được hiển thị trên màn hình Android",
  "category" : "Mobile",
  "subCategory" : "AppLifecycle",
  "example" : "String activityName = getCurrentActivity();",
  "returnValue" : "String - Tên của Activity hiện tại, null nếu không phải Android",
  "note" : "Keyword này chỉ hoạt động trên Android. Trên iOS sẽ trả về null và ghi log cảnh báo. Activity name thường có định dạng như 'com.example.MainActivity'.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "getCurrentActivity",
  "returnType" : "String",
  "parameters" : [ ]
}, {
  "name" : "waitForVisible",
  "description" : "Chờ cho đến khi một phần tử hiển thị trên màn hình hoặc cho đến khi hết thời gian chờ. Phần tử được coi là hiển thị khi nó tồn tại trong DOM và có thể nhìn thấy được (visible). Hữu ích khi cần đảm bảo một phần tử đã xuất hiện trước khi tương tác với nó. Nếu phần tử không hiển thị sau khi hết thời gian chờ, một TimeoutException sẽ được ném ra.",
  "category" : "Mobile",
  "subCategory" : "Wait",
  "example" : "// Chờ nút đăng nhập hiển thị\nmobileKeyword.waitForVisible(loginButton, 5);\nmobileKeyword.tap(loginButton);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Đã xác định chính xác phần tử UI cần chờ đợi. Có thể throw TimeoutException nếu phần tử không hiển thị trong thời gian chờ đợi, StaleElementReferenceException nếu phần tử không còn gắn với DOM, hoặc NoSuchElementException nếu không tìm thấy phần tử trong DOM.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "waitForVisible",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần chờ hiển thị"
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian tối đa (giây) để chờ phần tử hiển thị"
  } ]
}, {
  "name" : "verifyCssValueSoft",
  "description" : "So sánh giá trị of một thuộc tính CSS trên element. Nếu không khớp, kịch bản sẽ ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify độ đậm of tiêu đề\nwebKeyword.verifyCssValueSoft(titleObject, \"font-weight\", \"700\");\nwebKeyword.click(nextButtonObject); // Tiếp tục quy trình\n\n// Verify màu nền of nút\nwebKeyword.verifyCssValueSoft(buttonObject, \"background-color\", \"rgb(0, 123, 255)\");\nwebKeyword.click(buttonObject);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và element cần Verify phải tồn tại within DOM. Có thể throw NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyCssValueSoft",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần Verify"
  }, {
    "type" : "String",
    "name" : "cssName",
    "description" : "Tên thuộc tính CSS (ví dụ: 'font-weight')"
  }, {
    "type" : "String",
    "name" : "expectedValue",
    "description" : "Giá trị CSS mong đợi (ví dụ: '700')"
  } ]
}, {
  "name" : "check",
  "description" : "Verify và đảm bảo một checkbox hoặc radio button đang ở trạng thái được chọn. Nếu element is not selected, keyword sẽ thực hiện click để chọn nó.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Đảm bảo checkbox Điều khoản và Điều kiện is selected\nwebKeyword.check(termsAndConditionsCheckbox);\n\n// Chọn phương thức thanh toán\nwebKeyword.check(creditCardRadioButton);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần chọn phải tồn tại within DOM, phải hiển thị và có thể tương tác được, và phải is checkbox hoặc radio button (input type=\"checkbox\" hoặc type=\"radio\"). Có thể throw ElementNotVisibleException nếu element không hiển thị trên trang, ElementNotInteractableException nếu element không thể tương tác, StaleElementReferenceException nếu element không còn gắn với DOM, TimeoutException nếu element không xuất hiện within thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "check",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element checkbox hoặc radio button cần Verify và chọn"
  } ]
}, {
  "name" : "isElementPresent",
  "description" : "Verify xem một element có tồn tại within DOM hay không within một khoảng thời gian chờ nhất định. Trả về true nếu tìm thấy, false nếu không tìm thấy và không ném ra exception.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify thông báo lỗi có xuất hiện không\nboolean isErrorVisible = webKeyword.isElementPresent(errorMessageObject, 5);\nif (isErrorVisible) {\n    // Xử lý khi có lỗi\n}\n\n// Verify element option có tồn tại không\nif (webKeyword.isElementPresent(optionalElementObject, 2)) {\n    webKeyword.click(optionalElementObject);\n}",
  "returnValue" : "boolean - true nếu element tồn tại, false nếu không tồn tại",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "isElementPresent",
  "returnType" : "boolean",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần tìm kiếm"
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa (tính bằng seconds)"
  } ]
}, {
  "name" : "pause",
  "description" : "Tạm dừng việc thực thi kịch bản within một khoảng thời gian tĩnh. (Lưu ý: Chỉ nên dùng khi thực sự cần thiết, ưu tiên các keyword chờ động).",
  "category" : "Web",
  "subCategory" : "Utility",
  "example" : "// Tạm dừng để đợi animation hoàn thành\nwebKeyword.click(expandMenuButtonObject);\nwebKeyword.pause(1000); // Đợi 1 seconds cho animation menu mở ra\nwebKeyword.click(menuItemObject);\n\n// Tạm dừng để đợi dữ liệu được xử lý\nwebKeyword.click(generateReportButtonObject);\nwebKeyword.pause(3000); // Đợi 3 seconds cho quá trình xử lý\nwebKeyword.verifyElementVisibleHard(reportResultObject, 10);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. Không có điều kiện tiên quyết đặc biệt. Có thể throw InterruptedException nếu luồng thực thi bị gián đoạn within khi tạm dừng.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "pause",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "int",
    "name" : "milliseconds",
    "description" : "Thời gian cần tạm dừng (tính bằng mili seconds)"
  } ]
}, {
  "name" : "Assert Less Than Or Equal",
  "description" : "Khẳng định rằng giá trị thực tế nhỏ hơn hoặc bằng giá trị so sánh. Nếu không thỏa mãn, test case sẽ dừng lại và báo lỗi",
  "category" : "Assertion",
  "subCategory" : "",
  "example" : "assertLessThanOrEqual(10, 10); // 10 <= 10",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Tự động xử lý so sánh giữa số và chuỗi số. Assertion sẽ fail nếu actualValue > expectedValue.",
  "className" : "com.vtnet.netat.core.keywords.AssertionKeyword",
  "methodName" : "assertLessThanOrEqual",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "Object",
    "name" : "actualValue",
    "description" : "Giá trị thực tế cần so sánh (số hoặc chuỗi số)"
  }, {
    "type" : "Object",
    "name" : "expectedValue",
    "description" : "Giá trị mong đợi để so sánh (actualValue phải nhỏ hơn hoặc bằng giá trị này)"
  } ]
}, {
  "name" : "uninstallApp",
  "description" : "Gỡ cài đặt một ứng dụng khỏi thiết bị dựa trên định danh của ứng dụng. Trên Android, đây là package name (ví dụ: com.example.myapp). Trên iOS, đây là bundle ID (ví dụ: com.example.MyApp). Một số ứng dụng hệ thống không thể gỡ cài đặt ngay cả khi có quyền root/jailbreak.",
  "category" : "Mobile",
  "subCategory" : "AppLifecycle",
  "example" : "// Gỡ cài đặt ứng dụng Android\nmobileKeyword.uninstallApp(\"com.example.myapp\");\n\n// Gỡ cài đặt ứng dụng iOS\nmobileKeyword.uninstallApp(\"com.example.MyApp\");\n\n// Gỡ cài đặt để chuẩn bị cho test case cài đặt mới\nmobileKeyword.uninstallApp(\"com.banking.app\");\nmobileKeyword.installApp(\"C:/apps/banking-app.apk\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Có quyền gỡ cài đặt ứng dụng trên thiết bị. Có thể throw WebDriverException nếu không thể gỡ cài đặt ứng dụng, hoặc IllegalArgumentException nếu appId không hợp lệ.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "uninstallApp",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "appId",
    "description" : "AppPackage (Android) hoặc BundleID (iOS) của ứng dụng cần gỡ cài đặt"
  } ]
}, {
  "name" : "openUrl",
  "description" : "Điều hướng trình duyệt đến một địa chỉ web (URL) cụ thể.",
  "category" : "Web",
  "subCategory" : "Browser",
  "example" : "// Mở trang chủ Google\nwebKeyword.openUrl(\"https://www.google.com\");\n\n// Mở trang đăng nhập\nwebKeyword.openUrl(\"https://example.com/login\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, URL phải is một địa chỉ hợp lệ và có thể truy cập được, và kết nối mạng phải hoạt động. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình duyệt, InvalidArgumentException nếu URL không hợp lệ, hoặc TimeoutException nếu trang không tải within thời gian chờ mặc định.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "openUrl",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "url",
    "description" : "Địa chỉ trang web đầy đủ cần mở (ví dụ: 'https://www.google.com')"
  } ]
}, {
  "name" : "verifyTitleSoft",
  "description" : "So sánh tiêu đề of trang hiện tại với một chuỗi mong đợi. Nếu không khớp, kịch bản sẽ ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify tiêu đề trang giỏ hàng sau khi thêm sản phẩm\nwebKeyword.click(addToCartButtonObject);\nwebKeyword.click(viewCartButtonObject);\nwebKeyword.waitForPageLoaded(10);\nwebKeyword.verifyTitleSoft(\"Giỏ hàng (1 sản phẩm)\");\nwebKeyword.click(checkoutButtonObject); // Tiếp tục quy trình thanh toán\n\n// Verify nhiều điều kiện within quy trình đặt hàng\nwebKeyword.verifyTitleSoft(\"Thanh toán - Bước 1: Thông tin giao hàng\");\nwebKeyword.verifyElementVisibleSoft(shippingFormObject, true);\nwebKeyword.fillShippingForm(); // Tiếp tục điền form",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và trang web đã hoàn thành quá trình tải. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyTitleSoft",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "expectedTitle",
    "description" : "Tiêu đề trang mong đợi"
  } ]
}, {
  "name" : "hideKeyboard",
  "description" : "Ẩn bàn phím ảo nếu nó đang hiển thị trên màn hình. Hữu ích khi cần giải phóng không gian màn hình sau khi nhập liệu hoặc trước khi thực hiện các thao tác khác. Nếu bàn phím không hiển thị, phương thức này có thể gây ra lỗi trên một số thiết bị.",
  "category" : "Mobile",
  "subCategory" : "Interaction",
  "example" : "// Ẩn bàn phím sau khi nhập văn bản\nmobileKeyword.sendText(searchInput, \"điện thoại\");\nmobileKeyword.hideKeyboard();",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Có thể throw WebDriverException nếu không thể ẩn bàn phím hoặc bàn phím không hiển thị.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "hideKeyboard",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "maximizeWindow",
  "description" : "Phóng to cửa sổ trình duyệt hiện tại ra kích thước lớn nhất có thể trên màn hình.",
  "category" : "Web",
  "subCategory" : "Browser",
  "example" : "// Phóng to cửa sổ trình duyệt khi bắt đầu kiểm thử\nwebKeyword.openUrl(\"https://example.com\");\nwebKeyword.maximizeWindow();\n\n// Phóng to cửa sổ trước khi chụp ảnh màn hình\nwebKeyword.maximizeWindow();\nwebKeyword.takeScreenshot(\"full_page\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và trình duyệt phải hỗ trợ thay đổi kích thước cửa sổ. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình duyệt, NoSuchSessionException nếu phiên WebDriver không còn hợp lệ, hoặc UnsupportedOperationException nếu trình duyệt không hỗ trợ thay đổi kích thước.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "maximizeWindow",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "waitForPageLoaded",
  "description" : "Tạm dừng kịch bản cho đến khi trang web tải xong hoàn toàn (trạng thái 'document.readyState' is 'complete').",
  "category" : "Web",
  "subCategory" : "Wait",
  "example" : "// Chờ trang tải xong sau khi điều hướng\nwebKeyword.navigateToUrl(\"https://example.com/dashboard\");\nwebKeyword.waitForPageLoaded(30);\nwebKeyword.verifyElementVisible(dashboardWidgetsObject);\n\n// Chờ trang tải xong sau khi đăng nhập\nwebKeyword.sendKeys(usernameInputObject, \"testuser\");\nwebKeyword.sendKeys(passwordInputObject, \"password123\");\nwebKeyword.click(loginButtonObject);\nwebKeyword.waitForPageLoaded(25);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, trình duyệt phải hỗ trợ thực thi JavaScript, và trang web sẽ hoàn thành quá trình tải within khoảng thời gian chờ đã chỉ định. Có thể throw TimeoutException nếu trang không tải xong within thời gian chờ đã chỉ định, JavascriptException nếu có lỗi khi thực thi JavaScript, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "waitForPageLoaded",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa (tính bằng seconds)"
  } ]
}, {
  "name" : "getLocalStorage",
  "description" : "Đọc và trả về giá trị từ Local Storage of trình duyệt dựa trên một khóa (key) được cung cấp.",
  "category" : "Web",
  "subCategory" : "Storage",
  "example" : "// Verify token xác thực\nString userToken = webKeyword.getLocalStorage(\"user_token\");\nif (userToken == null || userToken.isEmpty()) {\n    webKeyword.navigate(\"https://example.com/login\");\n}\n\n// Đọc thông tin giỏ hàng\nString cartItems = webKeyword.getLocalStorage(\"cart_items\");\nlogger.info(\"Số lượng sản phẩm within giỏ: \" + cartItems);",
  "returnValue" : "String - Giá trị được lưu trữ within Local Storage với khóa đã chỉ định, hoặc null nếu không tìm thấy",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, trang web đã được tải hoàn toàn, trình duyệt hỗ trợ Local Storage. Có thể throw JavascriptException nếu có lỗi khi thực thi JavaScript, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "getLocalStorage",
  "returnType" : "String",
  "parameters" : [ {
    "type" : "String",
    "name" : "key",
    "description" : "Khóa (key) of giá trị cần đọc"
  } ]
}, {
  "name" : "getTextFromElements",
  "description" : "Lấy và trả về một danh sách (List) các chuỗi text từ mỗi element within một danh sách các element.",
  "category" : "Web",
  "subCategory" : "Getter",
  "example" : "// Lấy danh sách tên sản phẩm\nList<String> productNames = webKeyword.getTextFromElements(productNameObject);\nSystem.out.println(\"Tìm thấy \" + productNames.size() + \" sản phẩm\");\n\n// Verify danh sách giá sản phẩm\nList<String> prices = webKeyword.getTextFromElements(productPriceObject);\nfor (String price : prices) {\n    webKeyword.verifyTrue(price.contains(\"₫\"), \"Giá không đúng định dạng\");\n}",
  "returnValue" : "List<String> - Danh sách các chuỗi text từ các element tìm thấy",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, locator of đối tượng giao diện phải hợp lệ, và các element cần lấy text phải tồn tại within DOM. Có thể throw NoSuchElementException nếu không tìm thấy element nào khớp với locator, StaleElementReferenceException nếu element không còn gắn với DOM within quá trình xử lý, TimeoutException nếu các element không xuất hiện within thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "getTextFromElements",
  "returnType" : "List",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng giao diện đại diện cho các element cần lấy text"
  } ]
}, {
  "name" : "verifyOptionSelectedByLabelHard",
  "description" : "Khẳng định rằng option có text hiển thị (label) cụ thể đang được chọn in dropdown.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify quốc gia đã chọn\nwebKeyword.selectByVisibleText(countryDropdown, \"Việt Nam\");\nwebKeyword.verifyOptionSelectedByLabelHard(countryDropdown, \"Việt Nam\");\n\n// Verify danh mục đã chọn\nwebKeyword.verifyOptionSelectedByLabelHard(categoryDropdown, \"Điện thoại\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần Verify phải is thẻ select và tồn tại within DOM. Có thể throw AssertionError nếu option được chọn không khớp với option mong đợi, NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, WebDriverException nếu có lỗi khi tương tác với trình duyệt, hoặc UnexpectedTagNameException nếu element không phải is thẻ select.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyOptionSelectedByLabelHard",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element dropdown (thẻ select)"
  }, {
    "type" : "String",
    "name" : "expectedLabel",
    "description" : "text hiển thị of option mong đợi"
  } ]
}, {
  "name" : "terminateApp",
  "description" : "Buộc dừng (kill) một tiến trình ứng dụng đang chạy. Khác với việc chỉ đưa ứng dụng về background, phương thức này thực sự kết thúc tiến trình của ứng dụng. Hữu ích khi cần kiểm tra khả năng khôi phục trạng thái của ứng dụng sau khi bị buộc dừng, hoặc để đảm bảo ứng dụng bắt đầu từ trạng thái sạch. Trả về true nếu ứng dụng đã được dừng thành công, false nếu ứng dụng không chạy.",
  "category" : "Mobile",
  "subCategory" : "AppLifecycle",
  "example" : "// Dừng ứng dụng đang test\nmobileKeyword.terminateApp(\"com.example.myapp\");\n\n// Dừng ứng dụng và khởi động lại để kiểm tra tính năng khôi phục\nmobileKeyword.terminateApp(\"com.example.myapp\");\nmobileKeyword.activateApp(\"com.example.myapp\");\n\n// Kiểm tra xử lý lỗi khi ứng dụng bị crash\nmobileKeyword.tap(crashButton); // Gây ra crash\nmobileKeyword.terminateApp(\"com.example.myapp\"); // Đảm bảo ứng dụng đã dừng\nmobileKeyword.activateApp(\"com.example.myapp\"); // Khởi động lại",
  "returnValue" : "boolean - True nếu ứng dụng đã được dừng thành công, false nếu ứng dụng không chạy",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Có thể throw WebDriverException nếu không thể dừng ứng dụng, hoặc IllegalArgumentException nếu appId không hợp lệ.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "terminateApp",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "appId",
    "description" : "AppPackage (Android) hoặc BundleID (iOS) của ứng dụng cần dừng"
  } ]
}, {
  "name" : "assertTextContains",
  "description" : "Khẳng định rằng văn bản của một phần tử có chứa một chuỗi con. Khác với assertTextEquals, phương thức này chỉ kiểm tra sự xuất hiện của chuỗi con trong văn bản, không yêu cầu khớp hoàn toàn. Hữu ích khi nội dung có thể thay đổi nhưng vẫn chứa các phần quan trọng cần kiểm tra. Phương thức phân biệt chữ hoa/thường.",
  "category" : "Mobile",
  "subCategory" : "Assertion",
  "example" : "// Kiểm tra thông báo chào mừng có chứa tên người dùng\nmobileKeyword.assertTextContains(welcomeMessage, \"Xin chào\");\n\n// Xác minh thông báo lỗi có chứa thông tin về mật khẩu\nmobileKeyword.assertTextContains(errorMessage, \"mật khẩu không đúng\");",
  "returnValue" : "void - Không trả về giá trị, ném AssertionError nếu kiểm tra thất bại",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Phần tử cần kiểm tra phải tồn tại và có thuộc tính văn bản (text), và phải hiển thị trên màn hình để có thể đọc văn bản. Có thể throw AssertionError nếu văn bản của phần tử không chứa chuỗi con mong đợi, NoSuchElementException nếu không tìm thấy phần tử, hoặc StaleElementReferenceException nếu phần tử không còn gắn với DOM.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertTextContains",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra văn bản"
  }, {
    "type" : "String",
    "name" : "partialText",
    "description" : "Chuỗi con cần tìm trong văn bản của phần tử"
  } ]
}, {
  "name" : "assertElementPresent",
  "description" : "Khẳng định rằng một phần tử tồn tại trong cấu trúc DOM của màn hình, không nhất thiết phải hiển thị. Phương thức này kiểm tra ngay lập tức (timeout = 0) và ném AssertionError nếu phần tử không tồn tại. Chỉ kiểm tra sự tồn tại, không kiểm tra tính hiển thị của phần tử.",
  "category" : "Mobile",
  "subCategory" : "Assertion",
  "example" : "// Kiểm tra nút đăng nhập tồn tại\nmobileKeyword.assertElementPresent(loginButton);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Đã xác định chính xác phần tử UI cần kiểm tra. Có thể throw AssertionError nếu phần tử không tồn tại trong DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình điều khiển.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertElementPresent",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra sự tồn tại"
  } ]
}, {
  "name" : "generateRandomIntegerNumber",
  "description" : "Tạo ra một số nguyên ngẫu nhiên trong một khoảng cho trước (bao gồm cả min và max).",
  "category" : "Utility",
  "subCategory" : "Data Generation",
  "example" : "int randomAge = utilityKeyword.generateRandomNumber(18, 65);",
  "returnValue" : "int|Số nguyên ngẫu nhiên đã được tạo ra.",
  "note" : "",
  "className" : "com.vtnet.netat.core.keywords.UtilityKeyword",
  "methodName" : "generateRandomIntegerNumber",
  "returnType" : "int",
  "parameters" : [ {
    "type" : "int",
    "name" : "min",
    "description" : "Giá trị nhỏ nhất của khoảng."
  }, {
    "type" : "int",
    "name" : "max",
    "description" : "Giá trị lớn nhất của khoảng."
  } ]
}, {
  "name" : "verifyRecordExists",
  "description" : "Kiểm tra sự tồn tại của ít nhất một bản ghi thỏa mãn điều kiện trong câu truy vấn. Phương thức này thực thi câu lệnh SELECT và kiểm tra xem kết quả có trống không, sau đó so sánh với giá trị mong đợi.",
  "category" : "DB",
  "subCategory" : "Verification",
  "example" : "// Kiểm tra xem người dùng với email cụ thể có tồn tại không\ndatabaseKeyword.verifyRecordExists(\n    \"mysql_dev\", \n    \"SELECT * FROM users WHERE email = ?\", \n    true, // Mong đợi bản ghi tồn tại\n    \"john.doe@example.com\"\n);\n\n// Kiểm tra xem không có đơn hàng nào có trạng thái 'cancelled'\ndatabaseKeyword.verifyRecordExists(\n    \"mysql_dev\", \n    \"SELECT * FROM orders WHERE status = ?\", \n    false, // Mong đợi không có bản ghi nào\n    \"cancelled\"\n);",
  "returnValue" : "void - Không trả về giá trị, nhưng sẽ ném AssertionError nếu kiểm chứng thất bại",
  "note" : "Áp dụng cho tất cả nền tảng. Đã khởi tạo kết nối CSDL với profileName tương ứng. Có thể throw SQLException nếu có lỗi khi thực thi câu truy vấn, hoặc AssertionError nếu kết quả kiểm chứng không khớp với giá trị mong đợi.",
  "className" : "com.vtnet.netat.db.keywords.DatabaseKeyword",
  "methodName" : "verifyRecordExists",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "profileName",
    "description" : "Tên của profile kết nối CSDL đã được khởi tạo trước đó"
  }, {
    "type" : "String",
    "name" : "query",
    "description" : "Câu lệnh SQL SELECT cần thực thi để kiểm tra sự tồn tại của bản ghi"
  }, {
    "type" : "boolean",
    "name" : "expectedExists",
    "description" : "Giá trị mong đợi: true nếu mong đợi bản ghi tồn tại, false nếu mong đợi không tồn tại"
  }, {
    "type" : "Object[]",
    "name" : "params",
    "description" : "Các tham số cần truyền vào câu truy vấn, theo thứ tự xuất hiện của các placeholder '?'"
  } ]
}, {
  "name" : "generateRandomString",
  "description" : "Tạo ra một chuỗi ký tự ngẫu nhiên với độ dài và loại ký tự được chỉ định.",
  "category" : "Utility",
  "subCategory" : "Data Generation",
  "example" : "String randomEmail = utilityKeyword.generateRandomString(10, \"ALPHANUMERIC\") + \"@test.com\";",
  "returnValue" : "String|Chuỗi ngẫu nhiên đã được tạo ra.",
  "note" : "",
  "className" : "com.vtnet.netat.core.keywords.UtilityKeyword",
  "methodName" : "generateRandomString",
  "returnType" : "String",
  "parameters" : [ {
    "type" : "int",
    "name" : "length",
    "description" : "Độ dài mong muốn của chuỗi."
  }, {
    "type" : "String",
    "name" : "type",
    "description" : "Loại ký tự: 'ALPHABETIC' (chỉ chữ), 'NUMERIC' (chỉ số), hoặc 'ALPHANUMERIC' (cả chữ và số)."
  } ]
}, {
  "name" : "verifyAttributeContainsSoft",
  "description" : "Verify giá trị of một thuộc tính trên element có contains một chuỗi con hay không. Nếu không contains, kịch bản sẽ ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify thuộc tính style có contains thông tin hiển thị\nwebKeyword.verifyAttributeContainsSoft(elementObject, \"style\", \"display: block\");\nwebKeyword.click(elementObject); // Tiếp tục thực hiện hành động\n\n// Verify nhiều thuộc tính of một element\nwebKeyword.verifyAttributeContainsSoft(buttonObject, \"class\", \"btn\");\nwebKeyword.verifyAttributeContainsSoft(buttonObject, \"data-action\", \"submit\");\nwebKeyword.click(buttonObject); // Tiếp tục thực hiện hành động",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần Verify phải tồn tại within DOM, và thuộc tính cần Verify phải tồn tại trên element. Có thể throw NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyAttributeContainsSoft",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần Verify"
  }, {
    "type" : "String",
    "name" : "attribute",
    "description" : "Tên of thuộc tính (ví dụ: 'class')"
  }, {
    "type" : "String",
    "name" : "partialValue",
    "description" : "Chuỗi con mong đợi"
  } ]
}, {
  "name" : "getAlertText",
  "description" : "Chờ cho đến khi một hộp thoại alert, prompt, hoặc confirm of trình duyệt xuất hiện và lấy về nội dung text of nó.",
  "category" : "Web",
  "subCategory" : "Alert",
  "example" : "// Lấy và Verify nội dung thông báo xác nhận\nwebKeyword.click(deleteButtonObject);\nString alertMessage = webKeyword.getAlertText();\nif (alertMessage.contains(\"Bạn có chắc chắn muốn xóa?\")) {\n    webKeyword.acceptAlert();\n}\n\n// Lấy thông báo lỗi từ alert\nwebKeyword.click(submitButtonObject);\nString errorMessage = webKeyword.getAlertText();\nlogger.info(\"Error message: \" + errorMessage);",
  "returnValue" : "String - Nội dung text of hộp thoại alert",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, một hộp thoại alert đang hiển thị hoặc sẽ xuất hiện. Có thể throw TimeoutException nếu không có hộp thoại alert xuất hiện within thời gian chờ, NoAlertPresentException nếu không có hộp thoại alert đang hiển thị, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "getAlertText",
  "returnType" : "String",
  "parameters" : [ ]
}, {
  "name" : "Assert Greater Than Or Equal",
  "description" : "Khẳng định rằng giá trị thực tế lớn hơn hoặc bằng giá trị so sánh. Nếu không thỏa mãn, test case sẽ dừng lại và báo lỗi",
  "category" : "Assertion",
  "subCategory" : "",
  "example" : "assertGreaterThanOrEqual(10, 10); // 10 >= 10",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Tự động xử lý so sánh giữa số và chuỗi số. Assertion sẽ fail nếu actualValue < expectedValue.",
  "className" : "com.vtnet.netat.core.keywords.AssertionKeyword",
  "methodName" : "assertGreaterThanOrEqual",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "Object",
    "name" : "actualValue",
    "description" : "Giá trị thực tế cần so sánh (số hoặc chuỗi số)"
  }, {
    "type" : "Object",
    "name" : "expectedValue",
    "description" : "Giá trị mong đợi để so sánh (actualValue phải lớn hơn hoặc bằng giá trị này)"
  } ]
}, {
  "name" : "verifyTextContainsHard",
  "description" : "Verify text of một element có contains một chuỗi con hay không. Nếu không contains, kịch bản sẽ DỪNG LẠI.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify thông báo chào mừng có contains tên người dùng\nwebKeyword.verifyTextContainsHard(welcomeMessageObject, \"Xin chào\");\n\n// Verify kết quả tìm kiếm có contains từ khóa đã tìm\nwebKeyword.sendKeys(searchInputObject, \"laptop\");\nwebKeyword.click(searchButtonObject);\nwebKeyword.waitForElementVisible(searchResultsObject);\nwebKeyword.verifyTextContainsHard(searchResultTitleObject, \"laptop\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và element cần Verify phải tồn tại within DOM và có text. Có thể throw AssertionError nếu text of element không contains chuỗi con mong đợi, NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyTextContainsHard",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element contains text cần Verify"
  }, {
    "type" : "String",
    "name" : "partialText",
    "description" : "Chuỗi text con mong đợi"
  } ]
}, {
  "name" : "contextClick",
  "description" : "Thực hiện hành động click chuột phải vào một element. Thường dùng để mở các menu ngữ cảnh (context menu).",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Click chuột phải vào biểu tượng file\nwebKeyword.contextClick(fileIconObject);\nwebKeyword.waitForElementVisible(contextMenuObject);\n\n// Click chuột phải vào hình ảnh để tải xuống\nwebKeyword.contextClick(productImageObject);\nwebKeyword.click(saveImageOptionObject);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần click phải tồn tại within DOM, phải hiển thị và có thể tương tác được, không bị che khuất bởi các element khác, và trình duyệt phải hỗ trợ thao tác chuột phải (một số trình duyệt di động có thể không hỗ trợ). Có thể throw ElementNotVisibleException nếu element không hiển thị trên trang, ElementNotInteractableException nếu element không thể tương tác, StaleElementReferenceException nếu element không còn gắn với DOM, TimeoutException nếu element không xuất hiện within thời gian chờ, WebDriverException nếu có lỗi khi tương tác với trình duyệt, hoặc MoveTargetOutOfBoundsException nếu element nằm ngoài viewport hiện tại.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "contextClick",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần thực hiện hành động click chuột phải"
  } ]
}, {
  "name" : "getElementWidth",
  "description" : "Lấy và trả về chiều rộng của một phần tử (tính bằng pixel). Hữu ích khi cần tính toán vị trí tương đối hoặc kiểm tra kích thước hiển thị của phần tử. Phương thức này trả về giá trị số nguyên đại diện cho chiều rộng theo pixel của phần tử. Lưu ý: Phần tử phải hiển thị trên màn hình để có thể lấy được kích thước chính xác.",
  "category" : "Mobile",
  "subCategory" : "Getter",
  "example" : "// Lấy chiều rộng của một nút\nint buttonWidth = mobileKeyword.getElementWidth(submitButton);\n\n// Kiểm tra xem banner có chiều rộng toàn màn hình không\nint bannerWidth = mobileKeyword.getElementWidth(promotionBanner);\nassert bannerWidth == DriverManager.getDriver().manage().window().getSize().width;",
  "returnValue" : "int - Chiều rộng của phần tử tính bằng pixel",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Phần tử cần đo phải tồn tại và hiển thị trên màn hình, và phải có kích thước xác định (không phải phần tử ẩn hoặc có kích thước 0). Có thể throw NoSuchElementException nếu không tìm thấy phần tử, StaleElementReferenceException nếu phần tử không còn gắn với DOM, hoặc WebDriverException nếu không thể lấy kích thước của phần tử.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "getElementWidth",
  "returnType" : "int",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần lấy chiều rộng"
  } ]
}, {
  "name" : "takeScreenshot",
  "description" : "Chụp lại ảnh toàn bộ màn hình (viewport) of trình duyệt và lưu vào một file tại đường dẫn được chỉ định.",
  "category" : "Web",
  "subCategory" : "Utility",
  "example" : "// Chụp ảnh màn hình khi gặp lỗi\ntry {\n    webKeyword.click(submitButtonObject);\n    webKeyword.verifyElementVisibleHard(confirmationMessageObject, 5);\n} catch (Exception e) {\n    webKeyword.takeScreenshot(\"D:/screenshots/error.png\");\n    throw e;\n}\n\n// Chụp ảnh màn hình để lưu trữ trạng thái\nwebKeyword.waitForPageLoaded();\nwebKeyword.takeScreenshot(\"D:/screenshots/homepage.png\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, thư mục đích phải tồn tại hoặc có quyền tạo thư mục. Có thể throw RuntimeException nếu không thể chụp hoặc lưu ảnh màn hình, IOException nếu có lỗi khi ghi file, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "takeScreenshot",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "filePath",
    "description" : "Đường dẫn đầy đủ để lưu file ảnh (ví dụ: 'C:/screenshots/error.png')"
  } ]
}, {
  "name" : "verifyElementDisabledSoft",
  "description" : "Verify một element có đang ở trạng thái disabled hay không. Nếu không, kịch bản sẽ ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify các tính năng bị khóa within phiên bản dùng thử\nwebKeyword.verifyElementDisabledSoft(lockedFeatureButton);\nwebKeyword.verifyElementDisabledSoft(premiumFeatureButton);\nwebKeyword.click(upgradeAccountButton); // Tiếp tục thực hiện hành động\n\n// Verify các trường không thể chỉnh sửa within chế độ xem\nwebKeyword.click(viewModeButton);\nwebKeyword.verifyElementDisabledSoft(nameFieldInViewMode);\nwebKeyword.click(editModeButton); // Chuyển sang chế độ chỉnh sửa",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và element cần Verify phải tồn tại within DOM. Có thể throw NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyElementDisabledSoft",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần Verify"
  } ]
}, {
  "name" : "takeElementScreenshot",
  "description" : "Chụp ảnh chỉ riêng một element cụ thể trên trang và lưu vào file tại đường dẫn được chỉ định.",
  "category" : "Web",
  "subCategory" : "Utility",
  "example" : "// Take element screenshot để Verify hiển thị\nwebKeyword.waitForElementVisible(loginFormObject, 10);\nwebKeyword.takeElementScreenshot(loginFormObject, \"D:/screenshots/login_form.png\");\n\n// Take element screenshot khi gặp lỗi hiển thị\nif (!webKeyword.verifyElementTextContains(errorMessageObject, \"Invalid credentials\")) {\n    webKeyword.takeElementScreenshot(errorMessageObject, \"D:/screenshots/error.png\");\n}",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần chụp phải hiển thị trên màn hình, thư mục đích phải tồn tại hoặc có quyền tạo thư mục. Có thể throw NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, ElementNotVisibleException nếu element không hiển thị, RuntimeException nếu không thể chụp hoặc lưu ảnh element, IOException nếu có lỗi khi ghi file, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "takeElementScreenshot",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần chụp ảnh"
  }, {
    "type" : "String",
    "name" : "filePath",
    "description" : "Đường dẫn đầy đủ để lưu file ảnh"
  } ]
}, {
  "name" : "selectRadioByValue",
  "description" : "Chọn một radio button within một nhóm các radio button dựa trên giá trị of thuộc tính 'value'.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Chọn radio button giới tính nữ\nwebKeyword.selectRadioByValue(genderRadioGroup, \"female\");\n\n// Chọn phương thức thanh toán\nwebKeyword.selectRadioByValue(paymentMethodRadioGroup, \"credit_card\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, nhóm radio button phải tồn tại within DOM, ít nhất một radio button within nhóm phải có thuộc tính 'value' khớp với giá trị cần chọn, và element phải hiển thị và có thể tương tác được. Có thể throw NoSuchElementException nếu không tìm thấy radio button với value chỉ định, ElementNotVisibleException nếu element không hiển thị trên trang, ElementNotInteractableException nếu element không thể tương tác, StaleElementReferenceException nếu element không còn gắn với DOM, TimeoutException nếu element không xuất hiện within thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "selectRadioByValue",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đại diện cho nhóm radio button (ví dụ locator chung is '//input[@name=\"gender\"]')"
  }, {
    "type" : "String",
    "name" : "value",
    "description" : "Giá trị within thuộc tính 'value' of radio button cần chọn"
  } ]
}, {
  "name" : "tap",
  "description" : "Thực hiện một hành động chạm (tap) vào một phần tử trên màn hình. Đây là thao tác tương đương với click trên web nhưng được tối ưu cho thiết bị di động. Phương thức này sẽ đợi phần tử hiển thị và có thể tương tác trước khi thực hiện chạm.",
  "category" : "Mobile",
  "subCategory" : "Interaction",
  "example" : "// Chạm vào nút đăng nhập\nmobileKeyword.tap(loginButtonObject);\n\n// Chạm vào menu hamburger để mở navigation drawer\nmobileKeyword.tap(menuButton);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Phần tử UI cần tương tác phải hiển thị trên màn hình. Có thể throw ElementNotVisibleException nếu phần tử không hiển thị, NoSuchElementException nếu không tìm thấy phần tử, hoặc ElementNotInteractableException nếu phần tử không thể tương tác.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "tap",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần chạm vào"
  } ]
}, {
  "name" : "assertEnabled",
  "description" : "Khẳng định rằng một phần tử đang ở trạng thái có thể tương tác (enabled). Phương thức này kiểm tra thuộc tính 'enabled' của phần tử và ném AssertionError nếu phần tử bị vô hiệu hóa (disabled). Hữu ích khi cần đảm bảo một nút hoặc trường nhập liệu có thể tương tác được trước khi thực hiện các thao tác tiếp theo.",
  "category" : "Mobile",
  "subCategory" : "Assertion",
  "example" : "// Kiểm tra nút đăng nhập được kích hoạt sau khi nhập thông tin\nmobileKeyword.sendText(usernameInput, \"user@example.com\");\nmobileKeyword.sendText(passwordInput, \"password123\");\nmobileKeyword.assertEnabled(loginButton);\n\n// Xác minh nút tiếp tục được kích hoạt sau khi đồng ý điều khoản\nmobileKeyword.tap(agreeToTermsCheckbox);\nmobileKeyword.assertEnabled(continueButton);",
  "returnValue" : "void - Không trả về giá trị, ném AssertionError nếu kiểm tra thất bại",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Phần tử cần kiểm tra phải tồn tại và có thuộc tính 'enabled', và phải là loại có thể được kích hoạt/vô hiệu hóa (button, input, etc.). Có thể throw AssertionError nếu phần tử đang ở trạng thái bị vô hiệu hóa (disabled), NoSuchElementException nếu không tìm thấy phần tử, StaleElementReferenceException nếu phần tử không còn gắn với DOM, hoặc WebDriverException nếu không thể lấy thuộc tính 'enabled' của phần tử.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertEnabled",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra trạng thái"
  } ]
}, {
  "name" : "findElements",
  "description" : "Tìm và trả về một danh sách (List) tất cả các element WebElement khớp với locator được cung cấp. Trả về danh sách rỗng nếu không tìm thấy, không ném ra exception.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Lấy danh sách tất cả các sản phẩm\nList<WebElement> productList = webKeyword.findElements(productListItemObject);\n\n// Đếm số lượng kết quả tìm kiếm\nint resultCount = webKeyword.findElements(searchResultObject).size();",
  "returnValue" : "List<WebElement> - Danh sách các element web khớp với locator, hoặc danh sách rỗng nếu không tìm thấy element nào",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và đối tượng ObjectUI phải có ít nhất một locator được định nghĩa. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình duyệt, InvalidSelectorException nếu locator không hợp lệ, hoặc NullPointerException nếu uiObject is null hoặc không có locator nào được kích hoạt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "findElements",
  "returnType" : "List",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng giao diện đại diện cho các element cần tìm"
  } ]
}, {
  "name" : "Assert Not Contains",
  "description" : "Khẳng định rằng một chuỗi văn bản không chứa chuỗi con được chỉ định. Nếu có chứa, test case sẽ dừng lại và báo lỗi",
  "category" : "Assertion",
  "subCategory" : "",
  "example" : "assertNotContains(\"Hello World\", \"Error\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Assertion này kiểm tra xem chuỗi nguồn không được chứa chuỗi con. Phân biệt chữ hoa chữ thường. Sẽ dừng test nếu tìm thấy chuỗi con.",
  "className" : "com.vtnet.netat.core.keywords.AssertionKeyword",
  "methodName" : "assertNotContains",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "sourceText",
    "description" : "Chuỗi văn bản nguồn cần kiểm tra"
  }, {
    "type" : "String",
    "name" : "substring",
    "description" : "Chuỗi con không được phép có trong văn bản nguồn"
  } ]
}, {
  "name" : "verifyTextMatchesRegexHard",
  "description" : "Verify text of một element có khớp với một biểu thức chính quy (regex) hay không. Nếu không khớp, kịch bản sẽ DỪNG LẠI.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify mã đơn hàng có đúng định dạng\nwebKeyword.click(viewOrderButtonObject);\nwebKeyword.waitForElementVisible(orderIdObject);\nwebKeyword.verifyTextMatchesRegexHard(orderIdObject, \"^DH-\\\\d{5}$\"); // Khớp với DH-12345\n\n// Verify số điện thoại có đúng định dạng\nwebKeyword.verifyTextMatchesRegexHard(phoneNumberObject, \"^(\\\\+84|0)[0-9]{9,10}$\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần Verify phải tồn tại within DOM và có text. Có thể throw AssertionError nếu text không khớp với biểu thức chính quy, NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, WebDriverException nếu có lỗi khi tương tác với trình duyệt, hoặc PatternSyntaxException nếu biểu thức chính quy không hợp lệ.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyTextMatchesRegexHard",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element contains text cần Verify"
  }, {
    "type" : "String",
    "name" : "pattern",
    "description" : "Biểu thức chính quy để so khớp"
  } ]
}, {
  "name" : "clear",
  "description" : "Xóa văn bản trong một ô input có thể chỉnh sửa. Chỉ áp dụng cho các phần tử có thuộc tính 'editable' là true như TextField, EditText. Không hoạt động với các phần tử không phải là trường nhập liệu.",
  "category" : "Mobile",
  "subCategory" : "Interaction",
  "example" : "// Xóa văn bản trong ô tìm kiếm\nmobileKeyword.clear(searchInput);\n\n// Xóa nội dung trong ô email trước khi nhập giá trị mới\nmobileKeyword.clear(emailInput);\nmobileKeyword.sendText(emailInput, \"new.email@example.com\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Phần tử UI cần phải là trường nhập liệu có thể chỉnh sửa. Có thể throw ElementNotVisibleException nếu phần tử không hiển thị, NoSuchElementException nếu không tìm thấy phần tử, hoặc ElementNotInteractableException nếu phần tử không thể tương tác hoặc không phải trường nhập liệu.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "clear",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử input cần xóa văn bản"
  } ]
}, {
  "name" : "switchToDefaultContent",
  "description" : "Chuyển sự điều khiển of WebDriver ra khỏi tất cả các iframe và quay về nội dung chính, cấp cao nhất of trang web.",
  "category" : "Web",
  "subCategory" : "Window&Frame",
  "example" : "// Thoát khỏi iframe và quay về nội dung chính\nwebKeyword.switchToFrame(paymentIframeObject);\nwebKeyword.sendKeys(cardNumberObject, \"4111111111111111\");\nwebKeyword.switchToDefaultContent(); // Quay về nội dung chính\nwebKeyword.waitForElementVisible(confirmationMessageObject);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "switchToDefaultContent",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "waitForTitleIs",
  "description" : "Tạm dừng kịch bản cho đến khi tiêu đề of trang hiện tại khớp chính xác với chuỗi được chỉ định.",
  "category" : "Web",
  "subCategory" : "Wait",
  "example" : "// Chờ tiêu đề trang sau khi đăng nhập thành công\nwebKeyword.sendKeys(usernameInputObject, \"testuser\");\nwebKeyword.sendKeys(passwordInputObject, \"password123\");\nwebKeyword.click(loginButtonObject);\nwebKeyword.waitForTitleIs(\"Bảng điều khiển người dùng\", 15);\n\n// Chờ tiêu đề trang sau khi chuyển tab\nwebKeyword.click(profileTabObject);\nwebKeyword.waitForTitleIs(\"Thông tin cá nhân\", 10);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và tiêu đề trang sẽ thay đổi thành giá trị mong đợi within khoảng thời gian chờ. Có thể throw TimeoutException nếu tiêu đề trang không khớp với giá trị mong đợi within thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "waitForTitleIs",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "expectedTitle",
    "description" : "Tiêu đề trang mong đợi"
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa (tính bằng seconds)"
  } ]
}, {
  "name" : "waitForClickable",
  "description" : "Chờ cho đến khi một phần tử sẵn sàng để được chạm vào (clickable/tappable) hoặc cho đến khi hết thời gian chờ. Phần tử được coi là clickable khi nó hiển thị và có thể tương tác được (không bị disabled). Khác với waitForVisible, phương thức này còn kiểm tra khả năng tương tác của phần tử. Nếu phần tử không clickable sau khi hết thời gian chờ, một TimeoutException sẽ được ném ra.",
  "category" : "Mobile",
  "subCategory" : "Wait",
  "example" : "// Chờ nút có thể nhấn sau khi nhập thông tin\nmobileKeyword.waitForClickable(loginButton, 5);\nmobileKeyword.tap(loginButton);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Đã xác định chính xác phần tử UI cần chờ đợi. Có thể throw TimeoutException nếu phần tử không trở nên clickable trong thời gian chờ đợi, StaleElementReferenceException nếu phần tử không còn gắn với DOM, hoặc NoSuchElementException nếu không tìm thấy phần tử trong DOM.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "waitForClickable",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần chờ sẵn sàng để tương tác"
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian tối đa (giây) để chờ phần tử có thể tương tác"
  } ]
}, {
  "name" : "getTextFromElements",
  "description" : "Trích xuất và trả về danh sách các chuỗi văn bản từ tất cả phần tử khớp với locator. Mỗi phần tử trong danh sách sẽ được lấy text và thêm vào kết quả trả về.",
  "category" : "Mobile",
  "subCategory" : "Getter",
  "example" : "List<String> itemNames = mobileKeyword.getTextFromElements(itemNameObject);",
  "returnValue" : "void|No return value",
  "note" : "",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "getTextFromElements",
  "returnType" : "List",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng UI đại diện cho các phần tử cần lấy văn bản"
  } ]
}, {
  "name" : "resizeWindow",
  "description" : "Thay đổi kích thước of cửa sổ trình duyệt hiện tại theo chiều rộng và chiều cao được chỉ định.",
  "category" : "Web",
  "subCategory" : "Browser",
  "example" : "// Thay đổi kích thước cửa sổ thành HD (720p)\nwebKeyword.resizeWindow(1280, 720);\n\n// Mô phỏng kích thước màn hình tablet\nwebKeyword.resizeWindow(768, 1024);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, trình duyệt phải hỗ trợ thay đổi kích thước cửa sổ, và kích thước yêu cầu phải nằm within giới hạn hợp lý (lớn hơn 0 và nhỏ hơn kích thước màn hình vật lý). Có thể throw WebDriverException nếu có lỗi khi tương tác với trình duyệt, NoSuchSessionException nếu phiên WebDriver không còn hợp lệ, UnsupportedOperationException nếu trình duyệt không hỗ trợ thay đổi kích thước, hoặc IllegalArgumentException nếu chiều rộng hoặc chiều cao is số âm.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "resizeWindow",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "int",
    "name" : "width",
    "description" : "Chiều rộng mới of cửa sổ (pixel)"
  }, {
    "type" : "int",
    "name" : "height",
    "description" : "Chiều cao mới of cửa sổ (pixel)"
  } ]
}, {
  "name" : "goForward",
  "description" : "Thực hiện hành động đi tới trang tiếp theo within lịch sử of trình duyệt, tương đương với việc người dùng nhấn nút 'Forward'.",
  "category" : "Web",
  "subCategory" : "Browser",
  "example" : "// Điều hướng qua lại giữa các trang\nwebKeyword.openUrl(\"https://example.com/page1\");\nwebKeyword.openUrl(\"https://example.com/page2\");\nwebKeyword.goBack(); // Quay lại page1\nwebKeyword.goForward(); // Tiến tới page2 lần nữa\n\n// Verify luồng điều hướng\nwebKeyword.click(productLink);\nwebKeyword.goBack();\nwebKeyword.goForward();",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và phải đã sử dụng goBack() hoặc có trang tiếp theo within lịch sử điều hướng. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình duyệt, hoặc NoSuchSessionException nếu phiên WebDriver không còn hợp lệ.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "goForward",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "getValueFromJson",
  "description" : "Lấy một giá trị từ một chuỗi JSON bằng cách sử dụng cú pháp JSON Pointer. JSON Pointer là một chuỗi bắt đầu bằng dấu gạch chéo (/) và tiếp theo là tên thuộc tính, cho phép truy cập vào các phần tử lồng nhau trong cấu trúc JSON.",
  "category" : "Utility",
  "subCategory" : "String",
  "example" : "// Giả sử có chuỗi JSON: {\"data\":{\"user\":{\"name\":\"John Doe\",\"age\":30}}}\nString userName = utilityKeyword.getValueFromJson(jsonString, \"/data/user/name\");\n// userName sẽ có giá trị \"John Doe\"",
  "returnValue" : "String - Giá trị được truy xuất dưới dạng chuỗi, hoặc null nếu không tìm thấy",
  "note" : "Áp dụng cho tất cả nền tảng. Có thể throw JsonProcessingException nếu chuỗi JSON không hợp lệ, hoặc IllegalArgumentException nếu JSON Pointer không hợp lệ.",
  "className" : "com.vtnet.netat.core.keywords.UtilityKeyword",
  "methodName" : "getValueFromJson",
  "returnType" : "String",
  "parameters" : [ {
    "type" : "String",
    "name" : "jsonString",
    "description" : "Chuỗi JSON nguồn cần truy vấn"
  }, {
    "type" : "String",
    "name" : "jsonPointer",
    "description" : "Đường dẫn đến giá trị cần lấy theo cú pháp JSON Pointer (ví dụ: '/user/name', '/data/0/id')"
  } ]
}, {
  "name" : "startBrowser",
  "description" : "Khởi tạo và mở một phiên trình duyệt (web) hoặc thiết bị (mobile) mới dựa trên cấu hình trong file properties. Tham số platform cho phép chỉ định loại trình duyệt hoặc thiết bị cụ thể cần khởi tạo.",
  "category" : "DriverKeyword",
  "subCategory" : "",
  "example" : "// Chỉ định khởi tạo trình duyệt Firefox\ndriverKeyword.startBrowser(\"firefox\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "File cấu hình properties phải tồn tại và chứa các thiết lập cần thiết cho nền tảng được chỉ định. Có thể throw WebDriverException nếu không thể khởi tạo driver, ConfigurationException nếu thiếu thông tin cấu hình, hoặc IllegalArgumentException nếu nền tảng không được hỗ trợ.",
  "className" : "com.vtnet.netat.core.keywords.DriverKeyword",
  "methodName" : "startBrowser",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "platform",
    "description" : "Tên nền tảng cần khởi tạo (ví dụ: 'chrome', 'firefox', 'android', 'ios')"
  } ]
}, {
  "name" : "assertTextWithOptions",
  "description" : "So sánh văn bản của phần tử với nhiều tùy chọn linh hoạt: có thể bỏ qua sự khác biệt giữa chữ hoa/thường và/hoặc cắt khoảng trắng ở đầu/cuối. Hữu ích khi cần kiểm tra nội dung mà không quan tâm đến định dạng chính xác. Nếu văn bản không khớp theo các tùy chọn đã chọn, một AssertionError sẽ được ném ra.",
  "category" : "Mobile",
  "subCategory" : "Assertion",
  "example" : "// Kiểm tra nội dung chào mừng, bỏ qua chữ hoa/thường và khoảng trắng\nmobileKeyword.assertTextWithOptions(welcomeMessage, \"  xin chào, Người Dùng \", true, true);\n\n// Kiểm tra địa chỉ email không phân biệt chữ hoa/thường\nmobileKeyword.assertTextWithOptions(emailField, \"User@Example.com\", true, true);",
  "returnValue" : "void - Không trả về giá trị, ném AssertionError nếu kiểm tra thất bại",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Phần tử cần kiểm tra phải tồn tại và có thuộc tính văn bản (text), và phải hiển thị trên màn hình để có thể đọc văn bản. Có thể throw AssertionError nếu văn bản không khớp theo các tùy chọn đã chọn, NoSuchElementException nếu không tìm thấy phần tử, StaleElementReferenceException nếu phần tử không còn gắn với DOM, WebDriverException nếu không thể lấy văn bản của phần tử, hoặc NullPointerException nếu văn bản của phần tử là null và expectedText không phải null.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertTextWithOptions",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra văn bản"
  }, {
    "type" : "String",
    "name" : "expectedText",
    "description" : "Chuỗi văn bản mong đợi"
  }, {
    "type" : "boolean",
    "name" : "ignoreCase",
    "description" : "true để bỏ qua sự khác biệt giữa chữ hoa/thường, false để phân biệt"
  }, {
    "type" : "boolean",
    "name" : "trimText",
    "description" : "true để cắt khoảng trắng ở đầu/cuối trước khi so sánh, false để giữ nguyên"
  } ]
}, {
  "name" : "getPageTitle",
  "description" : "Lấy và trả về tiêu đề (title) of trang web hiện tại.",
  "category" : "Web",
  "subCategory" : "Getter",
  "example" : "// Verify tiêu đề trang sau khi điều hướng\nwebKeyword.navigateToUrl(\"https://example.com/about\");\nString pageTitle = webKeyword.getPageTitle();\nwebKeyword.verifyEqual(pageTitle, \"Về chúng tôi - Example Company\");\n\n// Verify tiêu đề trang sau khi tìm kiếm\nwebKeyword.sendKeys(searchInputObject, \"laptop\");\nwebKeyword.click(searchButtonObject);\nString searchResultTitle = webKeyword.getPageTitle();\nwebKeyword.verifyContains(searchResultTitle, \"Kết quả tìm kiếm\");",
  "returnValue" : "String - Tiêu đề of trang web hiện tại",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình duyệt, hoặc NoSuchSessionException nếu phiên WebDriver không còn hợp lệ.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "getPageTitle",
  "returnType" : "String",
  "parameters" : [ ]
}, {
  "name" : "backgroundApp",
  "description" : "Đưa ứng dụng hiện tại về chạy nền trong một khoảng thời gian xác định, sau đó tự động đưa lại lên foreground. Hữu ích để kiểm tra khả năng lưu trữ và khôi phục trạng thái của ứng dụng, hoặc để mô phỏng việc người dùng tạm thời chuyển sang ứng dụng khác. Nếu thời gian là -1, ứng dụng sẽ ở chế độ nền cho đến khi được kích hoạt lại bằng activateApp.",
  "category" : "Mobile",
  "subCategory" : "AppLifecycle",
  "example" : "// Đưa ứng dụng về nền trong 5 giây để kiểm tra khả năng lưu trạng thái\nmobileKeyword.sendText(noteInput, \"Ghi chú quan trọng\");\nmobileKeyword.backgroundApp(5);\nmobileKeyword.assertTextEquals(noteInput, \"Ghi chú quan trọng\"); // Kiểm tra dữ liệu còn nguyên\n\n// Mô phỏng việc chuyển sang ứng dụng khác và quay lại\nmobileKeyword.backgroundApp(10);\n\n// Đưa ứng dụng về nền vô thời hạn và sau đó kích hoạt lại thủ công\nmobileKeyword.backgroundApp(-1);\n// Thực hiện các thao tác khác...\nmobileKeyword.activateApp(\"com.example.myapp\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Ứng dụng đang chạy ở foreground. Có thể throw WebDriverException nếu không thể đưa ứng dụng về background.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "backgroundApp",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "int",
    "name" : "seconds",
    "description" : "Số giây ứng dụng chạy nền. Sử dụng -1 để giữ ứng dụng ở nền vô thời hạn"
  } ]
}, {
  "name" : "waitForText",
  "description" : "Chờ cho đến khi văn bản của một phần tử khớp chính xác với chuỗi mong đợi hoặc cho đến khi hết thời gian chờ. Hữu ích khi cần đảm bảo nội dung đã được cập nhật đúng trước khi tiếp tục. Phương thức này kiểm tra chính xác nội dung văn bản, phân biệt chữ hoa/thường và khoảng trắng. Nếu văn bản không khớp sau khi hết thời gian chờ, một TimeoutException sẽ được ném ra.",
  "category" : "Mobile",
  "subCategory" : "Wait",
  "example" : "// Chờ trạng thái đơn hàng cập nhật\nmobileKeyword.waitForText(orderStatusLabel, \"Đã hoàn thành\", 15);\n\n// Chờ số dư tài khoản cập nhật sau giao dịch\nmobileKeyword.tap(transferButton);\nmobileKeyword.waitForText(balanceAmount, \"1,250,000 VND\", 10);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Phần tử cần kiểm tra phải có thuộc tính văn bản (text) và phải tồn tại trong DOM (có thể chưa hiển thị). Có thể throw TimeoutException nếu văn bản không khớp sau khi hết thời gian chờ, StaleElementReferenceException nếu phần tử không còn gắn với DOM trong quá trình chờ, hoặc NoSuchElementException nếu không tìm thấy phần tử trong DOM.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "waitForText",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra văn bản"
  }, {
    "type" : "String",
    "name" : "expectedText",
    "description" : "Văn bản mong đợi phải khớp chính xác"
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian tối đa (giây) để chờ văn bản khớp"
  } ]
}, {
  "name" : "findElements",
  "description" : "Tìm kiếm và trả về danh sách tất cả các phần tử WebElement khớp với locator được chỉ định. Trả về danh sách rỗng nếu không tìm thấy phần tử nào, không ném exception.",
  "category" : "Mobile",
  "subCategory" : "Interaction",
  "example" : "List<WebElement> productList = mobileKeyword.findElements(productListItemObject);",
  "returnValue" : "void|No return value",
  "note" : "",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "findElements",
  "returnType" : "List",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng UI đại diện cho các phần tử cần tìm kiếm"
  } ]
}, {
  "name" : "assertChecked",
  "description" : "Khẳng định rằng một switch, checkbox hoặc radio button đang ở trạng thái được chọn/bật. Phương thức này kiểm tra thuộc tính 'checked' của phần tử và ném AssertionError nếu phần tử không được chọn. Áp dụng cho các phần tử có thể chọn/bỏ chọn như checkbox, radio button, toggle switch. Phần tử phải hỗ trợ thuộc tính 'checked', nếu không có thể gây ra lỗi.",
  "category" : "Mobile",
  "subCategory" : "Assertion",
  "example" : "// Kiểm tra checkbox đã được chọn\nmobileKeyword.tap(agreeToTermsCheckbox);\nmobileKeyword.assertChecked(agreeToTermsCheckbox);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Phần tử UI cần kiểm tra phải là loại có thể chọn/bỏ chọn và hỗ trợ thuộc tính 'checked'. Có thể throw AssertionError nếu phần tử không ở trạng thái được chọn/bật, NoSuchElementException nếu không tìm thấy phần tử, hoặc WebDriverException nếu không thể truy cập thuộc tính 'checked'.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertChecked",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra trạng thái"
  } ]
}, {
  "name" : "getValueFromXml",
  "description" : "Lấy một giá trị từ một chuỗi XML bằng cách sử dụng một biểu thức XPath. XPath là một ngôn ngữ truy vấn cho phép chọn các nút trong tài liệu XML dựa trên các tiêu chí khác nhau như đường dẫn, thuộc tính, và vị trí.",
  "category" : "Utility",
  "subCategory" : "String",
  "example" : "// Giả sử có chuỗi XML: <books><book id=\"bk101\"><title>XML Developer's Guide</title></book></books>\nString bookTitle = utilityKeyword.getValueFromXml(xmlString, \"//book[@id='bk101']/title/text()\");\n// bookTitle sẽ có giá trị \"XML Developer's Guide\"",
  "returnValue" : "String - Giá trị được truy xuất từ tài liệu XML, hoặc null nếu không tìm thấy",
  "note" : "Áp dụng cho tất cả nền tảng. Có thể throw SAXException nếu chuỗi XML không hợp lệ, hoặc XPathExpressionException nếu biểu thức XPath không hợp lệ.",
  "className" : "com.vtnet.netat.core.keywords.UtilityKeyword",
  "methodName" : "getValueFromXml",
  "returnType" : "String",
  "parameters" : [ {
    "type" : "String",
    "name" : "xmlString",
    "description" : "Chuỗi XML nguồn cần truy vấn"
  }, {
    "type" : "String",
    "name" : "xpathExpression",
    "description" : "Biểu thức XPath để tìm và trích xuất giá trị"
  } ]
}, {
  "name" : "verifyAttributeContainsHard",
  "description" : "Verify giá trị of một thuộc tính trên element có contains một chuỗi con hay không. Nếu không contains, kịch bản sẽ DỪNG LẠI.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify element có class 'active'\nwebKeyword.click(tabButtonObject);\nwebKeyword.verifyAttributeContainsHard(tabButtonObject, \"class\", \"active\");\n\n// Verify đường dẫn hình ảnh contains tên sản phẩm\nwebKeyword.verifyAttributeContainsHard(productImageObject, \"src\", \"iphone-13\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần Verify phải tồn tại within DOM, và thuộc tính cần Verify phải tồn tại trên element. Có thể throw AssertionError nếu giá trị thuộc tính không contains chuỗi con mong đợi, NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyAttributeContainsHard",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần Verify"
  }, {
    "type" : "String",
    "name" : "attribute",
    "description" : "Tên of thuộc tính (ví dụ: 'class')"
  }, {
    "type" : "String",
    "name" : "partialValue",
    "description" : "Chuỗi con mong đợi"
  } ]
}, {
  "name" : "Assert Contains",
  "description" : "Khẳng định rằng một chuỗi văn bản chứa chuỗi con được chỉ định. Nếu không chứa, test case sẽ dừng lại và báo lỗi",
  "category" : "Assertion",
  "subCategory" : "",
  "example" : "assertContains(\"Hello World\", \"World\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Assertion này kiểm tra xem chuỗi nguồn có chứa chuỗi con hay không. Phân biệt chữ hoa chữ thường. Sẽ dừng test nếu không tìm thấy chuỗi con.",
  "className" : "com.vtnet.netat.core.keywords.AssertionKeyword",
  "methodName" : "assertContains",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "sourceText",
    "description" : "Chuỗi văn bản nguồn cần kiểm tra"
  }, {
    "type" : "String",
    "name" : "substring",
    "description" : "Chuỗi con cần tìm trong văn bản nguồn"
  } ]
}, {
  "name" : "getCssValue",
  "description" : "Lấy giá trị of một thuộc tính CSS được áp dụng trên một element.",
  "category" : "Web",
  "subCategory" : "Getter",
  "example" : "// Lấy màu chữ of nút\nString buttonColor = webKeyword.getCssValue(buttonObject, \"color\");\nwebKeyword.verifyEqual(buttonColor, \"rgba(255, 255, 255, 1)\");\n\n// Verify kích thước font\nString fontSize = webKeyword.getCssValue(headingObject, \"font-size\");\nwebKeyword.verifyEqual(fontSize, \"24px\");",
  "returnValue" : "String - Giá trị of thuộc tính CSS được chỉ định",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần lấy giá trị CSS phải tồn tại within DOM, và thuộc tính CSS cần lấy phải được áp dụng cho element (trực tiếp hoặc được kế thừa). Có thể throw NoSuchElementException nếu element không tồn tại, StaleElementReferenceException nếu element không còn gắn với DOM, TimeoutException nếu element không xuất hiện within thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "getCssValue",
  "returnType" : "String",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần lấy giá trị CSS"
  }, {
    "type" : "String",
    "name" : "cssPropertyName",
    "description" : "Tên of thuộc tính CSS (ví dụ: 'color', 'font-size', 'background-color')"
  } ]
}, {
  "name" : "verifyTextSoft",
  "description" : "So sánh text of một element với một chuỗi ký tự mong đợi (phải khớp chính xác). Nếu không khớp, kịch bản sẽ ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify nhãn trên form đăng nhập\nwebKeyword.verifyTextSoft(usernameLabelObject, \"Tên đăng nhập\");\nwebKeyword.verifyTextSoft(passwordLabelObject, \"Mật khẩu\");\n// Kịch bản tiếp tục ngay cả khi có nhãn không khớp\n\n// Verify nhiều giá trị hiển thị\nwebKeyword.verifyTextSoft(productNameObject, \"Điện thoại thông minh X1\");\nwebKeyword.verifyTextSoft(productPriceObject, \"5.990.000 ₫\");\nwebKeyword.click(addToCartButtonObject); // Tiếp tục thực hiện hành động",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và element cần Verify phải tồn tại within DOM và có text. Có thể throw NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyTextSoft",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element contains text cần Verify"
  }, {
    "type" : "String",
    "name" : "expectedText",
    "description" : "Chuỗi text mong đợi"
  } ]
}, {
  "name" : "denySystemDialog",
  "description" : "Tự động tìm và nhấn vào các nút hệ thống có văn bản phủ định như 'Deny', 'Cancel', 'Don't allow'. Hữu ích để từ chối các yêu cầu cấp quyền hoặc đóng các thông báo hệ thống không mong muốn. Phương thức sẽ tìm kiếm các nút phổ biến và nhấn vào nút đầu tiên tìm thấy. Nếu không tìm thấy nút nào, một cảnh báo sẽ được ghi vào log.",
  "category" : "Mobile",
  "subCategory" : "System",
  "example" : "// Từ chối yêu cầu quyền truy cập vị trí\nmobileKeyword.tap(locationFeatureButton);\nmobileKeyword.denySystemDialog();\n\n// Từ chối thông báo cập nhật ứng dụng\nmobileKeyword.denySystemDialog();",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Hộp thoại hệ thống đang hiển thị trên màn hình và chứa ít nhất một nút có văn bản phủ định được hỗ trợ. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình điều khiển, hoặc NoSuchElementException nếu không tìm thấy nút nào khớp với danh sách văn bản đã cho.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "denySystemDialog",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "Assert True",
  "description" : "Khẳng định rằng một điều kiện có giá trị true. Nếu điều kiện là false, test case sẽ dừng lại và báo lỗi",
  "category" : "Assertion",
  "subCategory" : "",
  "example" : "assertTrue(isElementVisible);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Assertion này kiểm tra điều kiện boolean phải là true. Thường được sử dụng để kiểm tra trạng thái hoặc kết quả của các phép so sánh.",
  "className" : "com.vtnet.netat.core.keywords.AssertionKeyword",
  "methodName" : "assertTrue",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "boolean",
    "name" : "condition",
    "description" : "Điều kiện boolean cần kiểm tra (phải là true)"
  } ]
}, {
  "name" : "Assert Greater Than",
  "description" : "Khẳng định rằng giá trị thực tế lớn hơn giá trị so sánh. Nếu không thỏa mãn, test case sẽ dừng lại và báo lỗi",
  "category" : "Assertion",
  "subCategory" : "",
  "example" : "assertGreaterThan(15, 10); // 15 > 10",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Tự động xử lý so sánh giữa số và chuỗi số. Assertion sẽ fail nếu actualValue <= expectedValue.",
  "className" : "com.vtnet.netat.core.keywords.AssertionKeyword",
  "methodName" : "assertGreaterThan",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "Object",
    "name" : "actualValue",
    "description" : "Giá trị thực tế cần so sánh (số hoặc chuỗi số)"
  }, {
    "type" : "Object",
    "name" : "expectedValue",
    "description" : "Giá trị mong đợi để so sánh (actualValue phải lớn hơn giá trị này)"
  } ]
}, {
  "name" : "openNewTab",
  "description" : "Mở một tab mới within trình duyệt và tự động chuyển sự điều khiển sang tab mới đó. Có thể option mở một URL cụ thể within tab mới.",
  "category" : "Web",
  "subCategory" : "Window&Frame",
  "example" : "// Mở tab mới với URL cụ thể\nwebKeyword.openNewTab(\"https://google.com\");\nwebKeyword.waitForElementVisible(searchBoxObject);\n\n// Mở tab trống và điều hướng sau đó\nwebKeyword.openNewTab(\"\");\nwebKeyword.navigate(\"https://example.com\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, trình duyệt hỗ trợ việc mở tab mới thông qua WebDriver. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình duyệt, hoặc UnsupportedCommandException nếu trình duyệt không hỗ trợ lệnh mở tab mới.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "openNewTab",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "url",
    "description" : "(option) URL để mở within tab mới. Nếu để trống, sẽ mở tab trống"
  } ]
}, {
  "name" : "getCurrentDateTime",
  "description" : "Lấy và trả về chuỗi ngày giờ hiện tại theo một định dạng cho trước. Sử dụng các mẫu định dạng chuẩn của Java như 'yyyy' cho năm, 'MM' cho tháng, 'dd' cho ngày, 'HH' cho giờ (24h), 'mm' cho phút và 'ss' cho giây.",
  "category" : "Utility",
  "subCategory" : "DateTime",
  "example" : "// Lấy ngày giờ hiện tại với định dạng yyyy-MM-dd_HH-mm-ss\nString timestamp = utilityKeyword.getCurrentDateTime(\"yyyy-MM-dd_HH-mm-ss\");\n// Kết quả có thể là: 2025-09-15_11-30-45",
  "returnValue" : "String - Chuỗi ngày giờ hiện tại theo định dạng được chỉ định",
  "note" : "Áp dụng cho tất cả nền tảng. Có thể throw IllegalArgumentException nếu định dạng ngày giờ không hợp lệ.",
  "className" : "com.vtnet.netat.core.keywords.UtilityKeyword",
  "methodName" : "getCurrentDateTime",
  "returnType" : "String",
  "parameters" : [ {
    "type" : "String",
    "name" : "dateTimeFormat",
    "description" : "Định dạng ngày giờ (ví dụ: 'dd/MM/yyyy HH:mm:ss')"
  } ]
}, {
  "name" : "findElementInShadowDom",
  "description" : "Tìm kiếm và trả về một element nằm bên within một Shadow DOM. Yêu cầu cung cấp element chủ (shadow host) và một CSS selector để định vị element con.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Tìm và tương tác với element input within Shadow DOM\nWebElement usernameInput = webKeyword.findElementInShadowDom(appContainerObject, \"#username\");\nusernameInput.sendKeys(\"admin@example.com\");\n\n// Tìm và click vào nút within Shadow DOM\nWebElement submitButton = webKeyword.findElementInShadowDom(loginFormObject, \".submit-button\");\nsubmitButton.click();",
  "returnValue" : "WebElement - element web được tìm thấy inside Shadow DOM",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, trình duyệt hỗ trợ Shadow DOM (Chrome, Firefox mới), element chủ (host) phải tồn tại và có Shadow DOM đính kèm. Có thể throw NoSuchElementException nếu không tìm thấy element chủ hoặc element con, StaleElementReferenceException nếu element chủ không còn gắn với DOM, UnsupportedOperationException nếu trình duyệt không hỗ trợ Shadow DOM API, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "findElementInShadowDom",
  "returnType" : "WebElement",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "shadowHostObject",
    "description" : "element chủ (host) contains Shadow DOM"
  }, {
    "type" : "String",
    "name" : "cssSelectorInShadow",
    "description" : "Chuỗi CSS selector để Find element inside Shadow DOM"
  } ]
}, {
  "name" : "verifyElementVisibleSoft",
  "description" : "Verify một element có đang hiển thị trên giao diện hay không. Nếu Verify thất bại, kịch bản sẽ ghi nhận lỗi nhưng vẫn TIẾP TỤC chạy các bước tiếp theo.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify thông báo thành công hiển thị sau khi lưu\nwebKeyword.click(saveButtonObject);\nwebKeyword.verifyElementVisibleSoft(successMessageObject, true);\n// Kịch bản vẫn tiếp tục ngay cả khi thông báo không hiển thị\n\n// Verify nhiều element trên trang\nwebKeyword.verifyElementVisibleSoft(headerLogoObject, true);\nwebKeyword.verifyElementVisibleSoft(navigationMenuObject, true);\nwebKeyword.click(mainButtonObject); // Thực hiện hành động tiếp theo",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và element cần Verify phải tồn tại within DOM. Có thể throw NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyElementVisibleSoft",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần Verify"
  }, {
    "type" : "boolean",
    "name" : "isVisible",
    "description" : "Trạng thái hiển thị mong đợi (true cho hiển thị, false cho bị ẩn)"
  } ]
}, {
  "name" : "verifyTextMatchesRegexSoft",
  "description" : "Verify text of một element có khớp với một biểu thức chính quy (regex) hay không. Nếu không khớp, kịch bản sẽ ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify định dạng email hiển thị trên trang\nwebKeyword.verifyTextMatchesRegexSoft(emailFormatObject, \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\");\nwebKeyword.click(continueButtonObject); // Tiếp tục thực hiện hành động\n\n// Verify nhiều định dạng khác nhau trên trang thông tin\nwebKeyword.verifyTextMatchesRegexSoft(zipCodeObject, \"^\\\\d{5}(-\\\\d{4})?$\"); // Mã bưu điện\nwebKeyword.verifyTextMatchesRegexSoft(taxIdObject, \"^\\\\d{10}$\"); // Mã số thuế\nwebKeyword.click(saveButtonObject); // Tiếp tục lưu thông tin",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần Verify phải tồn tại within DOM và có text. Có thể throw NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, WebDriverException nếu có lỗi khi tương tác với trình duyệt, hoặc PatternSyntaxException nếu biểu thức chính quy không hợp lệ.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyTextMatchesRegexSoft",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element contains text cần Verify"
  }, {
    "type" : "String",
    "name" : "pattern",
    "description" : "Biểu thức chính quy để so khớp"
  } ]
}, {
  "name" : "highlightElement",
  "description" : "Tạm thời vẽ một đường viền màu đỏ xung quanh một element trên trang để dễ dàng nhận biết và gỡ lỗi within quá trình chạy kịch bản.",
  "category" : "Web",
  "subCategory" : "Utility",
  "example" : "// Làm nổi bật các element within quá trình điền form\nwebKeyword.highlightElement(usernameFieldObject);\nwebKeyword.sendKeys(usernameFieldObject, \"admin@example.com\");\nwebKeyword.highlightElement(passwordFieldObject);\nwebKeyword.sendKeys(passwordFieldObject, \"password123\");\n\n// Làm nổi bật element để gỡ lỗi\nwebKeyword.waitForElementVisible(tableRowObject, 10);\nwebKeyword.highlightElement(tableRowObject);\nwebKeyword.takeElementScreenshot(tableRowObject, \"D:/screenshots/table_row.png\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần làm nổi bật phải tồn tại within DOM. Có thể throw NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "highlightElement",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần làm nổi bật"
  } ]
}, {
  "name" : "assertNotEquals",
  "description" : "Khẳng định rằng hai giá trị không bằng nhau. Tự động xử lý so sánh giữa các kiểu dữ liệu khác nhau. Nếu chúng bằng nhau, kịch bản sẽ DỪNG LẠI.",
  "category" : "Assertion",
  "subCategory" : "",
  "example" : "",
  "returnValue" : "void|No return value",
  "note" : "Keyword này so sánh giá trị sau khi đã chuyển đổi chúng sang dạng chuỗi ký tự.",
  "className" : "com.vtnet.netat.core.keywords.AssertionKeyword",
  "methodName" : "assertNotEquals",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "Object",
    "name" : "actualValue",
    "description" : "Giá trị thực tế."
  }, {
    "type" : "Object",
    "name" : "unexpectedValue",
    "description" : "Giá trị không mong muốn."
  } ]
}, {
  "name" : "doubleClick",
  "description" : "Thực hiện hành động click chuột hai lần (double-click) vào một element.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Double-click vào biểu tượng chỉnh sửa\nwebKeyword.doubleClick(editIconObject);\nwebKeyword.waitForElementVisible(editFormObject);\n\n// Double-click để chọn toàn bộ text\nwebKeyword.doubleClick(textParagraphObject);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần double-click phải tồn tại within DOM, phải hiển thị và có thể tương tác được, và không bị che khuất bởi các element khác. Có thể throw ElementNotVisibleException nếu element không hiển thị trên trang, ElementNotInteractableException nếu element không thể tương tác, StaleElementReferenceException nếu element không còn gắn với DOM, TimeoutException nếu element không xuất hiện within thời gian chờ, WebDriverException nếu có lỗi khi tương tác với trình duyệt, hoặc MoveTargetOutOfBoundsException nếu element nằm ngoài viewport hiện tại.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "doubleClick",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần thực hiện double-click"
  } ]
}, {
  "name" : "acceptSystemDialog",
  "description" : "Tự động tìm và nhấn vào các nút hệ thống có văn bản khẳng định như 'Allow', 'OK', 'Accept', 'While using the app'. Hữu ích để xử lý các hộp thoại cấp quyền hoặc thông báo hệ thống. Phương thức sẽ tìm kiếm các nút phổ biến và nhấn vào nút đầu tiên tìm thấy. Nếu không tìm thấy nút nào, một cảnh báo sẽ được ghi vào log.",
  "category" : "Mobile",
  "subCategory" : "System",
  "example" : "// Chấp nhận hộp thoại yêu cầu quyền truy cập vị trí\nmobileKeyword.tap(locationButton);\nmobileKeyword.acceptSystemDialog();\n\n// Chấp nhận thông báo cập nhật ứng dụng\nmobileKeyword.acceptSystemDialog();",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Hộp thoại hệ thống đang hiển thị trên màn hình và chứa ít nhất một nút có văn bản khẳng định được hỗ trợ. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình điều khiển, hoặc NoSuchElementException nếu không tìm thấy nút nào khớp với danh sách văn bản đã cho.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "acceptSystemDialog",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "clickWithJavascript",
  "description" : "Thực hiện click vào một element bằng JavaScript. Hữu ích khi click thông thường không hoạt động.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Click vào nút ẩn\nwebKeyword.clickWithJavascript(hiddenButtonObject);\n\n// Click vào element bị che khuất bởi element khác\nwebKeyword.clickWithJavascript(overlappedElementObject);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần click phải tồn tại within DOM, trình duyệt phải hỗ trợ thực thi JavaScript, và người dùng phải có quyền thực thi JavaScript trên trang. Có thể throw JavascriptException nếu có lỗi khi thực thi JavaScript, StaleElementReferenceException nếu element không còn gắn với DOM, TimeoutException nếu element không xuất hiện within thời gian chờ, WebDriverException nếu có lỗi khi tương tác với trình duyệt, hoặc NoSuchSessionException nếu phiên WebDriver không còn hợp lệ.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "clickWithJavascript",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần click"
  } ]
}, {
  "name" : "swipe",
  "description" : "Thực hiện hành động vuốt trên màn hình từ điểm bắt đầu đến điểm kết thúc. Cho phép kiểm soát chính xác tọa độ bắt đầu, kết thúc và tốc độ vuốt. Tọa độ được tính theo pixel từ góc trên bên trái của màn hình (0,0).",
  "category" : "Mobile",
  "subCategory" : "Gesture",
  "example" : "// Vuốt từ giữa màn hình xuống dưới\nmobileKeyword.swipe(500, 100, 500, 1500, 300);\n\n// Vuốt từ phải sang trái\nmobileKeyword.swipe(900, 500, 100, 500, 200);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Có thể throw WebDriverException nếu không thể thực hiện hành động vuốt, hoặc IllegalArgumentException nếu tọa độ nằm ngoài kích thước màn hình.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "swipe",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "int",
    "name" : "startX",
    "description" : "Tọa độ X điểm bắt đầu vuốt"
  }, {
    "type" : "int",
    "name" : "startY",
    "description" : "Tọa độ Y điểm bắt đầu vuốt"
  }, {
    "type" : "int",
    "name" : "endX",
    "description" : "Tọa độ X điểm kết thúc vuốt"
  }, {
    "type" : "int",
    "name" : "endY",
    "description" : "Tọa độ Y điểm kết thúc vuốt"
  }, {
    "type" : "int",
    "name" : "durationInMs",
    "description" : "Thời gian thực hiện vuốt (ms), giá trị thấp hơn = vuốt nhanh hơn"
  } ]
}, {
  "name" : "executeMobileCommand",
  "description" : "Thực thi một lệnh Appium tùy chỉnh không có sẵn trong các keyword tiêu chuẩn. Cung cấp sự linh hoạt tối đa cho các tình huống đặc thù hoặc các tính năng mới của Appium chưa được bao gồm trong framework. Phương thức này cho phép truyền các tham số phức tạp dưới dạng Map. Lưu ý: Cần hiểu rõ về lệnh Appium cụ thể trước khi sử dụng.",
  "category" : "Mobile",
  "subCategory" : "System",
  "example" : "// Xóa dữ liệu của một ứng dụng trên Android\nMap<String, Object> args = new HashMap<>();\nargs.put(\"appId\", \"com.example.app\");\nmobileKeyword.executeMobileCommand(\"mobile: clearApp\", args);\n\n// Thực hiện lệnh shell trên Android\nMap<String, Object> shellArgs = new HashMap<>();\nshellArgs.put(\"command\", \"dumpsys battery\");\nObject result = mobileKeyword.executeMobileCommand(\"mobile: shell\", shellArgs);",
  "returnValue" : "Object - Kết quả trả về từ lệnh Appium, kiểu dữ liệu phụ thuộc vào lệnh được thực thi",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Đang sử dụng AppiumDriver (AndroidDriver hoặc IOSDriver), cần hiểu rõ về lệnh Appium cụ thể và các tham số của nó, lệnh phải được hỗ trợ bởi phiên bản Appium và driver đang sử dụng, và một số lệnh có thể yêu cầu quyền đặc biệt hoặc cấu hình bổ sung. Có thể throw WebDriverException nếu lệnh không được hỗ trợ hoặc không thể thực thi, InvalidArgumentException nếu tham số không đúng định dạng hoặc thiếu tham số bắt buộc, UnsupportedCommandException nếu lệnh không được hỗ trợ trên nền tảng hiện tại, SessionNotCreatedException nếu phiên Appium không còn hoạt động, hoặc NoSuchContextException nếu lệnh yêu cầu context không tồn tại.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "executeMobileCommand",
  "returnType" : "Object",
  "parameters" : [ {
    "type" : "String",
    "name" : "commandName",
    "description" : "Tên lệnh Appium cần thực thi (ví dụ: 'mobile: clearApp', 'mobile: shell')"
  }, {
    "type" : "Map",
    "name" : "commandArgs",
    "description" : "Các tham số của lệnh dưới dạng key-value"
  } ]
}, {
  "name" : "longPress",
  "description" : "Thực hiện hành động chạm và giữ (long press) vào một phần tử trong một khoảng thời gian xác định. Hữu ích cho các thao tác như hiển thị menu ngữ cảnh, kéo thả, hoặc các tương tác đặc biệt yêu cầu nhấn giữ. Phương thức sẽ đợi phần tử hiển thị trước khi thực hiện.",
  "category" : "Mobile",
  "subCategory" : "Interaction",
  "example" : "// Chạm và giữ một hình ảnh trong 2 giây để hiển thị menu lưu ảnh\nmobileKeyword.longPress(imageObject, 2);\n\n// Chạm và giữ một mục trong danh sách để hiển thị menu xóa\nmobileKeyword.longPress(listItemObject, 1);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Phần tử UI cần tương tác phải hiển thị trên màn hình. Có thể throw ElementNotVisibleException nếu phần tử không hiển thị, NoSuchElementException nếu không tìm thấy phần tử, hoặc ElementNotInteractableException nếu phần tử không thể tương tác.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "longPress",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần chạm và giữ"
  }, {
    "type" : "int",
    "name" : "durationInSeconds",
    "description" : "Thời gian giữ phần tử, tính bằng giây"
  } ]
}, {
  "name" : "selectByIndex",
  "description" : "Chọn một option (option) within một element dropdown (thẻ select) dựa trên chỉ số of nó (bắt đầu từ 0).",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Chọn option thứ hai in dropdown quốc gia\nwebKeyword.selectByIndex(countryDropdownObject, 1); // Chỉ số bắt đầu từ 0\n\n// Chọn option đầu tiên in dropdown ngôn ngữ\nwebKeyword.selectByIndex(languageDropdownObject, 0);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element dropdown phải tồn tại within DOM, phải is thẻ <select> hợp lệ, phải hiển thị và có thể tương tác được, và chỉ số phải nằm within phạm vi hợp lệ (0 đến số lượng option - 1). Có thể throw NoSuchElementException nếu element dropdown không tồn tại, ElementNotVisibleException nếu element không hiển thị trên trang, ElementNotInteractableException nếu element không thể tương tác, StaleElementReferenceException nếu element không còn gắn với DOM, IndexOutOfBoundsException nếu chỉ số nằm ngoài phạm vi hợp lệ, UnexpectedTagNameException nếu element không phải is thẻ <select>, TimeoutException nếu element không xuất hiện within thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "selectByIndex",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element dropdown (thẻ select)"
  }, {
    "type" : "int",
    "name" : "index",
    "description" : "Chỉ số of option cần chọn (ví dụ: 0 cho option đầu tiên)"
  } ]
}, {
  "name" : "assertElementEnabled",
  "description" : "Khẳng định rằng một element đang ở trạng thái có thể tương tác (enabled). Nếu element bị vô hiệu hóa (disabled), kịch bản sẽ DỪNG LẠI.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify nút gửi form đã được kích hoạt sau khi điền đầy đủ thông tin\nwebKeyword.sendKeys(nameInputObject, \"Nguyễn Văn A\");\nwebKeyword.sendKeys(emailInputObject, \"nguyenvana@example.com\");\nwebKeyword.click(termsCheckboxObject);\nwebKeyword.assertElementEnabled(submitButtonObject);\nwebKeyword.click(submitButtonObject);\n\n// Verify nút thanh toán đã được kích hoạt sau khi chọn phương thức thanh toán\nwebKeyword.click(creditCardOptionObject);\nwebKeyword.sendKeys(cardNumberInputObject, \"1234567890123456\");\nwebKeyword.assertElementEnabled(payNowButtonObject);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và element cần Verify phải tồn tại within DOM. Có thể throw AssertionError nếu element đang ở trạng thái disabled, NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "assertElementEnabled",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần Verify"
  } ]
}, {
  "name" : "closeSession",
  "description" : "Đóng hoàn toàn phiên làm việc hiện tại (cả trình duyệt web và ứng dụng di động) và giải phóng tài nguyên. Phương thức này nên được gọi ở cuối mỗi test case để đảm bảo tất cả tài nguyên được giải phóng đúng cách.",
  "category" : "DriverKeyword",
  "subCategory" : "",
  "example" : "// Đóng phiên làm việc sau khi hoàn thành test case\ndriverKeyword.closeSession();",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho tất cả nền tảng (web và mobile). Đã khởi tạo phiên làm việc trước đó bằng startBrowser hoặc startApplication. Có thể throw WebDriverException nếu có lỗi khi đóng phiên làm việc.",
  "className" : "com.vtnet.netat.core.keywords.DriverKeyword",
  "methodName" : "closeSession",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "verifyElementAttributeHard",
  "description" : "Verify giá trị of một thuộc tính (attribute) trên element. Nếu giá trị không khớp, kịch bản sẽ DỪNG LẠI.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify đường dẫn of liên kết\nwebKeyword.verifyElementAttributeHard(linkObject, \"href\", \"/products/123\");\n\n// Verify trạng thái of checkbox\nwebKeyword.click(termsCheckboxObject);\nwebKeyword.verifyElementAttributeHard(termsCheckboxObject, \"checked\", \"true\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần Verify phải tồn tại within DOM, và thuộc tính cần Verify phải tồn tại trên element. Có thể throw AssertionError nếu giá trị thuộc tính không khớp với giá trị mong đợi, NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyElementAttributeHard",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần Verify"
  }, {
    "type" : "String",
    "name" : "attributeName",
    "description" : "Tên of thuộc tính (ví dụ: 'href', 'class', 'value')"
  }, {
    "type" : "String",
    "name" : "expectedValue",
    "description" : "Giá trị mong đợi of thuộc tính"
  } ]
}, {
  "name" : "assertDisabled",
  "description" : "Khẳng định rằng một phần tử đang ở trạng thái không thể tương tác (disabled). Phương thức này kiểm tra thuộc tính 'enabled' của phần tử và ném AssertionError nếu phần tử đang được kích hoạt (enabled). Hữu ích khi cần đảm bảo một nút hoặc trường nhập liệu đã bị vô hiệu hóa trong các trường hợp nhất định.",
  "category" : "Mobile",
  "subCategory" : "Assertion",
  "example" : "// Kiểm tra nút đăng nhập bị vô hiệu hóa khi chưa nhập thông tin\nmobileKeyword.assertDisabled(loginButton);\n\n// Xác minh trường nhập số tiền bị vô hiệu hóa khi chọn số tiền cố định\nmobileKeyword.tap(fixedAmountOption);\nmobileKeyword.assertDisabled(amountInput);",
  "returnValue" : "void - Không trả về giá trị, ném AssertionError nếu kiểm tra thất bại",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Phần tử cần kiểm tra phải tồn tại và có thuộc tính 'enabled', và phải là loại có thể được kích hoạt/vô hiệu hóa (button, input, etc.). Có thể throw AssertionError nếu phần tử đang ở trạng thái được kích hoạt (enabled), NoSuchElementException nếu không tìm thấy phần tử, StaleElementReferenceException nếu phần tử không còn gắn với DOM, hoặc WebDriverException nếu không thể lấy thuộc tính 'enabled' của phần tử.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertDisabled",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra trạng thái"
  } ]
}, {
  "name" : "assertElementNotSelected",
  "description" : "Khẳng định rằng một element (checkbox hoặc radio button) đang ở trạng thái không được chọn. Nếu đang được chọn, kịch bản sẽ DỪNG LẠI.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify checkbox thông báo is not selected mặc định\nwebKeyword.assertElementNotSelected(newsletterCheckbox);\nwebKeyword.click(newsletterCheckbox); // Chọn để nhận thông báo\n\n// Verify các option bổ sung is not selected\nwebKeyword.assertElementNotSelected(expressShippingRadio);\nwebKeyword.assertElementNotSelected(giftWrappingCheckbox);\nwebKeyword.click(expressShippingRadio); // Chọn vận chuyển nhanh",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần Verify phải tồn tại within DOM và is checkbox hoặc radio button. Có thể throw AssertionError nếu element đang ở trạng thái được chọn, NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, WebDriverException nếu có lỗi khi tương tác với trình duyệt, hoặc IllegalArgumentException nếu element không phải is checkbox hoặc radio button.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "assertElementNotSelected",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element checkbox hoặc radio button cần Verify"
  } ]
}, {
  "name" : "assertEquals",
  "description" : "Khẳng định rằng hai giá trị bằng nhau. Tự động xử lý so sánh giữa các kiểu dữ liệu khác nhau (ví dụ: số 1 và chuỗi \"1\"). Nếu không, kịch bản sẽ DỪNG LẠI.",
  "category" : "Assertion",
  "subCategory" : "",
  "example" : "",
  "returnValue" : "void|No return value",
  "note" : "Keyword này so sánh giá trị sau khi đã chuyển đổi chúng sang dạng chuỗi ký tự.",
  "className" : "com.vtnet.netat.core.keywords.AssertionKeyword",
  "methodName" : "assertEquals",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "Object",
    "name" : "actualValue",
    "description" : "Giá trị thực tế (có thể là một biến)."
  }, {
    "type" : "Object",
    "name" : "expectedValue",
    "description" : "Giá trị mong đợi."
  } ]
}, {
  "name" : "assertAttributeEquals",
  "description" : "Khẳng định rằng một thuộc tính của phần tử có giá trị chính xác như mong đợi. Hữu ích khi cần kiểm tra các thuộc tính đặc biệt như content-desc, resource-id, text, checked, v.v. Phương thức này so sánh chính xác giá trị thuộc tính, phân biệt chữ hoa/thường và khoảng trắng.",
  "category" : "Mobile",
  "subCategory" : "Assertion",
  "example" : "// Kiểm tra thuộc tính content-desc của nút\nmobileKeyword.assertAttributeEquals(menuButton, \"content-desc\", \"Menu chính\");\n\n// Xác minh resource-id của một phần tử\nmobileKeyword.assertAttributeEquals(loginButton, \"resource-id\", \"com.example.myapp:id/login_button\");",
  "returnValue" : "void - Không trả về giá trị, ném AssertionError nếu kiểm tra thất bại",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Phần tử cần kiểm tra phải tồn tại, thuộc tính cần kiểm tra phải tồn tại trên phần tử, và cần biết chính xác tên thuộc tính theo nền tảng (Android/iOS có thể khác nhau). Có thể throw AssertionError nếu giá trị thuộc tính không khớp với giá trị mong đợi, NoSuchElementException nếu không tìm thấy phần tử, StaleElementReferenceException nếu phần tử không còn gắn với DOM, hoặc WebDriverException nếu không thể lấy thuộc tính của phần tử.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertAttributeEquals",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra thuộc tính"
  }, {
    "type" : "String",
    "name" : "attributeName",
    "description" : "Tên thuộc tính cần kiểm tra (ví dụ: 'content-desc', 'text', 'resource-id')"
  }, {
    "type" : "String",
    "name" : "expectedValue",
    "description" : "Giá trị mong đợi của thuộc tính"
  } ]
}, {
  "name" : "click",
  "description" : "Thực hiện hành động click chuột vào một element trên giao diện. Keyword sẽ tự động chờ cho đến khi element sẵn sàng để được click.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Click vào nút đăng nhập\nwebKeyword.click(loginButtonObject);\n\n// Click vào liên kết\nwebKeyword.click(registerLinkObject);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần click phải tồn tại within DOM, phải hiển thị và có thể tương tác được, và không bị che khuất bởi các element khác. Có thể throw ElementNotVisibleException nếu element không hiển thị trên trang, ElementClickInterceptedException nếu element bị che khuất bởi element khác, StaleElementReferenceException nếu element không còn gắn với DOM, TimeoutException nếu element không xuất hiện within thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "click",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng giao diện (nút bấm, liên kết,...) cần thực hiện hành động click"
  } ]
}, {
  "name" : "waitForElementPresent",
  "description" : "Tạm dừng kịch bản cho đến khi một element tồn tại within DOM of trang, không nhất thiết phải hiển thị. Hữu ích để chờ các element được tạo ra bởi JavaScript.",
  "category" : "Web",
  "subCategory" : "Wait",
  "example" : "// Chờ element động được tạo bởi JavaScript\nwebKeyword.click(loadDynamicContentButton);\nwebKeyword.waitForElementPresent(dynamicContentObject, 10);\nwebKeyword.verifyElementPresent(dynamicContentObject);\n\n// Chờ element được tạo sau khi chọn option\nwebKeyword.selectByVisibleText(categoryDropdownObject, \"Điện thoại\");\nwebKeyword.waitForElementPresent(subcategoryListObject, 5);\nwebKeyword.verifyElementCount(subcategoryItemObject, 5);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, locator of element phải hợp lệ, và element sẽ được thêm vào DOM within khoảng thời gian chờ đã chỉ định. Có thể throw TimeoutException nếu element không xuất hiện within DOM within thời gian chờ đã chỉ định, InvalidSelectorException nếu locator không hợp lệ, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "waitForElementPresent",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element cần chờ cho đến khi nó tồn tại"
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian chờ tối đa (tính bằng seconds)"
  } ]
}, {
  "name" : "clickElementByIndex",
  "description" : "Click vào một element cụ thể within một danh sách các element dựa trên chỉ số (index) of nó (bắt đầu từ 0).",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Click vào kết quả tìm kiếm thứ 3\nwebKeyword.clickElementByIndex(searchResultLinks, 2); // Index bắt đầu từ 0\n\n// Click vào mục đầu tiên within danh sách\nwebKeyword.clickElementByIndex(menuItems, 0);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, danh sách element phải tồn tại within DOM, chỉ số phải nằm within phạm vi hợp lệ (0 đến số lượng element - 1), và element tại chỉ số cần click phải hiển thị và có thể tương tác được. Có thể throw IndexOutOfBoundsException nếu chỉ số nằm ngoài phạm vi hợp lệ, ElementNotVisibleException nếu element không hiển thị trên trang, ElementNotInteractableException nếu element không thể tương tác, StaleElementReferenceException nếu element không còn gắn với DOM, TimeoutException nếu element không xuất hiện within thời gian chờ, WebDriverException nếu có lỗi khi tương tác với trình duyệt, hoặc NoSuchElementException nếu danh sách element không tồn tại.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "clickElementByIndex",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Đối tượng giao diện đại diện cho danh sách element"
  }, {
    "type" : "int",
    "name" : "index",
    "description" : "Vị trí of element cần click (0 cho element đầu tiên)"
  } ]
}, {
  "name" : "modifyDateTime",
  "description" : "Thực hiện cộng hoặc trừ một khoảng thời gian (ngày, tháng, năm...) vào một mốc thời gian gốc và trả về kết quả dưới dạng chuỗi đã được định dạng.",
  "category" : "Utility",
  "subCategory" : "DateTime",
  "example" : "// Lấy ngày của 7 ngày sau kể từ hôm nay\nutilityKeyword.modifyDateTime(\"NOW\", \"\", 7, \"DAYS\", \"dd/MM/yyyy\");\n\n// Lấy ngày của 3 tháng trước ngày '15/09/2025'\nutilityKeyword.modifyDateTime(\"15/09/2025\", \"dd/MM/yyyy\", -3, \"MONTHS\", \"dd/MM/yyyy\");",
  "returnValue" : "String|Chuỗi ngày giờ mới sau khi đã tính toán, được định dạng theo outputFormat.",
  "note" : "Tham số 'unit' không phân biệt chữ hoa/thường. Nếu định dạng ngày tháng đầu vào không chính xác, keyword sẽ gây ra lỗi.",
  "className" : "com.vtnet.netat.core.keywords.UtilityKeyword",
  "methodName" : "modifyDateTime",
  "returnType" : "String",
  "parameters" : [ {
    "type" : "String",
    "name" : "baseDateTimeString",
    "description" : "Mốc thời gian gốc dưới dạng chuỗi, hoặc điền 'NOW' để sử dụng thời gian hiện tại."
  }, {
    "type" : "String",
    "name" : "inputFormat",
    "description" : "Định dạng của mốc thời gian gốc (ví dụ: 'dd/MM/yyyy'). Bỏ trống nếu mốc thời gian gốc là 'NOW'."
  }, {
    "type" : "int",
    "name" : "amount",
    "description" : "Số lượng đơn vị thời gian cần cộng (số dương) hoặc trừ (số âm)."
  }, {
    "type" : "String",
    "name" : "unit",
    "description" : "Đơn vị thời gian. Hỗ trợ: YEARS, MONTHS, DAYS, HOURS, MINUTES, SECONDS."
  }, {
    "type" : "String",
    "name" : "outputFormat",
    "description" : "Định dạng mong muốn cho chuỗi kết quả trả về."
  } ]
}, {
  "name" : "getCookie",
  "description" : "Lấy thông tin of một cookie cụ thể dựa trên tên of nó.",
  "category" : "Web",
  "subCategory" : "Storage",
  "example" : "// Verify cookie phiên làm việc\nCookie sessionCookie = webKeyword.getCookie(\"session_id\");\nif (sessionCookie == null) {\n    webKeyword.navigate(\"https://example.com/login\");\n} else {\n    logger.info(\"Phiên làm việc: \" + sessionCookie.getValue());\n}\n\n// Verify thời hạn cookie\nCookie authCookie = webKeyword.getCookie(\"auth_token\");\nlogger.info(\"Cookie hết hạn vào: \" + authCookie.getExpiry());",
  "returnValue" : "Cookie - Đối tượng Cookie contains thông tin of cookie được yêu cầu, hoặc null nếu không tìm thấy",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, trang web đã được tải hoàn toàn. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "getCookie",
  "returnType" : "Cookie",
  "parameters" : [ {
    "type" : "String",
    "name" : "cookieName",
    "description" : "Tên of cookie cần lấy"
  } ]
}, {
  "name" : "Assert False",
  "description" : "Khẳng định rằng một điều kiện có giá trị false. Nếu điều kiện là true, test case sẽ dừng lại và báo lỗi",
  "category" : "Assertion",
  "subCategory" : "",
  "example" : "assertFalse(isElementHidden);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Assertion này kiểm tra điều kiện boolean phải là false. Thường được sử dụng để kiểm tra trạng thái phủ định hoặc kết quả của các phép so sánh.",
  "className" : "com.vtnet.netat.core.keywords.AssertionKeyword",
  "methodName" : "assertFalse",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "boolean",
    "name" : "condition",
    "description" : "Điều kiện boolean cần kiểm tra (phải là false)"
  } ]
}, {
  "name" : "clearLocalStorage",
  "description" : "Xóa toàn bộ dữ liệu đang được lưu trữ within Local Storage of trang web hiện tại.",
  "category" : "Web",
  "subCategory" : "Storage",
  "example" : "// Đăng xuất và xóa dữ liệu người dùng\nwebKeyword.click(logoutButtonObject);\nwebKeyword.clearLocalStorage();\nwebKeyword.navigate(\"https://example.com/login\");\n\n// Xóa dữ liệu trước khi chạy kiểm thử\nwebKeyword.navigate(\"https://example.com\");\nwebKeyword.clearLocalStorage();\nwebKeyword.refreshPage();",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, trang web đã được tải hoàn toàn, trình duyệt hỗ trợ Local Storage. Có thể throw JavascriptException nếu có lỗi khi thực thi JavaScript, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "clearLocalStorage",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "scrollToTop",
  "description" : "Cuộn lên vị trí cao nhất (đầu trang) of trang web.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Cuộn lên đầu trang để truy cập menu chính\nwebKeyword.scrollToTop();\nwebKeyword.verifyElementVisible(mainMenuObject);\n\n// Cuộn lên đầu trang sau khi hoàn thành form dài\nwebKeyword.click(submitButtonObject);\nwebKeyword.scrollToTop();",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và trình duyệt phải hỗ trợ thực thi JavaScript. Có thể throw JavascriptException nếu có lỗi khi thực thi JavaScript, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "scrollToTop",
  "returnType" : "void",
  "parameters" : [ ]
}, {
  "name" : "assertNotChecked",
  "description" : "Khẳng định rằng một switch, checkbox hoặc radio button đang ở trạng thái không được chọn/tắt. Phương thức này kiểm tra thuộc tính 'checked' của phần tử và ném AssertionError nếu phần tử đang được chọn. Áp dụng cho các phần tử có thể chọn/bỏ chọn như checkbox, radio button, toggle switch. Lưu ý: Phần tử phải hỗ trợ thuộc tính 'checked', nếu không có thể gây ra lỗi.",
  "category" : "Mobile",
  "subCategory" : "Assertion",
  "example" : "// Kiểm tra rằng tùy chọn chưa được chọn ban đầu\nmobileKeyword.assertNotChecked(optionalFeatureCheckbox);\n\n// Xác minh các radio button khác không được chọn\nmobileKeyword.tap(option1RadioButton);\nmobileKeyword.assertChecked(option1RadioButton);\nmobileKeyword.assertNotChecked(option2RadioButton);",
  "returnValue" : "void - Không trả về giá trị, ném AssertionError nếu kiểm tra thất bại",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Phần tử cần kiểm tra phải tồn tại và có thuộc tính 'checked', và phải là loại có thể chọn/bỏ chọn (checkbox, radio button, switch). Có thể throw AssertionError nếu phần tử đang ở trạng thái được chọn/bật, NoSuchElementException nếu không tìm thấy phần tử, StaleElementReferenceException nếu phần tử không còn gắn với DOM, hoặc WebDriverException nếu không thể lấy thuộc tính 'checked' của phần tử.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertNotChecked",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra trạng thái"
  } ]
}, {
  "name" : "pressKeys",
  "description" : "Gửi một chuỗi ký tự hoặc một tổ hợp phím (ví dụ: Ctrl+C, Enter) tới element đang được focus trên trình duyệt.",
  "category" : "Web",
  "subCategory" : "Interaction",
  "example" : "// Gửi tổ hợp phím Ctrl + A để chọn tất cả\nwebKeyword.pressKeys(Keys.CONTROL, \"a\");\n\n// Gửi phím Enter để xác nhận form\nwebKeyword.sendKeys(searchInputObject, \"laptop\");\nwebKeyword.pressKeys(Keys.ENTER);",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, element cần nhận tổ hợp phím phải đang được focus, trình duyệt phải hỗ trợ các tổ hợp phím được sử dụng, và các phím đặc biệt phải được định nghĩa within org.openqa.selenium.Keys. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình duyệt, NoSuchSessionException nếu phiên WebDriver không còn hợp lệ, UnsupportedOperationException nếu trình duyệt không hỗ trợ thao tác phím được yêu cầu, hoặc IllegalArgumentException nếu tham số keys không hợp lệ.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "pressKeys",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "CharSequence[]",
    "name" : "keys",
    "description" : "Một hoặc nhiều chuỗi ký tự hoặc phím đặc biệt từ org.openqa.selenium.Keys"
  } ]
}, {
  "name" : "verifyTextHard",
  "description" : "So sánh text of một element với một chuỗi ký tự mong đợi (phải khớp chính xác). Nếu không khớp, kịch bản sẽ DỪNG LẠI.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify tiêu đề trang chính xác\nwebKeyword.verifyTextHard(pageTitleObject, \"Chào mừng đến với trang chủ\");\n\n// Verify kết quả tính toán\nwebKeyword.sendKeys(number1InputObject, \"5\");\nwebKeyword.sendKeys(number2InputObject, \"7\");\nwebKeyword.click(calculateButtonObject);\nwebKeyword.verifyTextHard(resultObject, \"12\");",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và element cần Verify phải tồn tại within DOM và có text. Có thể throw AssertionError nếu text of element không khớp với giá trị mong đợi, NoSuchElementException nếu không tìm thấy element, StaleElementReferenceException nếu element không còn gắn với DOM, hoặc WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyTextHard",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "element contains text cần Verify"
  }, {
    "type" : "String",
    "name" : "expectedText",
    "description" : "Chuỗi text mong đợi"
  } ]
}, {
  "name" : "assertElementNotPresent",
  "description" : "Khẳng định rằng một phần tử KHÔNG tồn tại trong cấu trúc màn hình sau một khoảng thời gian chờ. Hữu ích để xác minh rằng một phần tử đã bị xóa hoặc chưa được tạo. Phương thức sẽ đợi trong khoảng thời gian chỉ định và kiểm tra xem phần tử có xuất hiện không, nếu phần tử xuất hiện trong thời gian đó, một AssertionError sẽ được ném ra.",
  "category" : "Mobile",
  "subCategory" : "Assertion",
  "example" : "// Kiểm tra thông báo lỗi không xuất hiện sau khi nhập đúng thông tin\nmobileKeyword.assertElementNotPresent(errorMessage, 3);\n\n// Xác minh màn hình loading đã biến mất sau khi tải xong\nmobileKeyword.assertElementNotPresent(loadingSpinner, 10);",
  "returnValue" : "void - Không trả về giá trị, ném AssertionError nếu kiểm tra thất bại",
  "note" : "Áp dụng cho nền tảng Mobile. Thiết bị di động đã được kết nối và cấu hình đúng với Appium. Locator của phần tử cần kiểm tra phải hợp lệ. Có thể throw AssertionError nếu phần tử xuất hiện trong khoảng thời gian chờ, hoặc WebDriverException nếu có lỗi khi tương tác với trình điều khiển.",
  "className" : "com.vtnet.netat.mobile.keywords.MobileKeyword",
  "methodName" : "assertElementNotPresent",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "ObjectUI",
    "name" : "uiObject",
    "description" : "Phần tử cần kiểm tra sự không tồn tại"
  }, {
    "type" : "int",
    "name" : "timeoutInSeconds",
    "description" : "Thời gian tối đa (giây) để đợi và xác nhận phần tử không xuất hiện"
  } ]
}, {
  "name" : "verifyUrlSoft",
  "description" : "So sánh URL of trang hiện tại với một chuỗi mong đợi. Nếu không khớp, kịch bản sẽ ghi nhận lỗi và TIẾP TỤC chạy.",
  "category" : "Web",
  "subCategory" : "Assertion",
  "example" : "// Verify URL within quy trình nhiều bước\nwebKeyword.click(nextButtonObject);\nwebKeyword.waitForPageLoaded(10);\nwebKeyword.verifyUrlSoft(\"https://example.com/checkout/step1\");\nwebKeyword.fillCheckoutForm(); // Tiếp tục quy trình ngay cả khi URL không đúng\n\n// Verify nhiều điều kiện bao gồm URL\nwebKeyword.verifyElementVisibleSoft(pageHeaderObject, true);\nwebKeyword.verifyUrlSoft(\"https://example.com/products\");\nwebKeyword.click(firstProductObject); // Tiếp tục thực hiện hành động",
  "returnValue" : "void - Không trả về giá trị",
  "note" : "Áp dụng cho nền tảng Web. WebDriver đã được khởi tạo và đang hoạt động, và trang web đã hoàn thành quá trình tải. Có thể throw WebDriverException nếu có lỗi khi tương tác với trình duyệt.",
  "className" : "com.vtnet.netat.web.keywords.WebKeyword",
  "methodName" : "verifyUrlSoft",
  "returnType" : "void",
  "parameters" : [ {
    "type" : "String",
    "name" : "expectedUrl",
    "description" : "URL đầy đủ mong đợi"
  } ]
} ]